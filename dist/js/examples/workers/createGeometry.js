// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

if (Module['ENVIRONMENT']) {
  if (Module['ENVIRONMENT'] === 'WEB') {
    ENVIRONMENT_IS_WEB = true;
  } else if (Module['ENVIRONMENT'] === 'WORKER') {
    ENVIRONMENT_IS_WORKER = true;
  } else if (Module['ENVIRONMENT'] === 'NODE') {
    ENVIRONMENT_IS_NODE = true;
  } else if (Module['ENVIRONMENT'] === 'SHELL') {
    ENVIRONMENT_IS_SHELL = true;
  } else {
    throw new Error('The provided Module[\'ENVIRONMENT\'] value is not valid. It must be one of: WEB|WORKER|NODE|SHELL.');
  }
} else {
  ENVIRONMENT_IS_WEB = typeof window === 'object';
  ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
  ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
  ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
}


if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = console.log;
  if (!Module['printErr']) Module['printErr'] = console.warn;

  var nodeFS;
  var nodePath;

  Module['read'] = function shell_read(filename, binary) {
    if (!nodeFS) nodeFS = require('fs');
    if (!nodePath) nodePath = require('path');
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function shell_read() { throw 'no read() available' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof quit === 'function') {
    Module['quit'] = function(status, toThrow) {
      quit(status);
    }
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function shell_read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (ENVIRONMENT_IS_WORKER) {
    Module['readBinary'] = function readBinary(url) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.responseType = 'arraybuffer';
      xhr.send(null);
      return new Uint8Array(xhr.response);
    };
  }

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
      } else {
        onerror();
      }
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function shell_print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function shell_printErr(x) {
      console.warn(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}
if (!Module['quit']) {
  Module['quit'] = function(status, toThrow) {
    throw toThrow;
  }
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;



// {{PREAMBLE_ADDITIONS}}

// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
    return value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  prepVararg: function (ptr, type) {
    if (type === 'double' || type === 'i64') {
      // move so the load is aligned
      if (ptr & 7) {
        assert((ptr & 7) === 4);
        ptr += 4;
      }
    } else {
      assert((ptr & 3) === 0);
    }
    return ptr;
  },
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      // optimize away arguments usage in common cases
      if (sig.length === 1) {
        sigCache[func] = function dynCall_wrapper() {
          return Runtime.dynCall(sig, func);
        };
      } else if (sig.length === 2) {
        sigCache[func] = function dynCall_wrapper(arg) {
          return Runtime.dynCall(sig, func, [arg]);
        };
      } else {
        // general case
        sigCache[func] = function dynCall_wrapper() {
          return Runtime.dynCall(sig, func, Array.prototype.slice.call(arguments));
        };
      }
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { assert(DYNAMICTOP_PTR);var ret = HEAP32[DYNAMICTOP_PTR>>2];var end = (((ret + size + 15)|0) & -16);HEAP32[DYNAMICTOP_PTR>>2] = end;if (end >= TOTAL_MEMORY) {var success = enlargeMemory();if (!success) {HEAP32[DYNAMICTOP_PTR>>2] = ret;return 0;}}return ret;},
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*(+4294967296))) : ((+((low>>>0)))+((+((high|0)))*(+4294967296)))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}



Module["Runtime"] = Runtime;


function getSafeHeapType(bytes, isFloat) {
  switch (bytes) {
    case 1: return 'i8';
    case 2: return 'i16';
    case 4: return isFloat ? 'float' : 'i32';
    case 8: return 'double';
    default: assert(0);
  }
}


function SAFE_HEAP_STORE(dest, value, bytes, isFloat) {
  if (dest <= 0) abort('segmentation fault storing ' + bytes + ' bytes to address ' + dest);
  if (dest % bytes !== 0) abort('alignment error storing to address ' + dest + ', which was expected to be aligned to a multiple of ' + bytes);
  if (staticSealed) {
    if (dest + bytes > HEAP32[DYNAMICTOP_PTR>>2]) abort('segmentation fault, exceeded the top of the available dynamic heap when storing ' + bytes + ' bytes to address ' + dest + '. STATICTOP=' + STATICTOP + ', DYNAMICTOP=' + HEAP32[DYNAMICTOP_PTR>>2]);
    assert(DYNAMICTOP_PTR);
    assert(HEAP32[DYNAMICTOP_PTR>>2] <= TOTAL_MEMORY);
  } else {
    if (dest + bytes > STATICTOP) abort('segmentation fault, exceeded the top of the available static heap when storing ' + bytes + ' bytes to address ' + dest + '. STATICTOP=' + STATICTOP);
  }
  setValue(dest, value, getSafeHeapType(bytes, isFloat), 1);
}
function SAFE_HEAP_STORE_D(dest, value, bytes) {
  SAFE_HEAP_STORE(dest, value, bytes, true);
}

function SAFE_HEAP_LOAD(dest, bytes, unsigned, isFloat) {
  if (dest <= 0) abort('segmentation fault loading ' + bytes + ' bytes from address ' + dest);
  if (dest % bytes !== 0) abort('alignment error loading from address ' + dest + ', which was expected to be aligned to a multiple of ' + bytes);
  if (staticSealed) {
    if (dest + bytes > HEAP32[DYNAMICTOP_PTR>>2]) abort('segmentation fault, exceeded the top of the available dynamic heap when loading ' + bytes + ' bytes from address ' + dest + '. STATICTOP=' + STATICTOP + ', DYNAMICTOP=' + HEAP32[DYNAMICTOP_PTR>>2]);
    assert(DYNAMICTOP_PTR);
    assert(HEAP32[DYNAMICTOP_PTR>>2] <= TOTAL_MEMORY);
  } else {
    if (dest + bytes > STATICTOP) abort('segmentation fault, exceeded the top of the available static heap when loading ' + bytes + ' bytes from address ' + dest + '. STATICTOP=' + STATICTOP);
  }
  var type = getSafeHeapType(bytes, isFloat);
  var ret = getValue(dest, type, 1);
  if (unsigned) ret = unSign(ret, parseInt(type.substr(1)), 1);
  return ret;
}
function SAFE_HEAP_LOAD_D(dest, bytes, unsigned) {
  return SAFE_HEAP_LOAD(dest, bytes, unsigned, true);
}

function SAFE_FT_MASK(value, mask) {
  var ret = value & mask;
  if (ret !== value) {
    abort('Function table mask error: function pointer is ' + value + ' which is masked by ' + mask + ', the likely cause of this is that the function pointer is being called by the wrong type.');
  }
  return ret;
}

function segfault() {
  abort('segmentation fault');
}
function alignfault() {
  abort('alignment fault');
}
function ftfault() {
  abort('Function table mask error');
}

//========================================
// Runtime essentials
//========================================

var ABORT = 0; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try { func = eval('_' + ident); } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        var len = (str.length << 2) + 1;
        ret = Runtime.stackAlloc(len);
        stringToUTF8(str, ret, len);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface.
  ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    assert(returnType !== 'array', 'Return type should not be "array".');
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if ((!opts || !opts.async) && typeof EmterpreterAsync === 'object') {
      assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling ccall');
    }
    if (opts && opts.async) assert(!returnType, 'async ccalls cannot return values');
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) {
      if (opts && opts.async) {
        EmterpreterAsync.asyncFinalizers.push(function() {
          Runtime.stackRestore(stack);
        });
        return;
      }
      Runtime.stackRestore(stack);
    }
    return ret;
  }

  var sourceRegex = /^function\s*[a-zA-Z$_0-9]*\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }

  // sources of useful functions. we create this lazily as it can trigger a source decompression on this entire file
  var JSsource = null;
  function ensureJSsource() {
    if (!JSsource) {
      JSsource = {};
      for (var fun in JSfuncs) {
        if (JSfuncs.hasOwnProperty(fun)) {
          // Elements of toCsource are arrays of three items:
          // the code, and the return value
          JSsource[fun] = parseJSFunc(JSfuncs[fun]);
        }
      }
    }
  }

  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      ensureJSsource();
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=(' + convertCode.returnValue + ');';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    funcstr += "if (typeof EmterpreterAsync === 'object') { assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling cwrap') }";
    if (!numericArgs) {
      // If we had a stack, restore it
      ensureJSsource();
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["ccall"] = ccall;
Module["cwrap"] = cwrap;

/** @type {function(number, number, string, boolean=)} */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
  if (noSafe) {
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
  } else {
    switch(type) {
      case 'i1': SAFE_HEAP_STORE(((ptr)|0), ((value)|0), 1); break;
      case 'i8': SAFE_HEAP_STORE(((ptr)|0), ((value)|0), 1); break;
      case 'i16': SAFE_HEAP_STORE(((ptr)|0), ((value)|0), 2); break;
      case 'i32': SAFE_HEAP_STORE(((ptr)|0), ((value)|0), 4); break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],SAFE_HEAP_STORE(((ptr)|0), ((tempI64[0])|0), 4),SAFE_HEAP_STORE((((ptr)+(4))|0), ((tempI64[1])|0), 4)); break;
      case 'float': SAFE_HEAP_STORE_D(((ptr)|0), (+(value)), 4); break;
      case 'double': SAFE_HEAP_STORE_D(((ptr)|0), (+(value)), 8); break;
      default: abort('invalid type for setValue: ' + type);
    }
  }
}
Module["setValue"] = setValue;

/** @type {function(number, string, boolean=)} */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
  if (noSafe) {
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  } else {
    switch(type) {
      case 'i1': return ((SAFE_HEAP_LOAD(((ptr)|0), 1, 0))|0);
      case 'i8': return ((SAFE_HEAP_LOAD(((ptr)|0), 1, 0))|0);
      case 'i16': return ((SAFE_HEAP_LOAD(((ptr)|0), 2, 0))|0);
      case 'i32': return ((SAFE_HEAP_LOAD(((ptr)|0), 4, 0))|0);
      case 'i64': return ((SAFE_HEAP_LOAD(((ptr)|0), 8, 0))|0);
      case 'float': return (+(SAFE_HEAP_LOAD_D(((ptr)|0), 4, 0)));
      case 'double': return (+(SAFE_HEAP_LOAD_D(((ptr)|0), 8, 0)));
      default: abort('invalid type for setValue: ' + type);
    }
  }
  return null;
}
Module["getValue"] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module["ALLOC_NORMAL"] = ALLOC_NORMAL;
Module["ALLOC_STACK"] = ALLOC_STACK;
Module["ALLOC_STATIC"] = ALLOC_STATIC;
Module["ALLOC_DYNAMIC"] = ALLOC_DYNAMIC;
Module["ALLOC_NONE"] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : Runtime.staticAlloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module["allocate"] = allocate;

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return Runtime.staticAlloc(size);
  if (!runtimeInitialized) return Runtime.dynamicAlloc(size);
  return _malloc(size);
}
Module["getMemory"] = getMemory;

/** @type {function(number, number=)} */
function Pointer_stringify(ptr, length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = ((SAFE_HEAP_LOAD((((ptr)+(i))|0), 1, 1))|0);
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module["Pointer_stringify"] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = ((SAFE_HEAP_LOAD(((ptr++)|0), 1, 0))|0);
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module["AsciiToString"] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module["stringToAscii"] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;
function UTF8ArrayToString(u8Array, idx) {
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  while (u8Array[endPtr]) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var u0, u1, u2, u3, u4, u5;

    var str = '';
    while (1) {
      // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
      u0 = u8Array[idx++];
      if (!u0) return str;
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u3 = u8Array[idx++] & 63;
        if ((u0 & 0xF8) == 0xF0) {
          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
        } else {
          u4 = u8Array[idx++] & 63;
          if ((u0 & 0xFC) == 0xF8) {
            u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
          } else {
            u5 = u8Array[idx++] & 63;
            u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
          }
        }
      }
      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
}
Module["UTF8ArrayToString"] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}
Module["UTF8ToString"] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module["stringToUTF8Array"] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}
Module["stringToUTF8"] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module["lengthBytesUTF8"] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = ((SAFE_HEAP_LOAD((((ptr)+(i*2))|0), 2, 0))|0);
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    SAFE_HEAP_STORE(((outPtr)|0), ((codeUnit)|0), 2);
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  SAFE_HEAP_STORE(((outPtr)|0), ((0)|0), 2);
  return outPtr - startPtr;
}


// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}


function UTF32ToString(ptr) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = ((SAFE_HEAP_LOAD((((ptr)+(i*4))|0), 4, 0))|0);
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    SAFE_HEAP_STORE(((outPtr)|0), ((codeUnit)|0), 4);
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  SAFE_HEAP_STORE(((outPtr)|0), ((0)|0), 4);
  return outPtr - startPtr;
}


// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}


function demangle(func) {
  var __cxa_demangle_func = Module['___cxa_demangle'] || Module['__cxa_demangle'];
  if (__cxa_demangle_func) {
    try {
      var s =
        func.substr(1);
      var len = lengthBytesUTF8(s)+1;
      var buf = _malloc(len);
      stringToUTF8(s, buf, len);
      var status = _malloc(4);
      var ret = __cxa_demangle_func(buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed
    } catch(e) {
      // ignore problems here
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
    // failure when using libcxxabi, don't demangle
    return func;
  }
  Runtime.warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  return func;
}

function demangleAll(text) {
  var regex =
    /__Z[\w\d_]+/g;
  return text.replace(regex,
    function(x) {
      var y = demangle(x);
      return x === y ? x : (x + ' [' + y + ']');
    });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}
Module["stackTrace"] = stackTrace;

// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;
var MIN_TOTAL_MEMORY = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE, STATICTOP, staticSealed; // static area
var STACK_BASE, STACKTOP, STACK_MAX; // stack area
var DYNAMIC_BASE, DYNAMICTOP_PTR; // dynamic area handled by sbrk

  STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;
  staticSealed = false;


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  HEAPU32[(STACK_MAX >> 2)-1] = 0x02135467;
  HEAPU32[(STACK_MAX >> 2)-2] = 0x89BACDFE;
}

function checkStackCookie() {
  if (HEAPU32[(STACK_MAX >> 2)-1] != 0x02135467 || HEAPU32[(STACK_MAX >> 2)-2] != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x' + HEAPU32[(STACK_MAX >> 2)-2].toString(16) + ' ' + HEAPU32[(STACK_MAX >> 2)-1].toString(16));
  }
  // Also test the global address 0 for integrity. This check is not compatible with SAFE_SPLIT_MEMORY though, since that mode already tests all address 0 accesses on its own.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) throw 'Runtime error: The application has corrupted its heap memory area (address zero)!';
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - Module['asm'].stackSave() + allocSize) + ' bytes available!');
}

function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or (4) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}

if (!Module['reallocBuffer']) Module['reallocBuffer'] = function(size) {
  var ret;
  try {
    if (ArrayBuffer.transfer) {
      ret = ArrayBuffer.transfer(buffer, size);
    } else {
      var oldHEAP8 = HEAP8;
      ret = new ArrayBuffer(size);
      var temp = new Int8Array(ret);
      temp.set(oldHEAP8);
    }
  } catch(e) {
    return false;
  }
  var success = _emscripten_replace_memory(ret);
  if (!success) return false;
  return ret;
};

function enlargeMemory() {
  // TOTAL_MEMORY is the current size of the actual array, and DYNAMICTOP is the new top.
  assert(HEAP32[DYNAMICTOP_PTR>>2] > TOTAL_MEMORY); // This function should only ever be called after the ceiling of the dynamic heap has already been bumped to exceed the current total size of the asm.js heap.


  var PAGE_MULTIPLE = Module["usingWasm"] ? WASM_PAGE_SIZE : ASMJS_PAGE_SIZE; // In wasm, heap size must be a multiple of 64KB. In asm.js, they need to be multiples of 16MB.
  var LIMIT = 2147483648 - PAGE_MULTIPLE; // We can do one page short of 2GB as theoretical maximum.

  if (HEAP32[DYNAMICTOP_PTR>>2] > LIMIT) {
    Module.printErr('Cannot enlarge memory, asked to go up to ' + HEAP32[DYNAMICTOP_PTR>>2] + ' bytes, but the limit is ' + LIMIT + ' bytes!');
    return false;
  }

  var OLD_TOTAL_MEMORY = TOTAL_MEMORY;
  TOTAL_MEMORY = Math.max(TOTAL_MEMORY, MIN_TOTAL_MEMORY); // So the loop below will not be infinite, and minimum asm.js memory size is 16MB.

  while (TOTAL_MEMORY < HEAP32[DYNAMICTOP_PTR>>2]) { // Keep incrementing the heap size as long as it's less than what is requested.
    if (TOTAL_MEMORY <= 536870912) {
      TOTAL_MEMORY = alignUp(2 * TOTAL_MEMORY, PAGE_MULTIPLE); // Simple heuristic: double until 1GB...
    } else {
      TOTAL_MEMORY = Math.min(alignUp((3 * TOTAL_MEMORY + 2147483648) / 4, PAGE_MULTIPLE), LIMIT); // ..., but after that, add smaller increments towards 2GB, which we cannot reach
    }
  }

  var start = Date.now();

  var replacement = Module['reallocBuffer'](TOTAL_MEMORY);
  if (!replacement || replacement.byteLength != TOTAL_MEMORY) {
    Module.printErr('Failed to grow the heap from ' + OLD_TOTAL_MEMORY + ' bytes to ' + TOTAL_MEMORY + ' bytes, not enough memory!');
    if (replacement) {
      Module.printErr('Expected to get back a buffer of size ' + TOTAL_MEMORY + ' bytes, but instead got back a buffer of size ' + replacement.byteLength);
    }
    // restore the state to before this call, we failed
    TOTAL_MEMORY = OLD_TOTAL_MEMORY;
    return false;
  }

  // everything worked

  updateGlobalBuffer(replacement);
  updateGlobalBufferViews();

  Module.printErr('enlarged memory arrays from ' + OLD_TOTAL_MEMORY + ' to ' + TOTAL_MEMORY + ', took ' + (Date.now() - start) + ' ms (has ArrayBuffer.transfer? ' + (!!ArrayBuffer.transfer) + ')');

  if (!Module["usingWasm"]) {
    Module.printErr('Warning: Enlarging memory arrays, this is not fast! ' + [OLD_TOTAL_MEMORY, TOTAL_MEMORY]);
  }


  return true;
}

var byteLength;
try {
  byteLength = Function.prototype.call.bind(Object.getOwnPropertyDescriptor(ArrayBuffer.prototype, 'byteLength').get);
  byteLength(new ArrayBuffer(4)); // can fail on older ie
} catch(e) { // can fail on older node/v8
  byteLength = function(buffer) { return buffer.byteLength; };
}

var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
if (TOTAL_MEMORY < TOTAL_STACK) Module.printErr('TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
  assert(buffer.byteLength === TOTAL_MEMORY, 'provided buffer should be ' + TOTAL_MEMORY + ' bytes, but it is ' + buffer.byteLength);
} else {
  // Use a WebAssembly memory where available
  {
    buffer = new ArrayBuffer(TOTAL_MEMORY);
  }
  assert(buffer.byteLength === TOTAL_MEMORY);
}
updateGlobalBufferViews();


function getTotalMemory() {
  return TOTAL_MEMORY;
}

// Endianness check (note: assumes compiler arch was little-endian)
  HEAP32[0] = 0x63736d65; /* 'emsc' */
HEAP16[1] = 0x6373;
if (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  checkStackCookie();
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module["addOnPreRun"] = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module["addOnInit"] = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module["addOnPreMain"] = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module["addOnExit"] = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module["addOnPostRun"] = addOnPostRun;

// Tools

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
Module["intArrayFromString"] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module["intArrayToString"] = intArrayToString;

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated */
function writeStringToMemory(string, buffer, dontAddNull) {
  Runtime.warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}
Module["writeStringToMemory"] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}
Module["writeArrayToMemory"] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    SAFE_HEAP_STORE(((buffer++)|0), ((str.charCodeAt(i))|0), 1);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) SAFE_HEAP_STORE(((buffer)|0), ((0)|0), 1);
}
Module["writeAsciiToMemory"] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

if (!Math['trunc']) Math['trunc'] = function(x) {
  return x < 0 ? Math.ceil(x) : Math.floor(x);
};
Math.trunc = Math['trunc'];

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module["addRunDependency"] = addRunDependency;

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module["removeRunDependency"] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;



var /* show errors on likely calls to FS when it was not included */ FS = {
  error: function() {
    abort('Filesystem support (FS) was not included. The problem is that you are using files from JS, but files were not used from C/C++, so filesystem support was not auto-included. You can force-include filesystem support with  -s FORCE_FILESYSTEM=1');
  },
  init: function() { FS.error() },
  createDataFile: function() { FS.error() },
  createPreloadedFile: function() { FS.error() },
  createLazyFile: function() { FS.error() },
  open: function() { FS.error() },
  mkdev: function() { FS.error() },
  registerDevice: function() { FS.error() },
  analyzePath: function() { FS.error() },
  loadFilesFromDB: function() { FS.error() },

  ErrnoError: function ErrnoError() { FS.error() },
};
Module['FS_createDataFile'] = FS.createDataFile;
Module['FS_createPreloadedFile'] = FS.createPreloadedFile;



// === Body ===

var ASM_CONSTS = [];




STATIC_BASE = Runtime.GLOBAL_BASE;

STATICTOP = STATIC_BASE + 7328;
/* global initializers */  __ATINIT__.push();


memoryInitializer = "createGeometry.js.mem";





/* no memory initializer */
var tempDoublePtr = STATICTOP; STATICTOP += 16;

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


   

  function ___assert_fail(condition, filename, line, func) {
      ABORT = true;
      throw 'Assertion failed: ' + Pointer_stringify(condition) + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function'] + ' at ' + stackTrace();
    }

  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  
  
  var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var ptr in EXCEPTIONS.infos) {
          var info = EXCEPTIONS.infos[ptr];
          if (info.adjusted === adjusted) {
            return ptr;
          }
        }
        return adjusted;
      },addRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++;
      },decRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        // A rethrown exception can reach refcount 0; it must not be discarded
        // Its next handler will clear the rethrown flag and addRef it, prior to
        // final decRef and destruction here
        if (info.refcount === 0 && !info.rethrown) {
          if (info.destructor) {
            Module['dynCall_vi'](info.destructor, ptr);
          }
          delete EXCEPTIONS.infos[ptr];
          ___cxa_free_exception(ptr);
        }
      },clearRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0;
      }};
  function ___resumeException(ptr) {
      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
      throw ptr;
    }function ___cxa_find_matching_catch() {
      var thrown = EXCEPTIONS.last;
      if (!thrown) {
        // just pass through the null ptr
        return ((Runtime.setTempRet0(0),0)|0);
      }
      var info = EXCEPTIONS.infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        // just pass through the thrown ptr
        return ((Runtime.setTempRet0(0),thrown)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);
  
      var pointer = Module['___cxa_is_pointer_type'](throwntype);
      // can_catch receives a **, add indirection
      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
      SAFE_HEAP_STORE(((___cxa_find_matching_catch.buffer)|0), ((thrown)|0), 4);
      thrown = ___cxa_find_matching_catch.buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
          thrown = ((SAFE_HEAP_LOAD(((thrown)|0), 4, 0))|0); // undo indirection
          info.adjusted = thrown;
          return ((Runtime.setTempRet0(typeArray[i]),thrown)|0);
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = ((SAFE_HEAP_LOAD(((thrown)|0), 4, 0))|0); // undo indirection
      return ((Runtime.setTempRet0(throwntype),thrown)|0);
    }function ___cxa_throw(ptr, type, destructor) {
      EXCEPTIONS.infos[ptr] = {
        ptr: ptr,
        adjusted: ptr,
        type: type,
        destructor: destructor,
        refcount: 0,
        caught: false,
        rethrown: false
      };
      EXCEPTIONS.last = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr;
    }

   

   

  function _abort() {
      Module['abort']();
    }

  
  function ___cxa_free_exception(ptr) {
      try {
        return _free(ptr);
      } catch(e) { // XXX FIXME
        Module.printErr('exception during cxa_free_exception: ' + e);
      }
    }function ___cxa_end_catch() {
      // Clear state flag.
      Module['setThrew'](0);
      // Call destructor if one is registered then clear it.
      var ptr = EXCEPTIONS.caught.pop();
      if (ptr) {
        EXCEPTIONS.decRef(EXCEPTIONS.deAdjust(ptr));
        EXCEPTIONS.last = 0; // XXX in decRef?
      }
    }


  function _pthread_once(ptr, func) {
      if (!_pthread_once.seen) _pthread_once.seen = {};
      if (ptr in _pthread_once.seen) return;
      Module['dynCall_v'](func);
      _pthread_once.seen[ptr] = 1;
    }

  
  var PTHREAD_SPECIFIC={};function _pthread_getspecific(key) {
      return PTHREAD_SPECIFIC[key] || 0;
    }

   

  
  var PTHREAD_SPECIFIC_NEXT_KEY=1;
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};function _pthread_key_create(key, destructor) {
      if (key == 0) {
        return ERRNO_CODES.EINVAL;
      }
      SAFE_HEAP_STORE(((key)|0), ((PTHREAD_SPECIFIC_NEXT_KEY)|0), 4);
      // values start at 0
      PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY] = 0;
      PTHREAD_SPECIFIC_NEXT_KEY++;
      return 0;
    }

  function _pthread_setspecific(key, value) {
      if (!(key in PTHREAD_SPECIFIC)) {
        return ERRNO_CODES.EINVAL;
      }
      PTHREAD_SPECIFIC[key] = value;
      return 0;
    }

  function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }

  
  var SYSCALLS={varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = ((SAFE_HEAP_LOAD((((SYSCALLS.varargs)-(4))|0), 4, 0))|0);
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

   

  function ___cxa_find_matching_catch_2() {
          return ___cxa_find_matching_catch.apply(null, arguments);
        }

  function ___cxa_find_matching_catch_3() {
          return ___cxa_find_matching_catch.apply(null, arguments);
        }

  function ___cxa_begin_catch(ptr) {
      var info = EXCEPTIONS.infos[ptr];
      if (info && !info.caught) {
        info.caught = true;
        __ZSt18uncaught_exceptionv.uncaught_exception--;
      }
      if (info) info.rethrown = false;
      EXCEPTIONS.caught.push(ptr);
      EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));
      return ptr;
    }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  
  var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_STATIC);   

  
  function ___setErrNo(value) {
      if (Module['___errno_location']) SAFE_HEAP_STORE(((Module['___errno_location']())|0), ((value)|0), 4);
      else Module.printErr('failed to set errno from JS');
      return value;
    } 

  
  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        console.error('emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.');
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setTimeout() {
          var timeUntilNextTick = Math.max(0, Browser.mainLoop.tickStartTime + value - _emscripten_get_now())|0;
          setTimeout(Browser.mainLoop.runner, timeUntilNextTick); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_rAF() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      } else if (mode == 2 /*EM_TIMING_SETIMMEDIATE*/) {
        if (!window['setImmediate']) {
          // Emulate setImmediate. (note: not a complete polyfill, we don't emulate clearImmediate() to keep code size to minimum, since not needed)
          var setImmediates = [];
          var emscriptenMainLoopMessageId = 'setimmediate';
          function Browser_setImmediate_messageHandler(event) {
            if (event.source === window && event.data === emscriptenMainLoopMessageId) {
              event.stopPropagation();
              setImmediates.shift()();
            }
          }
          window.addEventListener("message", Browser_setImmediate_messageHandler, true);
          window['setImmediate'] = function Browser_emulated_setImmediate(func) {
            setImmediates.push(func);
            if (ENVIRONMENT_IS_WORKER) {
              if (Module['setImmediates'] === undefined) Module['setImmediates'] = [];
              Module['setImmediates'].push(func);
              window.postMessage({target: emscriptenMainLoopMessageId}); // In --proxy-to-worker, route the message via proxyClient.js
            } else window.postMessage(emscriptenMainLoopMessageId, "*"); // On the main thread, can just send the message to itself.
          }
        }
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setImmediate() {
          window['setImmediate'](Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'immediate';
      }
      return 0;
    }
  
  function _emscripten_get_now() { abort() }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var browserIterationFunc;
      if (typeof arg !== 'undefined') {
        browserIterationFunc = function() {
          Module['dynCall_vi'](func, arg);
        };
      } else {
        browserIterationFunc = function() {
          Module['dynCall_v'](func);
        };
      }
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          
          // catches pause/resume main loop from blocker execution
          if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
          
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        } else if (Browser.mainLoop.timingMode == 0/*EM_TIMING_SETTIMEOUT*/) {
          Browser.mainLoop.tickStartTime = _emscripten_get_now();
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(browserIterationFunc);
  
        checkStackCookie();
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
        Browser.mainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullscreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === Module['canvas'] ||
                                document['mozPointerLockElement'] === Module['canvas'] ||
                                document['webkitPointerLockElement'] === Module['canvas'] ||
                                document['msPointerLockElement'] === Module['canvas'];
        }
        var canvas = Module['canvas'];
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && Module['canvas'].requestPointerLock) {
                Module['canvas'].requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullscreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullscreen:function (lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;
  
        var canvas = Module['canvas'];
        function fullscreenChange() {
          Browser.isFullscreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['fullscreenElement'] || document['mozFullScreenElement'] ||
               document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.exitFullscreen = document['exitFullscreen'] ||
                                    document['cancelFullScreen'] ||
                                    document['mozCancelFullScreen'] ||
                                    document['msExitFullscreen'] ||
                                    document['webkitCancelFullScreen'] ||
                                    function() {};
            canvas.exitFullscreen = canvas.exitFullscreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullscreen = true;
            if (Browser.resizeCanvas) Browser.setFullscreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullscreen);
          if (Module['onFullscreen']) Module['onFullscreen'](Browser.isFullscreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullscreenHandlersInstalled) {
          Browser.fullscreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullscreenChange, false);
          document.addEventListener('mozfullscreenchange', fullscreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullscreenChange, false);
          document.addEventListener('MSFullscreenChange', fullscreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullscreen = canvasContainer['requestFullscreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullscreen'] ? function() { canvasContainer['webkitRequestFullscreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null) ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
  
        if (vrDevice) {
          canvasContainer.requestFullscreen({ vrDisplay: vrDevice });
        } else {
          canvasContainer.requestFullscreen();
        }
      },requestFullScreen:function (lockPointer, resizeCanvas, vrDevice) {
          Module.printErr('Browser.requestFullScreen() is deprecated. Please call Browser.requestFullscreen instead.');
          Browser.requestFullScreen = function(lockPointer, resizeCanvas, vrDevice) {
            return Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice);
          }
          return Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice);
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function () {
        Browser.allowAsyncCallbacks = false;
      },resumeAsyncCallbacks:function () { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func) {
            func();
          });
        }
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              var last = Browser.touches[touch.identifier];
              if (!last) last = coords;
              Browser.lastTouches[touch.identifier] = last;
              Browser.touches[touch.identifier] = coords;
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        var dep = !noRunDep ? getUniqueRunDependency('al ' + url) : '';
        Module['readAsync'](url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (dep) removeRunDependency(dep);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (dep) addRunDependency(dep);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullscreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = ((SAFE_HEAP_LOAD(((SDL.screen+Runtime.QUANTUM_SIZE*0)|0), 4, 1))|0);
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	SAFE_HEAP_STORE(((SDL.screen+Runtime.QUANTUM_SIZE*0)|0), ((flags)|0), 4)
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = ((SAFE_HEAP_LOAD(((SDL.screen+Runtime.QUANTUM_SIZE*0)|0), 4, 1))|0);
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	SAFE_HEAP_STORE(((SDL.screen+Runtime.QUANTUM_SIZE*0)|0), ((flags)|0), 4)
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['fullscreenElement'] || document['mozFullScreenElement'] ||
             document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};function _emscripten_worker_respond(data, size) {
      if (workerResponded) throw 'already responded with final response!';
      workerResponded = true;
      var transferObject = {
        'callbackId': workerCallbackId,
        'finalResponse': true,
        'data': data ? new Uint8Array(HEAPU8.subarray((data),(data + size))) : 0
      };
      if (data) {
        postMessage(transferObject, [transferObject.data.buffer]);
      } else {
        postMessage(transferObject);
      }
    }

  function ___gxx_personality_v0() {
    }

   

   


  function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      // NOTE: offset_high is unused - Emscripten's off_t is 32-bit
      var offset = offset_low;
      FS.llseek(stream, offset, whence);
      SAFE_HEAP_STORE(((result)|0), ((stream.position)|0), 4);
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      // hack to support printf in NO_FILESYSTEM
      var stream = SYSCALLS.get(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      var ret = 0;
      if (!___syscall146.buffer) {
        ___syscall146.buffers = [null, [], []]; // 1 => stdout, 2 => stderr
        ___syscall146.printChar = function(stream, curr) {
          var buffer = ___syscall146.buffers[stream];
          assert(buffer);
          if (curr === 0 || curr === 10) {
            (stream === 1 ? Module['print'] : Module['printErr'])(UTF8ArrayToString(buffer, 0));
            buffer.length = 0;
          } else {
            buffer.push(curr);
          }
        };
      }
      for (var i = 0; i < iovcnt; i++) {
        var ptr = ((SAFE_HEAP_LOAD((((iov)+(i*8))|0), 4, 0))|0);
        var len = ((SAFE_HEAP_LOAD((((iov)+(i*8 + 4))|0), 4, 0))|0);
        for (var j = 0; j < len; j++) {
          ___syscall146.printChar(stream, HEAPU8[ptr+j]);
        }
        ret += len;
      }
      return ret;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) { Module.printErr("Module.requestFullScreen is deprecated. Please call Module.requestFullscreen instead."); Module["requestFullScreen"] = Module["requestFullscreen"]; Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestFullscreen"] = function Module_requestFullscreen(lockPointer, resizeCanvas, vrDevice) { Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
  Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) { return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes) };
if (ENVIRONMENT_IS_NODE) {
    _emscripten_get_now = function _emscripten_get_now_actual() {
      var t = process['hrtime']();
      return t[0] * 1e3 + t[1] / 1e6;
    };
  } else if (typeof dateNow !== 'undefined') {
    _emscripten_get_now = dateNow;
  } else if (typeof self === 'object' && self['performance'] && typeof self['performance']['now'] === 'function') {
    _emscripten_get_now = function() { return self['performance']['now'](); };
  } else if (typeof performance === 'object' && typeof performance['now'] === 'function') {
    _emscripten_get_now = function() { return performance['now'](); };
  } else {
    _emscripten_get_now = Date.now;
  };
/* flush anything remaining in the buffer during shutdown */ __ATEXIT__.push(function() { var fflush = Module["_fflush"]; if (fflush) fflush(0); var printChar = ___syscall146.printChar; if (!printChar) return; var buffers = ___syscall146.buffers; if (buffers[1].length) printChar(1, 10); if (buffers[2].length) printChar(2, 10); });;
DYNAMICTOP_PTR = allocate(1, "i32", ALLOC_STATIC);

STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = Runtime.alignMemory(STACK_MAX);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;

staticSealed = true; // seal the static portion of memory

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");


var debug_table_iiii = ["0", "0", "___stdio_write", "___stdio_seek", "___stdout_write", "0", "0", "0", "0", "0", "__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv", "0", "0", "0", "0", "0"];
var debug_table_viiiii = ["0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib", "0", "0", "0", "__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "__ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_5ArrayIjLi3ELi1ELi0ELi3ELi1EEEEES5_NS0_9assign_opIjjEELi0EEC2ERS5_RKS5_RKS7_RS4_", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "__ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEES5_NS0_9assign_opIffEELi0EEC2ERS5_RKS5_RKS7_RS4_", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "__ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_13CwiseBinaryOpINS0_18scalar_quotient_opIffEEKNS_13MatrixWrapperIKNS6_INS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESE_EEEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKS4_EEEEEENS0_9assign_opIffEELi0EEC2ERS5_RKSQ_RKSS_RS4_", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "__ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_13MatrixWrapperIKNS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESC_EEEEEENS0_9assign_opIffEELi0EEC2ERS5_RKSG_RKSI_RS4_", "0", "0", "__ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS0_9assign_opIffEELi0EEC2ERS5_RKS8_RKSA_RS4_", "0", "0", "__ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS6_INS0_17scalar_product_opIffEEKS4_KNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEESB_EEEENS0_9assign_opIffEELi0EEC2ERS5_RKSK_RKSM_RS4_", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"];
var debug_table_dii = ["0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "__ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_12CwiseUnaryOpINS0_14scalar_abs2_opIfEEKNS_13MatrixWrapperIKNS_13CwiseBinaryOpIS3_KNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESC_EEEEEEEELi0ELi3EE3runERKSI_RKS3_", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"];
var debug_table_di = ["0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "__ZNK5flint8geometry6SphereILj3EfE9getRadiusEv", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"];
var debug_table_icxa_get_globals_fast", "0", "0"];
var debug_table_vi = ["0", "0", "0", "0", "0", "0", "__ZN10__cxxabiv116__shim_type_infoD2Ev", "__ZN10__cxxabiv117__class_type_infoD0Ev", "__ZNK10__cxxabiv116__shim_type_info5noop1Ev", "__ZNK10__cxxabiv116__shim_type_info5noop2Ev", "0", "0", "0", "0", "__ZN10__cxxabiv120__si_class_type_infoD0Ev", "0", "0", "0", "__ZNSt9bad_allocD2Ev", "__ZNSt9bad_allocD0Ev", "0", "__ZNSt11logic_errorD2Ev", "__ZNSt11logic_errorD0Ev", "0", "__ZNSt12length_errorD0Ev", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "__ZN5Eigen9ArrayBaseINS_5ArrayIjLi3ELi1ELi0ELi3ELi1EEEEC2Ev", "0", "0", "0", "0", "0", "__ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_5ArrayIjLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIjjEELi0EEELi1ELi2EE3runERS9_", "0", "0", "0", "0", "__ZN5Eigen9ArrayBaseINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEC2Ev", "0", "0", "0", "0", "0", "__ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi2EE3runERS9_", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "__ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_13CwiseBinaryOpINS0_18scalar_quotient_opIffEEKNS_13MatrixWrapperIKNS7_INS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESF_EEEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKS5_EEEEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSU_", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "__ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_13MatrixWrapperIKNS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESD_EEEEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSK_", "0", "0", "__ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSC_", "0", "0", "__ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS0_17scalar_product_opIffEEKS5_KNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEESC_EEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSO_", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv", "0", "0", "0"];
var debug_table_vii = ["0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "__ZNSt3__26vectorIN5Eigen5ArrayIfLi3ELi1ELi0ELi3ELi1EEENS_9allocatorIS3_EEE8allocateEj", "0", "0", "__ZNSt3__26vectorIN5Eigen5ArrayIjLi3ELi1ELi0ELi3ELi1EEENS_9allocatorIS3_EEE8allocateEj", "0", "__ZNSt3__26vectorIN5Eigen5ArrayIjLi3ELi1ELi0ELi3ELi1EEENS_9allocatorIS3_EEEC2ERKS6_", "__ZNSt3__26vectorIN5Eigen5ArrayIjLi3ELi1ELi0ELi3ELi1EEENS_9allocatorIS3_EEE7reserveEj", "__ZNSt3__26vectorIN5Eigen5ArrayIfLi3ELi1ELi0ELi3ELi1EEENS_9allocatorIS3_EEE7reserveEj", "0", "__ZN5Eigen5ArrayIfLi3ELi1ELi0ELi3ELi1EEC2ERKS1_", "__ZNSt3__26vectorIN5Eigen5ArrayIfLi3ELi1ELi0ELi3ELi1EEENS_9allocatorIS3_EEE21__push_back_slow_pathIRKS3_EEvOT_", "0", "__ZNK5Eigen9ArrayBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES7_EEE6matrixEv", "__ZNK5Eigen10MatrixBaseINS_13MatrixWrapperIKNS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES8_EEEEE10normalizedEv", "0", "__ZNSt3__26vectorIN5Eigen5ArrayIfLi3ELi1ELi0ELi3ELi1EEENS_9allocatorIS3_EEE21__push_back_slow_pathIS3_EEvOT_", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "__ZNSt3__26vectorIN5Eigen5ArrayIjLi3ELi1ELi0ELi3ELi1EEENS_9allocatorIS3_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE", "__ZNSt3__26vectorIN5Eigen5ArrayIfLi3ELi1ELi0ELi3ELi1EEENS_9allocatorIS3_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE", "__ZNSt3__26vectorIN5Eigen5ArrayIfLi3ELi1ELi0ELi3ELi1EEENS_9allocatorIS3_EEE18__construct_at_endEj", "__ZNSt11logic_errorC2EPKc", "0", "0", "0", "__ZN5Eigen12DenseStorageIjLi3ELi3ELi1ELi0EEC2ERKS1_", "0", "__ZN5Eigen8internal9evaluatorINS_5ArrayIjLi3ELi1ELi0ELi3ELi1EEEEC2ERKS3_", "0", "0", "0", "0", "__ZN5Eigen8internal19variable_if_dynamicIiLi0EEC2Ei", "0", "0", "0", "__ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EEC2ERKS1_", "0", "__ZN5Eigen8internal9evaluatorINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEC2ERKS3_", "0", "0", "0", "0", "0", "0", "0", "__ZN5Eigen8internal14scalar_abs2_opIfEC2ERKS2_", "0", "__ZN5Eigen8internal9evaluatorIKNS_13MatrixWrapperIKNS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES8_EEEEEC2ERSC_", "__ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES7_EEEC2ERKS8_", "0", "__ZN5Eigen8internal13scalar_sum_opIffEC2ERKS2_", "0", "__ZN5Eigen8internal9evaluatorIKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEC2ERS4_", "0", "0", "__ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC2ERKS3_", "0", "0", "0", "0", "__ZN5Eigen8internal18scalar_quotient_opIffEC2ERKS2_", "0", "0", "__ZN5Eigen8internal9evaluatorIKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC2ERS9_", "0", "__ZN5Eigen8internal18scalar_constant_opIfEC2ERKS2_", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "__ZN5Eigen8internal9evaluatorIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEEC2ERSE_", "0", "0", "__ZN5Eigen8internal17scalar_product_opIffEC2ERKS2_", "0", "0", "__ZN5Eigen8internal9evaluatorIKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEEEC2ERS9_", "0", "__ZNSt3__218__libcpp_refstringC2EPKc", "0", "0", "0", "_abort_message", "0"];
var debug_table_ii = ["0", "___stdio_close", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "__ZNKSt9bad_alloc4whatEv", "0", "0", "__ZNKSt11logic_error4whatEv", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "__ZNK5flint8geometry6SphereILj3EfE9getCenterEv", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "__ZNK5Eigen9EigenBaseINS_5ArrayIjLi3ELi1ELi0ELi3ELi1EEEE18const_cast_derivedEv", "0", "0", "__ZNK5Eigen15PlainObjectBaseINS_5ArrayIjLi3ELi1ELi0ELi3ELi1EEEE4dataEv", "0", "0", "0", "0", "0", "0", "0", "__ZNK5Eigen9EigenBaseINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEE18const_cast_derivedEv", "0", "0", "__ZNK5Eigen15PlainObjectBaseINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEE4dataEv", "0", "0", "__ZNK5Eigen12CwiseUnaryOpINS_8internal14scalar_abs2_opIfEEKNS_13MatrixWrapperIKNS_13CwiseBinaryOpINS1_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESA_EEEEE7functorEv", "0", "__ZNK5Eigen12CwiseUnaryOpINS_8internal14scalar_abs2_opIfEEKNS_13MatrixWrapperIKNS_13CwiseBinaryOpINS1_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESA_EEEEE16nestedExpressionEv", "0", "0", "__ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES6_E7functorEv", "0", "__ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES6_E3lhsEv", "0", "__ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES6_E3rhsEv", "0", "0", "__ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE18const_cast_derivedEv", "0", "0", "__ZNK5Eigen13CwiseBinaryOpINS_8internal18scalar_quotient_opIffEEKNS_13MatrixWrapperIKNS0_INS1_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES9_EEEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE7functorEv", "0", "__ZNK5Eigen13CwiseBinaryOpINS_8internal18scalar_quotient_opIffEEKNS_13MatrixWrapperIKNS0_INS1_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES9_EEEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE3lhsEv", "__ZNK5Eigen13CwiseBinaryOpINS_8internal18scalar_quotient_opIffEEKNS_13MatrixWrapperIKNS0_INS1_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES9_EEEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE3rhsEv", "0", "__ZNK5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7functorEv", "0", "__ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4dataEv", "0", "0", "0", "0", "0", "0", "0", "0", "0", "__ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS1_17scalar_product_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEES8_E7functorEv", "__ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS1_17scalar_product_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEES8_E3lhsEv", "0", "__ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS1_17scalar_product_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEES8_E3rhsEv", "__ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE7functorEv", "0", "__ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE3lhsEv", "__ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE3rhsEv", "0", "__ZNK5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEE7functorEv", "0", "0", "0", "0", "0", "0"];
var debug_table_viii = ["0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "__ZNK5Eigen9ArrayBaseINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEplIS2_EEKNS_13CwiseBinaryOpINS_8internal13scalar_sum_opIfNS6_6traitsIT_E6ScalarEEEKS2_KS9_EERKNS0_IS9_EE", "0", "0", "__ZN5Eigen5ArrayIfLi3ELi1ELi0ELi3ELi1EEC2INS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEERKNS_9EigenBaseIT_EENS_8internal9enable_ifIXsr8internal14is_convertibleINS6_6ScalarEfEE5valueENS1_11PrivateTypeEE4typeE", "0", "0", "__ZNSt3__26vectorIN5Eigen5ArrayIjLi3ELi1ELi0ELi3ELi1EEENS_9allocatorIS3_EEEC2ERKS6_RKS5_", "__ZNSt3__26vectorIN5Eigen5ArrayIfLi3ELi1ELi0ELi3ELi1EEENS_9allocatorIS3_EEEC2ERKS6_RKS5_", "__ZNSt3__26vectorIN5Eigen5ArrayIfLi3ELi1ELi0ELi3ELi1EEENS_9allocatorIS3_EEEC2EjRKS5_", "0", "__ZNK5Eigen9ArrayBaseINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEmlIfEENS_8internal9enable_ifILb1EKNS_13CwiseBinaryOpINS5_17scalar_product_opIfNS5_18promote_scalar_argIfT_Xsr5Eigen8internal14has_ReturnTypeINS_20ScalarBinaryOpTraitsIfSA_NS8_IfSA_EEEEEE5valueEE4typeEEEKS2_KNS5_19plain_constant_typeIS2_SF_E4typeEEEE4typeERKSA_", "0", "__ZNK5Eigen9ArrayBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEEplIS6_EEKNS1_INS2_13scalar_sum_opIfNS2_6traitsIT_E6ScalarEEEKSD_KSI_EERKNS0_ISI_EE", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "__ZN5Eigen8internal17resize_if_allowedINS_5ArrayIjLi3ELi1ELi0ELi3ELi1EEES3_jjEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "__ZN5Eigen8internal17resize_if_allowedINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "__ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_18scalar_quotient_opIffEEKNS_13MatrixWrapperIKNS4_INS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESC_EEEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKS3_EEEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "__ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13MatrixWrapperIKNS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESA_EEEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE", "0", "0", "__ZN5Eigen8internal17resize_if_allowedINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEENS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE", "0", "0", "__ZN5Eigen8internal17resize_if_allowedINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS0_17scalar_product_opIffEEKS3_KNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEES9_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"];
var debug_table_v = ["0", "0", "0", "0", "0", "__ZL25default_terminate_handlerv", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "__ZN5Eigen15PlainObjectBaseINS_5ArrayIjLi3ELi1ELi0ELi3ELi1EEEE22_check_template_paramsEv", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "__ZN5Eigen15PlainObjectBaseINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEE22_check_template_paramsEv", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev", "0", "0", "0", "___cxa_end_catch"];
var debug_table_viiiiii = ["0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib", "0", "0", "0", "__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib"];
var debug_table_iii = ["0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "__ZNK5Eigen15DenseCoeffsBaseINS_5ArrayIjLi3ELi1ELi0ELi3ELi1EEELi0EEixEi", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "__ZN5Eigen5ArrayIfLi3ELi1ELi0ELi3ELi1EEaSINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS3_INS4_17scalar_product_opIffEEKS1_KNS_14CwiseNullaryOpINS4_18scalar_constant_opIfEES9_EEEES9_EEEERS1_RKNS_9DenseBaseIT_EE", "0", "0", "0", "0", "0", "0", "0", "__ZN5Eigen15PlainObjectBaseINS_5ArrayIjLi3ELi1ELi0ELi3ELi1EEEE12_set_noaliasIS2_EERS2_RKNS_9DenseBaseIT_EE", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "__ZN5Eigen15PlainObjectBaseINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEE12_set_noaliasIS2_EERS2_RKNS_9DenseBaseIT_EE", "0", "0", "0", "0", "0", "0", "0", "0", "__ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_5ArrayIjLi3ELi1ELi0ELi3ELi1EEEEEE5coeffEi", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"];
var debug_table_viiii = ["0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi", "0", "0", "0", "__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi", "0", "0", "0", "0", "0", "0", "0", "__ZN5Eigen5ArrayIfLi3ELi1ELi0ELi3ELi1EEC2ERKfS3_S3_", "0", "__ZNSt3__26vectorIN5Eigen5ArrayIfLi3ELi1ELi0ELi3ELi1EEENS_9allocatorIS3_EEE18__construct_at_endIPKS3_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESB_SB_j", "__ZN5Eigen5ArrayIjLi3ELi1ELi0ELi3ELi1EEC2ERKjS3_S3_", "0", "__ZNSt3__26vectorIN5Eigen5ArrayIjLi3ELi1ELi0ELi3ELi1EEENS_9allocatorIS3_EEE18__construct_at_endIPKS3_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESB_SB_j", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "__ZNSt3__26vectorIN5Eigen5ArrayIjLi3ELi1ELi0ELi3ELi1EEENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJjjjEEEvDpOT_", "0", "0", "0", "0", "0", "0", "0", "0", "__ZNSt3__26vectorIN5Eigen5ArrayIfLi3ELi1ELi0ELi3ELi1EEENS_9allocatorIS3_EEE18__construct_at_endIPS3_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_j", "__ZNSt3__26vectorIN5Eigen5ArrayIjLi3ELi1ELi0ELi3ELi1EEENS_9allocatorIS3_EEE18__construct_at_endIPS3_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_j", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"];
function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  i: " + debug_table_i[x] + "  viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  dii: " + debug_table_dii[x] + "  vii: " + debug_table_vii[x] + "  di: " + debug_table_di[x] + "  vi: " + debug_table_vi[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  v: " + debug_table_v[x] + "  "); abort(x) }

function nullFunc_viiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  v: " + debug_table_v[x] + "  iiii: " + debug_table_iiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  dii: " + debug_table_dii[x] + "  di: " + debug_table_di[x] + "  i: " + debug_table_i[x] + "  "); abort(x) }

function nullFunc_dii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'dii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: di: " + debug_table_di[x] + "  ii: " + debug_table_ii[x] + "  vii: " + debug_table_vii[x] + "  iii: " + debug_table_iii[x] + "  i: " + debug_table_i[x] + "  vi: " + debug_table_vi[x] + "  iiii: " + debug_table_iiii[x] + "  viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  v: " + debug_table_v[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  "); abort(x) }

function nullFunc_di(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'di'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: dii: " + debug_table_dii[x] + "  i: " + debug_table_i[x] + "  vi: " + debug_table_vi[x] + "  ii: " + debug_table_ii[x] + "  vii: " + debug_table_vii[x] + "  iii: " + debug_table_iii[x] + "  v: " + debug_table_v[x] + "  iiii: " + debug_table_iiii[x] + "  viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  "); abort(x) }

function nullFunc_i(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'i'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: ii: " + debug_table_ii[x] + "  iii: " + debug_table_iii[x] + "  iiii: " + debug_table_iiii[x] + "  di: " + debug_table_di[x] + "  vi: " + debug_table_vi[x] + "  v: " + debug_table_v[x] + "  dii: " + debug_table_dii[x] + "  vii: " + debug_table_vii[x] + "  viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  "); abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: v: " + debug_table_v[x] + "  vii: " + debug_table_vii[x] + "  viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  i: " + debug_table_i[x] + "  di: " + debug_table_di[x] + "  ii: " + debug_table_ii[x] + "  dii: " + debug_table_dii[x] + "  iii: " + debug_table_iii[x] + "  iiii: " + debug_table_iiii[x] + "  "); abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: vi: " + debug_table_vi[x] + "  viii: " + debug_table_viii[x] + "  v: " + debug_table_v[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  ii: " + debug_table_ii[x] + "  dii: " + debug_table_dii[x] + "  iii: " + debug_table_iii[x] + "  i: " + debug_table_i[x] + "  di: " + debug_table_di[x] + "  iiii: " + debug_table_iiii[x] + "  "); abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: i: " + debug_table_i[x] + "  iii: " + debug_table_iii[x] + "  iiii: " + debug_table_iiii[x] + "  dii: " + debug_table_dii[x] + "  vii: " + debug_table_vii[x] + "  di: " + debug_table_di[x] + "  vi: " + debug_table_vi[x] + "  viii: " + debug_table_viii[x] + "  v: " + debug_table_v[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  "); abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiii: " + debug_table_viiii[x] + "  v: " + debug_table_v[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiii: " + debug_table_iiii[x] + "  dii: " + debug_table_dii[x] + "  di: " + debug_table_di[x] + "  i: " + debug_table_i[x] + "  "); abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: vi: " + debug_table_vi[x] + "  vii: " + debug_table_vii[x] + "  viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  i: " + debug_table_i[x] + "  di: " + debug_table_di[x] + "  ii: " + debug_table_ii[x] + "  dii: " + debug_table_dii[x] + "  iii: " + debug_table_iii[x] + "  iiii: " + debug_table_iiii[x] + "  "); abort(x) }

function nullFunc_viiiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  v: " + debug_table_v[x] + "  iiii: " + debug_table_iiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  dii: " + debug_table_dii[x] + "  di: " + debug_table_di[x] + "  i: " + debug_table_i[x] + "  "); abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: ii: " + debug_table_ii[x] + "  iiii: " + debug_table_iiii[x] + "  i: " + debug_table_i[x] + "  viii: " + debug_table_viii[x] + "  dii: " + debug_table_dii[x] + "  vii: " + debug_table_vii[x] + "  di: " + debug_table_di[x] + "  vi: " + debug_table_vi[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  v: " + debug_table_v[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  "); abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: viii: " + debug_table_viii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  v: " + debug_table_v[x] + "  iiii: " + debug_table_iiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  dii: " + debug_table_dii[x] + "  di: " + debug_table_di[x] + "  i: " + debug_table_i[x] + "  "); abort(x) }

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_dii(index,a1,a2) {
  try {
    return Module["dynCall_dii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_di(index,a1) {
  try {
    return Module["dynCall_di"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_i(index) {
  try {
    return Module["dynCall_i"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity, "byteLength": byteLength };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "enlargeMemory": enlargeMemory, "getTotalMemory": getTotalMemory, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "abortStackOverflow": abortStackOverflow, "segfault": segfault, "alignfault": alignfault, "ftfault": ftfault, "nullFunc_iiii": nullFunc_iiii, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_dii": nullFunc_dii, "nullFunc_di": nullFunc_di, "nullFunc_i": nullFunc_i, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_ii": nullFunc_ii, "nullFunc_viii": nullFunc_viii, "nullFunc_v": nullFunc_v, "nullFunc_viiiiii": nullFunc_viiiiii, "nullFunc_iii": nullFunc_iii, "nullFunc_viiii": nullFunc_viiii, "invoke_iiii": invoke_iiii, "invoke_viiiii": invoke_viiiii, "invoke_dii": invoke_dii, "invoke_di": invoke_di, "invoke_i": invoke_i, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_ii": invoke_ii, "invoke_viii": invoke_viii, "invoke_v": invoke_v, "invoke_viiiiii": invoke_viiiiii, "invoke_iii": invoke_iii, "invoke_viiii": invoke_viiii, "_pthread_key_create": _pthread_key_create, "_abort": _abort, "_emscripten_worker_respond": _emscripten_worker_respond, "___gxx_personality_v0": ___gxx_personality_v0, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "___assert_fail": ___assert_fail, "___cxa_free_exception": ___cxa_free_exception, "___cxa_find_matching_catch_2": ___cxa_find_matching_catch_2, "___cxa_find_matching_catch_3": ___cxa_find_matching_catch_3, "___setErrNo": ___setErrNo, "___cxa_begin_catch": ___cxa_begin_catch, "_emscripten_memcpy_big": _emscripten_memcpy_big, "___cxa_end_catch": ___cxa_end_catch, "___resumeException": ___resumeException, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "_pthread_getspecific": _pthread_getspecific, "_pthread_once": _pthread_once, "___syscall54": ___syscall54, "_emscripten_set_main_loop": _emscripten_set_main_loop, "_emscripten_get_now": _emscripten_get_now, "_pthread_setspecific": _pthread_setspecific, "___cxa_throw": ___cxa_throw, "___syscall6": ___syscall6, "___cxa_allocate_exception": ___cxa_allocate_exception, "___syscall140": ___syscall140, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "___syscall146": ___syscall146, "DYNAMICTOP_PTR": DYNAMICTOP_PTR, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "cttz_i8": cttz_i8 };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
'almost asm';


  var Int8View = global.Int8Array;
  var HEAP8 = new Int8View(buffer);
  var Int16View = global.Int16Array;
  var HEAP16 = new Int16View(buffer);
  var Int32View = global.Int32Array;
  var HEAP32 = new Int32View(buffer);
  var Uint8View = global.Uint8Array;
  var HEAPU8 = new Uint8View(buffer);
  var Uint16View = global.Uint16Array;
  var HEAPU16 = new Uint16View(buffer);
  var Uint32View = global.Uint32Array;
  var HEAPU32 = new Uint32View(buffer);
  var Float32View = global.Float32Array;
  var HEAPF32 = new Float32View(buffer);
  var Float64View = global.Float64Array;
  var HEAPF64 = new Float64View(buffer);
  var byteLength = global.byteLength;

  var DYNAMICTOP_PTR=env.DYNAMICTOP_PTR|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var cttz_i8=env.cttz_i8|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntS = 0, tempValue = 0, tempDouble = 0.0;
  var tempRet0 = 0;

  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_max=global.Math.max;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var enlargeMemory=env.enlargeMemory;
  var getTotalMemory=env.getTotalMemory;
  var abortOnCannotGrowMemory=env.abortOnCannotGrowMemory;
  var abortStackOverflow=env.abortStackOverflow;
  var segfault=env.segfault;
  var alignfault=env.alignfault;
  var ftfault=env.ftfault;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_viiiii=env.nullFunc_viiiii;
  var nullFunc_dii=env.nullFunc_dii;
  var nullFunc_di=env.nullFunc_di;
  var nullFunc_i=env.nullFunc_i;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_viiiiii=env.nullFunc_viiiiii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_viiii=env.nullFunc_viiii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_dii=env.invoke_dii;
  var invoke_di=env.invoke_di;
  var invoke_i=env.invoke_i;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_ii=env.invoke_ii;
  var invoke_viii=env.invoke_viii;
  var invoke_v=env.invoke_v;
  var invoke_viiiiii=env.invoke_viiiiii;
  var invoke_iii=env.invoke_iii;
  var invoke_viiii=env.invoke_viiii;
  var _pthread_key_create=env._pthread_key_create;
  var _abort=env._abort;
  var _emscripten_worker_respond=env._emscripten_worker_respond;
  var ___gxx_personality_v0=env.___gxx_personality_v0;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var ___assert_fail=env.___assert_fail;
  var ___cxa_free_exception=env.___cxa_free_exception;
  var ___cxa_find_matching_catch_2=env.___cxa_find_matching_catch_2;
  var ___cxa_find_matching_catch_3=env.___cxa_find_matching_catch_3;
  var ___setErrNo=env.___setErrNo;
  var ___cxa_begin_catch=env.___cxa_begin_catch;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var ___cxa_end_catch=env.___cxa_end_catch;
  var ___resumeException=env.___resumeException;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var _pthread_getspecific=env._pthread_getspecific;
  var _pthread_once=env._pthread_once;
  var ___syscall54=env.___syscall54;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var _emscripten_get_now=env._emscripten_get_now;
  var _pthread_setspecific=env._pthread_setspecific;
  var ___cxa_throw=env.___cxa_throw;
  var ___syscall6=env.___syscall6;
  var ___cxa_allocate_exception=env.___cxa_allocate_exception;
  var ___syscall140=env.___syscall140;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var ___syscall146=env.___syscall146;
  var tempFloat = 0.0;

function _emscripten_replace_memory(newBuffer) {
  if ((byteLength(newBuffer) & 0xffffff || byteLength(newBuffer) <= 0xffffff) || byteLength(newBuffer) > 0x80000000) return false;
  HEAP8 = new Int8View(newBuffer);
  HEAP16 = new Int16View(newBuffer);
  HEAP32 = new Int32View(newBuffer);
  HEAPU8 = new Uint8View(newBuffer);
  HEAPU16 = new Uint16View(newBuffer);
  HEAPU32 = new Uint32View(newBuffer);
  HEAPF32 = new Float32View(newBuffer);
  HEAPF64 = new Float64View(newBuffer);
  buffer = newBuffer;
  return true;
}

// EMSCRIPTEN_START_FUNCS

function __ZN5flint8geometry12SphereBufferILj3EfE6CreateEPNS2_10CreateArgsE($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $$byval_copy5 = 0, $$byval_copy6 = 0, $$byval_copy7 = 0, $$byval_copy8 = 0, $$byval_copy9 = 0, $$sink1 = 0, $$sink2 = 0, $$sink3 = 0, $$sink4 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0;
 var $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0;
 var $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0;
 var $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0;
 var $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0;
 var $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0;
 var $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0;
 var $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0;
 var $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0;
 var $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0;
 var $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0;
 var $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0;
 var $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0;
 var $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0;
 var $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0;
 var $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0;
 var $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0;
 var $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0;
 var $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0;
 var $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0;
 var $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0;
 var $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0;
 var $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0, $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0;
 var $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0, $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0;
 var $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0, $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0;
 var $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0, $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0;
 var $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0, $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0;
 var $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0, $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0;
 var $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0, $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0;
 var $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0, $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0;
 var $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0, $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0;
 var $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0, $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0;
 var $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0, $1574 = 0, $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0;
 var $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0, $1592 = 0, $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0;
 var $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0, $161 = 0, $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0;
 var $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0, $1628 = 0, $1629 = 0, $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0;
 var $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0, $1646 = 0, $1647 = 0, $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0;
 var $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0, $1664 = 0, $1665 = 0, $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0;
 var $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0, $1682 = 0, $1683 = 0, $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0;
 var $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0, $170 = 0, $1700 = 0, $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0;
 var $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0, $1718 = 0, $1719 = 0, $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0, $1726 = 0, $1727 = 0;
 var $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0.0, $1735 = 0, $1736 = 0, $1737 = 0, $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0, $1744 = 0, $1745 = 0;
 var $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0, $1753 = 0, $1754 = 0, $1755 = 0, $1756 = 0, $1757 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
 var $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0;
 var $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0;
 var $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0;
 var $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0;
 var $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0;
 var $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0;
 var $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0;
 var $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0;
 var $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0;
 var $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0;
 var $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0;
 var $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0;
 var $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0;
 var $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0;
 var $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0;
 var $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0;
 var $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0;
 var $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0;
 var $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0;
 var $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0;
 var $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0;
 var $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0;
 var $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0;
 var $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0;
 var $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0;
 var $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0;
 var $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0;
 var $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0;
 var $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0;
 var $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0;
 var $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0;
 var $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0;
 var $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0;
 var $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0;
 var $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0;
 var $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0;
 var $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0;
 var $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0;
 var $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0;
 var $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0;
 var $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0;
 var $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0;
 var $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0;
 var $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0;
 var $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0;
 var $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 3344 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(3344 | 0);
 $$byval_copy9 = sp + 3332 | 0;
 $$byval_copy8 = sp + 3331 | 0;
 $$byval_copy7 = sp + 3330 | 0;
 $$byval_copy6 = sp + 3329 | 0;
 $$byval_copy5 = sp + 3328 | 0;
 $$byval_copy = sp + 3327 | 0;
 $3 = sp + 3326 | 0;
 $9 = sp + 3325 | 0;
 $14 = sp + 3324 | 0;
 $47 = sp + 104 | 0;
 $54 = sp + 3323 | 0;
 $69 = sp + 3322 | 0;
 $95 = sp + 96 | 0;
 $102 = sp + 3321 | 0;
 $117 = sp + 3320 | 0;
 $143 = sp + 88 | 0;
 $150 = sp + 3319 | 0;
 $165 = sp + 3318 | 0;
 $191 = sp + 80 | 0;
 $198 = sp + 3317 | 0;
 $213 = sp + 3316 | 0;
 $227 = sp + 72 | 0;
 $232 = sp + 3315 | 0;
 $243 = sp + 3314 | 0;
 $264 = sp + 64 | 0;
 $269 = sp + 3313 | 0;
 $280 = sp + 3312 | 0;
 $298 = sp + 56 | 0;
 $303 = sp + 3311 | 0;
 $314 = sp + 3310 | 0;
 $331 = sp + 48 | 0;
 $336 = sp + 3309 | 0;
 $346 = sp + 3308 | 0;
 $361 = sp + 40 | 0;
 $366 = sp + 3307 | 0;
 $376 = sp + 3306 | 0;
 $391 = sp + 32 | 0;
 $396 = sp + 3305 | 0;
 $406 = sp + 3304 | 0;
 $421 = sp + 1744 | 0;
 $424 = sp + 1732 | 0;
 $428 = sp + 1716 | 0;
 $431 = sp + 1704 | 0;
 $461 = sp + 24 | 0;
 $464 = sp + 3303 | 0;
 $501 = sp + 16 | 0;
 $504 = sp + 3302 | 0;
 $518 = sp + 1372 | 0;
 $521 = sp + 1360 | 0;
 $528 = sp + 1332 | 0;
 $531 = sp + 1320 | 0;
 $543 = sp + 1272 | 0;
 $546 = sp + 1260 | 0;
 $552 = sp + 8 | 0;
 $561 = sp + 1204 | 0;
 $564 = sp + 1192 | 0;
 $570 = sp;
 $572 = sp + 1160 | 0;
 $573 = sp + 1016 | 0;
 $574 = sp + 1012 | 0;
 $577 = sp + 1e3 | 0;
 $578 = sp + 996 | 0;
 $579 = sp + 992 | 0;
 $580 = sp + 988 | 0;
 $581 = sp + 984 | 0;
 $582 = sp + 980 | 0;
 $583 = sp + 976 | 0;
 $584 = sp + 972 | 0;
 $585 = sp + 968 | 0;
 $586 = sp + 964 | 0;
 $587 = sp + 960 | 0;
 $588 = sp + 952 | 0;
 $589 = sp + 712 | 0;
 $590 = sp + 704 | 0;
 $591 = sp + 700 | 0;
 $592 = sp + 696 | 0;
 $593 = sp + 692 | 0;
 $594 = sp + 688 | 0;
 $595 = sp + 684 | 0;
 $596 = sp + 680 | 0;
 $597 = sp + 676 | 0;
 $598 = sp + 672 | 0;
 $599 = sp + 668 | 0;
 $600 = sp + 664 | 0;
 $601 = sp + 660 | 0;
 $602 = sp + 656 | 0;
 $603 = sp + 652 | 0;
 $604 = sp + 648 | 0;
 $605 = sp + 644 | 0;
 $606 = sp + 640 | 0;
 $607 = sp + 636 | 0;
 $608 = sp + 632 | 0;
 $609 = sp + 628 | 0;
 $610 = sp + 624 | 0;
 $611 = sp + 620 | 0;
 $612 = sp + 616 | 0;
 $613 = sp + 612 | 0;
 $614 = sp + 608 | 0;
 $615 = sp + 604 | 0;
 $616 = sp + 600 | 0;
 $617 = sp + 596 | 0;
 $618 = sp + 592 | 0;
 $619 = sp + 588 | 0;
 $620 = sp + 584 | 0;
 $621 = sp + 580 | 0;
 $622 = sp + 576 | 0;
 $623 = sp + 572 | 0;
 $624 = sp + 568 | 0;
 $625 = sp + 564 | 0;
 $626 = sp + 560 | 0;
 $627 = sp + 556 | 0;
 $628 = sp + 552 | 0;
 $629 = sp + 548 | 0;
 $630 = sp + 544 | 0;
 $631 = sp + 540 | 0;
 $632 = sp + 536 | 0;
 $633 = sp + 532 | 0;
 $634 = sp + 528 | 0;
 $635 = sp + 524 | 0;
 $636 = sp + 520 | 0;
 $637 = sp + 516 | 0;
 $638 = sp + 512 | 0;
 $639 = sp + 508 | 0;
 $640 = sp + 504 | 0;
 $641 = sp + 500 | 0;
 $642 = sp + 496 | 0;
 $643 = sp + 492 | 0;
 $644 = sp + 488 | 0;
 $645 = sp + 484 | 0;
 $646 = sp + 480 | 0;
 $647 = sp + 476 | 0;
 $648 = sp + 472 | 0;
 $649 = sp + 468 | 0;
 $650 = sp + 456 | 0;
 $651 = sp + 444 | 0;
 $652 = sp + 432 | 0;
 $653 = sp + 420 | 0;
 $656 = sp + 408 | 0;
 $657 = sp + 404 | 0;
 $660 = sp + 384 | 0;
 $661 = sp + 372 | 0;
 $662 = sp + 360 | 0;
 $663 = sp + 348 | 0;
 $664 = sp + 3301 | 0;
 $665 = sp + 336 | 0;
 $666 = sp + 324 | 0;
 $667 = sp + 312 | 0;
 $668 = sp + 300 | 0;
 $669 = sp + 3300 | 0;
 $670 = sp + 288 | 0;
 $671 = sp + 276 | 0;
 $672 = sp + 264 | 0;
 $673 = sp + 252 | 0;
 $674 = sp + 3299 | 0;
 $675 = sp + 248 | 0;
 $676 = sp + 244 | 0;
 $677 = sp + 240 | 0;
 $678 = sp + 236 | 0;
 $679 = sp + 232 | 0;
 $680 = sp + 228 | 0;
 $681 = sp + 224 | 0;
 $682 = sp + 220 | 0;
 $683 = sp + 216 | 0;
 $684 = sp + 212 | 0;
 $685 = sp + 208 | 0;
 $686 = sp + 204 | 0;
 $688 = sp + 188 | 0;
 $689 = sp + 3298 | 0;
 $690 = sp + 176 | 0;
 $691 = sp + 3297 | 0;
 $692 = sp + 164 | 0;
 $693 = sp + 3296 | 0;
 $695 = sp + 132 | 0;
 $696 = sp + 128 | 0;
 $697 = sp + 112 | 0;
 $571 = $0;
 $698 = SAFE_HEAP_LOAD(5664 | 0, 1, 0) | 0 | 0;
 $699 = $698 << 24 >> 24 == 0;
 L1 : do {
  if ($699) {
   $700 = ___cxa_guard_acquire(5664) | 0;
   $701 = ($700 | 0) != 0;
   if ($701) {
    SAFE_HEAP_STORE_D($574 | 0, +(-.525731086730957), 4);
    __THREW__ = 0;
    invoke_viiii(25, $573 | 0, $574 | 0, 5680 | 0, 160 | 0);
    $702 = __THREW__;
    __THREW__ = 0;
    $703 = $702 & 1;
    L4 : do {
     if ($703) {
      label = 119;
     } else {
      $704 = $573 + 12 | 0;
      __THREW__ = 0;
      invoke_viiii(25, $704 | 0, 156 | 0, 5680 | 0, 160 | 0);
      $705 = __THREW__;
      __THREW__ = 0;
      $706 = $705 & 1;
      if ($706) {
       label = 119;
      } else {
       $707 = $704 + 12 | 0;
       SAFE_HEAP_STORE_D($577 | 0, +(-.525731086730957), 4);
       SAFE_HEAP_STORE_D($578 | 0, +(-.8506507873535156), 4);
       __THREW__ = 0;
       invoke_viiii(25, $707 | 0, $577 | 0, 5680 | 0, $578 | 0);
       $708 = __THREW__;
       __THREW__ = 0;
       $709 = $708 & 1;
       if ($709) {
        label = 119;
       } else {
        $710 = $707 + 12 | 0;
        SAFE_HEAP_STORE_D($579 | 0, +(-.8506507873535156), 4);
        __THREW__ = 0;
        invoke_viiii(25, $710 | 0, 156 | 0, 5680 | 0, $579 | 0);
        $711 = __THREW__;
        __THREW__ = 0;
        $712 = $711 & 1;
        if ($712) {
         label = 119;
        } else {
         $713 = $710 + 12 | 0;
         __THREW__ = 0;
         invoke_viiii(25, $713 | 0, 5680 | 0, 160 | 0, 156 | 0);
         $714 = __THREW__;
         __THREW__ = 0;
         $715 = $714 & 1;
         if ($715) {
          label = 119;
         } else {
          $716 = $713 + 12 | 0;
          SAFE_HEAP_STORE_D($580 | 0, +(-.525731086730957), 4);
          __THREW__ = 0;
          invoke_viiii(25, $716 | 0, 5680 | 0, 160 | 0, $580 | 0);
          $717 = __THREW__;
          __THREW__ = 0;
          $718 = $717 & 1;
          if ($718) {
           label = 119;
          } else {
           $719 = $716 + 12 | 0;
           SAFE_HEAP_STORE_D($581 | 0, +(-.8506507873535156), 4);
           __THREW__ = 0;
           invoke_viiii(25, $719 | 0, 5680 | 0, $581 | 0, 156 | 0);
           $720 = __THREW__;
           __THREW__ = 0;
           $721 = $720 & 1;
           if ($721) {
            label = 119;
           } else {
            $722 = $719 + 12 | 0;
            SAFE_HEAP_STORE_D($582 | 0, +(-.8506507873535156), 4);
            SAFE_HEAP_STORE_D($583 | 0, +(-.525731086730957), 4);
            __THREW__ = 0;
            invoke_viiii(25, $722 | 0, 5680 | 0, $582 | 0, $583 | 0);
            $723 = __THREW__;
            __THREW__ = 0;
            $724 = $723 & 1;
            if ($724) {
             label = 119;
            } else {
             $725 = $722 + 12 | 0;
             __THREW__ = 0;
             invoke_viiii(25, $725 | 0, 160 | 0, 156 | 0, 5680 | 0);
             $726 = __THREW__;
             __THREW__ = 0;
             $727 = $726 & 1;
             if ($727) {
              label = 119;
             } else {
              $728 = $725 + 12 | 0;
              SAFE_HEAP_STORE_D($584 | 0, +(-.8506507873535156), 4);
              __THREW__ = 0;
              invoke_viiii(25, $728 | 0, $584 | 0, 156 | 0, 5680 | 0);
              $729 = __THREW__;
              __THREW__ = 0;
              $730 = $729 & 1;
              if ($730) {
               label = 119;
              } else {
               $731 = $728 + 12 | 0;
               SAFE_HEAP_STORE_D($585 | 0, +(-.525731086730957), 4);
               __THREW__ = 0;
               invoke_viiii(25, $731 | 0, 160 | 0, $585 | 0, 5680 | 0);
               $732 = __THREW__;
               __THREW__ = 0;
               $733 = $732 & 1;
               if ($733) {
                label = 119;
               } else {
                $734 = $731 + 12 | 0;
                SAFE_HEAP_STORE_D($586 | 0, +(-.8506507873535156), 4);
                SAFE_HEAP_STORE_D($587 | 0, +(-.525731086730957), 4);
                __THREW__ = 0;
                invoke_viiii(25, $734 | 0, $586 | 0, $587 | 0, 5680 | 0);
                $735 = __THREW__;
                __THREW__ = 0;
                $736 = $735 & 1;
                if ($736) {
                 label = 119;
                } else {
                 SAFE_HEAP_STORE($572 | 0, $573 | 0, 4);
                 $737 = $572 + 4 | 0;
                 SAFE_HEAP_STORE($737 | 0, 12 | 0, 4);
                 {}
                 SAFE_HEAP_STORE($570 >> 0 | 0, SAFE_HEAP_LOAD($572 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
                 SAFE_HEAP_STORE($570 + 1 >> 0 | 0, SAFE_HEAP_LOAD($572 + 1 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
                 SAFE_HEAP_STORE($570 + 2 >> 0 | 0, SAFE_HEAP_LOAD($572 + 2 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
                 SAFE_HEAP_STORE($570 + 3 >> 0 | 0, SAFE_HEAP_LOAD($572 + 3 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
                 SAFE_HEAP_STORE($570 + 4 >> 0 | 0, SAFE_HEAP_LOAD($572 + 4 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
                 SAFE_HEAP_STORE($570 + 5 >> 0 | 0, SAFE_HEAP_LOAD($572 + 5 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
                 SAFE_HEAP_STORE($570 + 6 >> 0 | 0, SAFE_HEAP_LOAD($572 + 6 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
                 SAFE_HEAP_STORE($570 + 7 >> 0 | 0, SAFE_HEAP_LOAD($572 + 7 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
                 $567 = 5684;
                 $738 = $567;
                 $566 = $738;
                 $739 = $566;
                 $565 = $739;
                 SAFE_HEAP_STORE($739 | 0, 0 | 0, 4);
                 $740 = $739 + 4 | 0;
                 SAFE_HEAP_STORE($740 | 0, 0 | 0, 4);
                 $741 = $739 + 8 | 0;
                 $563 = $741;
                 SAFE_HEAP_STORE($564 | 0, 0 | 0, 4);
                 $742 = $563;
                 $562 = $564;
                 $743 = $562;
                 $744 = SAFE_HEAP_LOAD($743 | 0, 4, 0) | 0 | 0;
                 $560 = $742;
                 SAFE_HEAP_STORE($561 | 0, $744 | 0, 4);
                 $745 = $560;
                 $559 = $745;
                 $558 = $561;
                 $746 = $558;
                 $747 = SAFE_HEAP_LOAD($746 | 0, 4, 0) | 0 | 0;
                 SAFE_HEAP_STORE($745 | 0, $747 | 0, 4);
                 $557 = $570;
                 $748 = $557;
                 $749 = $748 + 4 | 0;
                 $750 = SAFE_HEAP_LOAD($749 | 0, 4, 0) | 0 | 0;
                 $751 = $750 >>> 0 > 0;
                 do {
                  if ($751) {
                   $556 = $570;
                   $752 = $556;
                   $753 = $752 + 4 | 0;
                   $754 = SAFE_HEAP_LOAD($753 | 0, 4, 0) | 0 | 0;
                   __THREW__ = 0;
                   invoke_vii(26, $738 | 0, $754 | 0);
                   $755 = __THREW__;
                   __THREW__ = 0;
                   $756 = $755 & 1;
                   if (!$756) {
                    $553 = $570;
                    $757 = $553;
                    $758 = SAFE_HEAP_LOAD($757 | 0, 4, 0) | 0 | 0;
                    $554 = $570;
                    $759 = $554;
                    $760 = SAFE_HEAP_LOAD($759 | 0, 4, 0) | 0 | 0;
                    $761 = $759 + 4 | 0;
                    $762 = SAFE_HEAP_LOAD($761 | 0, 4, 0) | 0 | 0;
                    $763 = $760 + ($762 * 12 | 0) | 0;
                    $555 = $570;
                    $764 = $555;
                    $765 = $764 + 4 | 0;
                    $766 = SAFE_HEAP_LOAD($765 | 0, 4, 0) | 0 | 0;
                    __THREW__ = 0;
                    invoke_viiii(27, $738 | 0, $758 | 0, $763 | 0, $766 | 0);
                    $767 = __THREW__;
                    __THREW__ = 0;
                    $768 = $767 & 1;
                    if (!$768) {
                     break;
                    }
                   }
                   $769 = ___cxa_find_matching_catch_2() | 0;
                   $770 = tempRet0;
                   $568 = $769;
                   $569 = $770;
                   __ZNSt3__213__vector_baseIN5Eigen5ArrayIfLi3ELi1ELi0ELi3ELi1EEENS_9allocatorIS3_EEED2Ev($738);
                   $771 = $568;
                   $772 = $569;
                   $$sink1 = $772;
                   $$sink2 = $771;
                   break L4;
                  }
                 } while (0);
                 break L1;
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    } while (0);
    if ((label | 0) == 119) {
     $1670 = ___cxa_find_matching_catch_2() | 0;
     $1671 = tempRet0;
     $$sink1 = $1671;
     $$sink2 = $1670;
    }
    $575 = $$sink2;
    $576 = $$sink1;
    $1756 = $575;
    $1757 = $576;
    ___resumeException($1756 | 0);
   }
  }
 } while (0);
 $773 = SAFE_HEAP_LOAD(5672 | 0, 1, 0) | 0 | 0;
 $774 = $773 << 24 >> 24 == 0;
 L28 : do {
  if ($774) {
   $775 = ___cxa_guard_acquire(5672) | 0;
   $776 = ($775 | 0) != 0;
   if ($776) {
    SAFE_HEAP_STORE($590 | 0, 0 | 0, 4);
    SAFE_HEAP_STORE($591 | 0, 4 | 0, 4);
    SAFE_HEAP_STORE($592 | 0, 1 | 0, 4);
    __THREW__ = 0;
    invoke_viiii(28, $589 | 0, $590 | 0, $591 | 0, $592 | 0);
    $777 = __THREW__;
    __THREW__ = 0;
    $778 = $777 & 1;
    L31 : do {
     if ($778) {
      label = 121;
     } else {
      $779 = $589 + 12 | 0;
      SAFE_HEAP_STORE($593 | 0, 0 | 0, 4);
      SAFE_HEAP_STORE($594 | 0, 9 | 0, 4);
      SAFE_HEAP_STORE($595 | 0, 4 | 0, 4);
      __THREW__ = 0;
      invoke_viiii(28, $779 | 0, $593 | 0, $594 | 0, $595 | 0);
      $780 = __THREW__;
      __THREW__ = 0;
      $781 = $780 & 1;
      if ($781) {
       label = 121;
      } else {
       $782 = $779 + 12 | 0;
       SAFE_HEAP_STORE($596 | 0, 9 | 0, 4);
       SAFE_HEAP_STORE($597 | 0, 5 | 0, 4);
       SAFE_HEAP_STORE($598 | 0, 4 | 0, 4);
       __THREW__ = 0;
       invoke_viiii(28, $782 | 0, $596 | 0, $597 | 0, $598 | 0);
       $783 = __THREW__;
       __THREW__ = 0;
       $784 = $783 & 1;
       if ($784) {
        label = 121;
       } else {
        $785 = $782 + 12 | 0;
        SAFE_HEAP_STORE($599 | 0, 4 | 0, 4);
        SAFE_HEAP_STORE($600 | 0, 5 | 0, 4);
        SAFE_HEAP_STORE($601 | 0, 8 | 0, 4);
        __THREW__ = 0;
        invoke_viiii(28, $785 | 0, $599 | 0, $600 | 0, $601 | 0);
        $786 = __THREW__;
        __THREW__ = 0;
        $787 = $786 & 1;
        if ($787) {
         label = 121;
        } else {
         $788 = $785 + 12 | 0;
         SAFE_HEAP_STORE($602 | 0, 4 | 0, 4);
         SAFE_HEAP_STORE($603 | 0, 8 | 0, 4);
         SAFE_HEAP_STORE($604 | 0, 1 | 0, 4);
         __THREW__ = 0;
         invoke_viiii(28, $788 | 0, $602 | 0, $603 | 0, $604 | 0);
         $789 = __THREW__;
         __THREW__ = 0;
         $790 = $789 & 1;
         if ($790) {
          label = 121;
         } else {
          $791 = $788 + 12 | 0;
          SAFE_HEAP_STORE($605 | 0, 8 | 0, 4);
          SAFE_HEAP_STORE($606 | 0, 10 | 0, 4);
          SAFE_HEAP_STORE($607 | 0, 1 | 0, 4);
          __THREW__ = 0;
          invoke_viiii(28, $791 | 0, $605 | 0, $606 | 0, $607 | 0);
          $792 = __THREW__;
          __THREW__ = 0;
          $793 = $792 & 1;
          if ($793) {
           label = 121;
          } else {
           $794 = $791 + 12 | 0;
           SAFE_HEAP_STORE($608 | 0, 8 | 0, 4);
           SAFE_HEAP_STORE($609 | 0, 3 | 0, 4);
           SAFE_HEAP_STORE($610 | 0, 10 | 0, 4);
           __THREW__ = 0;
           invoke_viiii(28, $794 | 0, $608 | 0, $609 | 0, $610 | 0);
           $795 = __THREW__;
           __THREW__ = 0;
           $796 = $795 & 1;
           if ($796) {
            label = 121;
           } else {
            $797 = $794 + 12 | 0;
            SAFE_HEAP_STORE($611 | 0, 5 | 0, 4);
            SAFE_HEAP_STORE($612 | 0, 3 | 0, 4);
            SAFE_HEAP_STORE($613 | 0, 8 | 0, 4);
            __THREW__ = 0;
            invoke_viiii(28, $797 | 0, $611 | 0, $612 | 0, $613 | 0);
            $798 = __THREW__;
            __THREW__ = 0;
            $799 = $798 & 1;
            if ($799) {
             label = 121;
            } else {
             $800 = $797 + 12 | 0;
             SAFE_HEAP_STORE($614 | 0, 5 | 0, 4);
             SAFE_HEAP_STORE($615 | 0, 2 | 0, 4);
             SAFE_HEAP_STORE($616 | 0, 3 | 0, 4);
             __THREW__ = 0;
             invoke_viiii(28, $800 | 0, $614 | 0, $615 | 0, $616 | 0);
             $801 = __THREW__;
             __THREW__ = 0;
             $802 = $801 & 1;
             if ($802) {
              label = 121;
             } else {
              $803 = $800 + 12 | 0;
              SAFE_HEAP_STORE($617 | 0, 2 | 0, 4);
              SAFE_HEAP_STORE($618 | 0, 7 | 0, 4);
              SAFE_HEAP_STORE($619 | 0, 3 | 0, 4);
              __THREW__ = 0;
              invoke_viiii(28, $803 | 0, $617 | 0, $618 | 0, $619 | 0);
              $804 = __THREW__;
              __THREW__ = 0;
              $805 = $804 & 1;
              if ($805) {
               label = 121;
              } else {
               $806 = $803 + 12 | 0;
               SAFE_HEAP_STORE($620 | 0, 7 | 0, 4);
               SAFE_HEAP_STORE($621 | 0, 10 | 0, 4);
               SAFE_HEAP_STORE($622 | 0, 3 | 0, 4);
               __THREW__ = 0;
               invoke_viiii(28, $806 | 0, $620 | 0, $621 | 0, $622 | 0);
               $807 = __THREW__;
               __THREW__ = 0;
               $808 = $807 & 1;
               if ($808) {
                label = 121;
               } else {
                $809 = $806 + 12 | 0;
                SAFE_HEAP_STORE($623 | 0, 7 | 0, 4);
                SAFE_HEAP_STORE($624 | 0, 6 | 0, 4);
                SAFE_HEAP_STORE($625 | 0, 10 | 0, 4);
                __THREW__ = 0;
                invoke_viiii(28, $809 | 0, $623 | 0, $624 | 0, $625 | 0);
                $810 = __THREW__;
                __THREW__ = 0;
                $811 = $810 & 1;
                if ($811) {
                 label = 121;
                } else {
                 $812 = $809 + 12 | 0;
                 SAFE_HEAP_STORE($626 | 0, 7 | 0, 4);
                 SAFE_HEAP_STORE($627 | 0, 11 | 0, 4);
                 SAFE_HEAP_STORE($628 | 0, 6 | 0, 4);
                 __THREW__ = 0;
                 invoke_viiii(28, $812 | 0, $626 | 0, $627 | 0, $628 | 0);
                 $813 = __THREW__;
                 __THREW__ = 0;
                 $814 = $813 & 1;
                 if ($814) {
                  label = 121;
                 } else {
                  $815 = $812 + 12 | 0;
                  SAFE_HEAP_STORE($629 | 0, 11 | 0, 4);
                  SAFE_HEAP_STORE($630 | 0, 0 | 0, 4);
                  SAFE_HEAP_STORE($631 | 0, 6 | 0, 4);
                  __THREW__ = 0;
                  invoke_viiii(28, $815 | 0, $629 | 0, $630 | 0, $631 | 0);
                  $816 = __THREW__;
                  __THREW__ = 0;
                  $817 = $816 & 1;
                  if ($817) {
                   label = 121;
                  } else {
                   $818 = $815 + 12 | 0;
                   SAFE_HEAP_STORE($632 | 0, 0 | 0, 4);
                   SAFE_HEAP_STORE($633 | 0, 1 | 0, 4);
                   SAFE_HEAP_STORE($634 | 0, 6 | 0, 4);
                   __THREW__ = 0;
                   invoke_viiii(28, $818 | 0, $632 | 0, $633 | 0, $634 | 0);
                   $819 = __THREW__;
                   __THREW__ = 0;
                   $820 = $819 & 1;
                   if ($820) {
                    label = 121;
                   } else {
                    $821 = $818 + 12 | 0;
                    SAFE_HEAP_STORE($635 | 0, 6 | 0, 4);
                    SAFE_HEAP_STORE($636 | 0, 1 | 0, 4);
                    SAFE_HEAP_STORE($637 | 0, 10 | 0, 4);
                    __THREW__ = 0;
                    invoke_viiii(28, $821 | 0, $635 | 0, $636 | 0, $637 | 0);
                    $822 = __THREW__;
                    __THREW__ = 0;
                    $823 = $822 & 1;
                    if ($823) {
                     label = 121;
                     break;
                    }
                    $824 = $821 + 12 | 0;
                    SAFE_HEAP_STORE($638 | 0, 9 | 0, 4);
                    SAFE_HEAP_STORE($639 | 0, 0 | 0, 4);
                    SAFE_HEAP_STORE($640 | 0, 11 | 0, 4);
                    __THREW__ = 0;
                    invoke_viiii(28, $824 | 0, $638 | 0, $639 | 0, $640 | 0);
                    $825 = __THREW__;
                    __THREW__ = 0;
                    $826 = $825 & 1;
                    if ($826) {
                     label = 121;
                     break;
                    }
                    $827 = $824 + 12 | 0;
                    SAFE_HEAP_STORE($641 | 0, 9 | 0, 4);
                    SAFE_HEAP_STORE($642 | 0, 11 | 0, 4);
                    SAFE_HEAP_STORE($643 | 0, 2 | 0, 4);
                    __THREW__ = 0;
                    invoke_viiii(28, $827 | 0, $641 | 0, $642 | 0, $643 | 0);
                    $828 = __THREW__;
                    __THREW__ = 0;
                    $829 = $828 & 1;
                    if ($829) {
                     label = 121;
                     break;
                    }
                    $830 = $827 + 12 | 0;
                    SAFE_HEAP_STORE($644 | 0, 9 | 0, 4);
                    SAFE_HEAP_STORE($645 | 0, 2 | 0, 4);
                    SAFE_HEAP_STORE($646 | 0, 5 | 0, 4);
                    __THREW__ = 0;
                    invoke_viiii(28, $830 | 0, $644 | 0, $645 | 0, $646 | 0);
                    $831 = __THREW__;
                    __THREW__ = 0;
                    $832 = $831 & 1;
                    if ($832) {
                     label = 121;
                     break;
                    }
                    $833 = $830 + 12 | 0;
                    SAFE_HEAP_STORE($647 | 0, 7 | 0, 4);
                    SAFE_HEAP_STORE($648 | 0, 2 | 0, 4);
                    SAFE_HEAP_STORE($649 | 0, 11 | 0, 4);
                    __THREW__ = 0;
                    invoke_viiii(28, $833 | 0, $647 | 0, $648 | 0, $649 | 0);
                    $834 = __THREW__;
                    __THREW__ = 0;
                    $835 = $834 & 1;
                    if ($835) {
                     label = 121;
                     break;
                    }
                    SAFE_HEAP_STORE($588 | 0, $589 | 0, 4);
                    $836 = $588 + 4 | 0;
                    SAFE_HEAP_STORE($836 | 0, 20 | 0, 4);
                    {}
                    SAFE_HEAP_STORE($552 >> 0 | 0, SAFE_HEAP_LOAD($588 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
                    SAFE_HEAP_STORE($552 + 1 >> 0 | 0, SAFE_HEAP_LOAD($588 + 1 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
                    SAFE_HEAP_STORE($552 + 2 >> 0 | 0, SAFE_HEAP_LOAD($588 + 2 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
                    SAFE_HEAP_STORE($552 + 3 >> 0 | 0, SAFE_HEAP_LOAD($588 + 3 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
                    SAFE_HEAP_STORE($552 + 4 >> 0 | 0, SAFE_HEAP_LOAD($588 + 4 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
                    SAFE_HEAP_STORE($552 + 5 >> 0 | 0, SAFE_HEAP_LOAD($588 + 5 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
                    SAFE_HEAP_STORE($552 + 6 >> 0 | 0, SAFE_HEAP_LOAD($588 + 6 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
                    SAFE_HEAP_STORE($552 + 7 >> 0 | 0, SAFE_HEAP_LOAD($588 + 7 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
                    $549 = 5696;
                    $837 = $549;
                    $548 = $837;
                    $838 = $548;
                    $547 = $838;
                    SAFE_HEAP_STORE($838 | 0, 0 | 0, 4);
                    $839 = $838 + 4 | 0;
                    SAFE_HEAP_STORE($839 | 0, 0 | 0, 4);
                    $840 = $838 + 8 | 0;
                    $545 = $840;
                    SAFE_HEAP_STORE($546 | 0, 0 | 0, 4);
                    $841 = $545;
                    $544 = $546;
                    $842 = $544;
                    $843 = SAFE_HEAP_LOAD($842 | 0, 4, 0) | 0 | 0;
                    $542 = $841;
                    SAFE_HEAP_STORE($543 | 0, $843 | 0, 4);
                    $844 = $542;
                    $541 = $844;
                    $540 = $543;
                    $845 = $540;
                    $846 = SAFE_HEAP_LOAD($845 | 0, 4, 0) | 0 | 0;
                    SAFE_HEAP_STORE($844 | 0, $846 | 0, 4);
                    $539 = $552;
                    $847 = $539;
                    $848 = $847 + 4 | 0;
                    $849 = SAFE_HEAP_LOAD($848 | 0, 4, 0) | 0 | 0;
                    $850 = $849 >>> 0 > 0;
                    do {
                     if ($850) {
                      $538 = $552;
                      $851 = $538;
                      $852 = $851 + 4 | 0;
                      $853 = SAFE_HEAP_LOAD($852 | 0, 4, 0) | 0 | 0;
                      __THREW__ = 0;
                      invoke_vii(29, $837 | 0, $853 | 0);
                      $854 = __THREW__;
                      __THREW__ = 0;
                      $855 = $854 & 1;
                      if (!$855) {
                       $535 = $552;
                       $856 = $535;
                       $857 = SAFE_HEAP_LOAD($856 | 0, 4, 0) | 0 | 0;
                       $536 = $552;
                       $858 = $536;
                       $859 = SAFE_HEAP_LOAD($858 | 0, 4, 0) | 0 | 0;
                       $860 = $858 + 4 | 0;
                       $861 = SAFE_HEAP_LOAD($860 | 0, 4, 0) | 0 | 0;
                       $862 = $859 + ($861 * 12 | 0) | 0;
                       $537 = $552;
                       $863 = $537;
                       $864 = $863 + 4 | 0;
                       $865 = SAFE_HEAP_LOAD($864 | 0, 4, 0) | 0 | 0;
                       __THREW__ = 0;
                       invoke_viiii(30, $837 | 0, $857 | 0, $862 | 0, $865 | 0);
                       $866 = __THREW__;
                       __THREW__ = 0;
                       $867 = $866 & 1;
                       if (!$867) {
                        break;
                       }
                      }
                      $868 = ___cxa_find_matching_catch_2() | 0;
                      $869 = tempRet0;
                      $550 = $868;
                      $551 = $869;
                      __ZNSt3__213__vector_baseIN5Eigen5ArrayIjLi3ELi1ELi0ELi3ELi1EEENS_9allocatorIS3_EEED2Ev($837);
                      $870 = $550;
                      $871 = $551;
                      $$sink3 = $871;
                      $$sink4 = $870;
                      break L31;
                     }
                    } while (0);
                    break L28;
                   }
                  }
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    } while (0);
    if ((label | 0) == 121) {
     $1672 = ___cxa_find_matching_catch_2() | 0;
     $1673 = tempRet0;
     $$sink3 = $1673;
     $$sink4 = $1672;
    }
    $575 = $$sink4;
    $576 = $$sink3;
    $1756 = $575;
    $1757 = $576;
    ___resumeException($1756 | 0);
   }
  }
 } while (0);
 __ZNSt3__26vectorIN5Eigen5ArrayIfLi3ELi1ELi0ELi3ELi1EEENS_9allocatorIS3_EEEC2ERKS6_($650, 5684);
 __THREW__ = 0;
 invoke_vii(31, $651 | 0, 5696 | 0);
 $872 = __THREW__;
 __THREW__ = 0;
 $873 = $872 & 1;
 if ($873) {
  $1674 = ___cxa_find_matching_catch_2() | 0;
  $1675 = tempRet0;
  $575 = $1674;
  $576 = $1675;
 } else {
  $534 = $652;
  $874 = $534;
  $533 = $874;
  $875 = $533;
  $532 = $875;
  SAFE_HEAP_STORE($875 | 0, 0 | 0, 4);
  $876 = $875 + 4 | 0;
  SAFE_HEAP_STORE($876 | 0, 0 | 0, 4);
  $877 = $875 + 8 | 0;
  $530 = $877;
  SAFE_HEAP_STORE($531 | 0, 0 | 0, 4);
  $878 = $530;
  $529 = $531;
  $879 = $529;
  $880 = SAFE_HEAP_LOAD($879 | 0, 4, 0) | 0 | 0;
  $527 = $878;
  SAFE_HEAP_STORE($528 | 0, $880 | 0, 4);
  $881 = $527;
  $526 = $881;
  $525 = $528;
  $882 = $525;
  $883 = SAFE_HEAP_LOAD($882 | 0, 4, 0) | 0 | 0;
  SAFE_HEAP_STORE($881 | 0, $883 | 0, 4);
  $524 = $653;
  $884 = $524;
  $523 = $884;
  $885 = $523;
  $522 = $885;
  SAFE_HEAP_STORE($885 | 0, 0 | 0, 4);
  $886 = $885 + 4 | 0;
  SAFE_HEAP_STORE($886 | 0, 0 | 0, 4);
  $887 = $885 + 8 | 0;
  $520 = $887;
  SAFE_HEAP_STORE($521 | 0, 0 | 0, 4);
  $888 = $520;
  $519 = $521;
  $889 = $519;
  $890 = SAFE_HEAP_LOAD($889 | 0, 4, 0) | 0 | 0;
  $517 = $888;
  SAFE_HEAP_STORE($518 | 0, $890 | 0, 4);
  $891 = $517;
  $516 = $891;
  $515 = $518;
  $892 = $515;
  $893 = SAFE_HEAP_LOAD($892 | 0, 4, 0) | 0 | 0;
  SAFE_HEAP_STORE($891 | 0, $893 | 0, 4);
  $654 = 0;
  L66 : while (1) {
   $894 = $654;
   $895 = $571;
   $896 = $895 + 32 | 0;
   $897 = SAFE_HEAP_LOAD($896 | 0, 4, 0) | 0 | 0;
   $898 = $894 >>> 0 < $897 >>> 0;
   if (!$898) {
    label = 126;
    break;
   }
   $513 = $653;
   $899 = $513;
   $512 = $899;
   $900 = $512;
   $901 = $900 + 4 | 0;
   $902 = SAFE_HEAP_LOAD($901 | 0, 4, 0) | 0 | 0;
   $903 = SAFE_HEAP_LOAD($900 | 0, 4, 0) | 0 | 0;
   $904 = $902;
   $905 = $903;
   $906 = $904 - $905 | 0;
   $907 = ($906 | 0) / 12 & -1;
   $514 = $907;
   $511 = $899;
   $908 = $511;
   $909 = SAFE_HEAP_LOAD($908 | 0, 4, 0) | 0 | 0;
   $509 = $908;
   $510 = $909;
   $910 = $509;
   while (1) {
    $911 = $510;
    $912 = $910 + 4 | 0;
    $913 = SAFE_HEAP_LOAD($912 | 0, 4, 0) | 0 | 0;
    $914 = ($911 | 0) != ($913 | 0);
    if (!$914) {
     break;
    }
    $508 = $910;
    $915 = $508;
    $916 = $915 + 8 | 0;
    $507 = $916;
    $917 = $507;
    $506 = $917;
    $918 = $506;
    $919 = $910 + 4 | 0;
    $920 = SAFE_HEAP_LOAD($919 | 0, 4, 0) | 0 | 0;
    $921 = $920 + -12 | 0;
    SAFE_HEAP_STORE($919 | 0, $921 | 0, 4);
    $505 = $921;
    $922 = $505;
    $502 = $918;
    $503 = $922;
    $923 = $502;
    $924 = $503;
    {}
    SAFE_HEAP_STORE($501 >> 0 | 0, SAFE_HEAP_LOAD($504 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
    $499 = $923;
    $500 = $924;
    $925 = $499;
    $926 = $500;
    $497 = $925;
    $498 = $926;
   }
   $927 = $514;
   $494 = $899;
   $495 = $927;
   $928 = $494;
   $493 = $928;
   $929 = $493;
   $930 = SAFE_HEAP_LOAD($929 | 0, 4, 0) | 0 | 0;
   $492 = $930;
   $931 = $492;
   $476 = $928;
   $932 = $476;
   $933 = SAFE_HEAP_LOAD($932 | 0, 4, 0) | 0 | 0;
   $475 = $933;
   $934 = $475;
   $481 = $928;
   $935 = $481;
   $480 = $935;
   $936 = $480;
   $479 = $936;
   $937 = $479;
   $938 = $937 + 8 | 0;
   $478 = $938;
   $939 = $478;
   $477 = $939;
   $940 = $477;
   $941 = SAFE_HEAP_LOAD($940 | 0, 4, 0) | 0 | 0;
   $942 = SAFE_HEAP_LOAD($936 | 0, 4, 0) | 0 | 0;
   $943 = $941;
   $944 = $942;
   $945 = $943 - $944 | 0;
   $946 = ($945 | 0) / 12 & -1;
   $947 = $934 + ($946 * 12 | 0) | 0;
   $483 = $928;
   $948 = $483;
   $949 = SAFE_HEAP_LOAD($948 | 0, 4, 0) | 0 | 0;
   $482 = $949;
   $950 = $482;
   $951 = $495;
   $952 = $950 + ($951 * 12 | 0) | 0;
   $485 = $928;
   $953 = $485;
   $954 = SAFE_HEAP_LOAD($953 | 0, 4, 0) | 0 | 0;
   $484 = $954;
   $955 = $484;
   $486 = $928;
   $956 = $486;
   $957 = $956 + 4 | 0;
   $958 = SAFE_HEAP_LOAD($957 | 0, 4, 0) | 0 | 0;
   $959 = SAFE_HEAP_LOAD($956 | 0, 4, 0) | 0 | 0;
   $960 = $958;
   $961 = $959;
   $962 = $960 - $961 | 0;
   $963 = ($962 | 0) / 12 & -1;
   $964 = $955 + ($963 * 12 | 0) | 0;
   $487 = $928;
   $488 = $931;
   $489 = $947;
   $490 = $952;
   $491 = $964;
   $496 = $899;
   $473 = $652;
   $965 = $473;
   $472 = $965;
   $966 = $472;
   $967 = $966 + 4 | 0;
   $968 = SAFE_HEAP_LOAD($967 | 0, 4, 0) | 0 | 0;
   $969 = SAFE_HEAP_LOAD($966 | 0, 4, 0) | 0 | 0;
   $970 = $968;
   $971 = $969;
   $972 = $970 - $971 | 0;
   $973 = ($972 | 0) / 12 & -1;
   $474 = $973;
   $471 = $965;
   $974 = $471;
   $975 = SAFE_HEAP_LOAD($974 | 0, 4, 0) | 0 | 0;
   $469 = $974;
   $470 = $975;
   $976 = $469;
   while (1) {
    $977 = $470;
    $978 = $976 + 4 | 0;
    $979 = SAFE_HEAP_LOAD($978 | 0, 4, 0) | 0 | 0;
    $980 = ($977 | 0) != ($979 | 0);
    if (!$980) {
     break;
    }
    $468 = $976;
    $981 = $468;
    $982 = $981 + 8 | 0;
    $467 = $982;
    $983 = $467;
    $466 = $983;
    $984 = $466;
    $985 = $976 + 4 | 0;
    $986 = SAFE_HEAP_LOAD($985 | 0, 4, 0) | 0 | 0;
    $987 = $986 + -12 | 0;
    SAFE_HEAP_STORE($985 | 0, $987 | 0, 4);
    $465 = $987;
    $988 = $465;
    $462 = $984;
    $463 = $988;
    $989 = $462;
    $990 = $463;
    {}
    SAFE_HEAP_STORE($461 >> 0 | 0, SAFE_HEAP_LOAD($464 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
    $459 = $989;
    $460 = $990;
    $991 = $459;
    $992 = $460;
    $457 = $991;
    $458 = $992;
   }
   $993 = $474;
   $454 = $965;
   $455 = $993;
   $994 = $454;
   $453 = $994;
   $995 = $453;
   $996 = SAFE_HEAP_LOAD($995 | 0, 4, 0) | 0 | 0;
   $452 = $996;
   $997 = $452;
   $436 = $994;
   $998 = $436;
   $999 = SAFE_HEAP_LOAD($998 | 0, 4, 0) | 0 | 0;
   $435 = $999;
   $1000 = $435;
   $441 = $994;
   $1001 = $441;
   $440 = $1001;
   $1002 = $440;
   $439 = $1002;
   $1003 = $439;
   $1004 = $1003 + 8 | 0;
   $438 = $1004;
   $1005 = $438;
   $437 = $1005;
   $1006 = $437;
   $1007 = SAFE_HEAP_LOAD($1006 | 0, 4, 0) | 0 | 0;
   $1008 = SAFE_HEAP_LOAD($1002 | 0, 4, 0) | 0 | 0;
   $1009 = $1007;
   $1010 = $1008;
   $1011 = $1009 - $1010 | 0;
   $1012 = ($1011 | 0) / 12 & -1;
   $1013 = $1000 + ($1012 * 12 | 0) | 0;
   $443 = $994;
   $1014 = $443;
   $1015 = SAFE_HEAP_LOAD($1014 | 0, 4, 0) | 0 | 0;
   $442 = $1015;
   $1016 = $442;
   $1017 = $455;
   $1018 = $1016 + ($1017 * 12 | 0) | 0;
   $445 = $994;
   $1019 = $445;
   $1020 = SAFE_HEAP_LOAD($1019 | 0, 4, 0) | 0 | 0;
   $444 = $1020;
   $1021 = $444;
   $446 = $994;
   $1022 = $446;
   $1023 = $1022 + 4 | 0;
   $1024 = SAFE_HEAP_LOAD($1023 | 0, 4, 0) | 0 | 0;
   $1025 = SAFE_HEAP_LOAD($1022 | 0, 4, 0) | 0 | 0;
   $1026 = $1024;
   $1027 = $1025;
   $1028 = $1026 - $1027 | 0;
   $1029 = ($1028 | 0) / 12 & -1;
   $1030 = $1021 + ($1029 * 12 | 0) | 0;
   $447 = $994;
   $448 = $997;
   $449 = $1013;
   $450 = $1018;
   $451 = $1030;
   $456 = $965;
   $434 = $651;
   $1031 = $434;
   $1032 = $1031 + 4 | 0;
   $1033 = SAFE_HEAP_LOAD($1032 | 0, 4, 0) | 0 | 0;
   $1034 = SAFE_HEAP_LOAD($1031 | 0, 4, 0) | 0 | 0;
   $1035 = $1033;
   $1036 = $1034;
   $1037 = $1035 - $1036 | 0;
   $1038 = ($1037 | 0) / 12 & -1;
   $1039 = $1038 << 2;
   __THREW__ = 0;
   invoke_vii(32, $653 | 0, $1039 | 0);
   $1040 = __THREW__;
   __THREW__ = 0;
   $1041 = $1040 & 1;
   if ($1041) {
    break;
   }
   $433 = $650;
   $1042 = $433;
   $1043 = $1042 + 4 | 0;
   $1044 = SAFE_HEAP_LOAD($1043 | 0, 4, 0) | 0 | 0;
   $1045 = SAFE_HEAP_LOAD($1042 | 0, 4, 0) | 0 | 0;
   $1046 = $1044;
   $1047 = $1045;
   $1048 = $1046 - $1047 | 0;
   $1049 = ($1048 | 0) / 12 & -1;
   $1050 = $1049 << 1;
   __THREW__ = 0;
   invoke_vii(33, $652 | 0, $1050 | 0);
   $1051 = __THREW__;
   __THREW__ = 0;
   $1052 = $1051 & 1;
   if ($1052) {
    break;
   }
   $655 = $651;
   $1053 = $655;
   $432 = $1053;
   $1054 = $432;
   $1055 = SAFE_HEAP_LOAD($1054 | 0, 4, 0) | 0 | 0;
   $429 = $1054;
   $430 = $1055;
   $1056 = $430;
   $426 = $428;
   $427 = $1056;
   $1057 = $426;
   $1058 = $427;
   SAFE_HEAP_STORE($1057 | 0, $1058 | 0, 4);
   $1059 = SAFE_HEAP_LOAD($428 | 0, 4, 0) | 0 | 0;
   SAFE_HEAP_STORE($431 | 0, $1059 | 0, 4);
   $1060 = SAFE_HEAP_LOAD($431 | 0, 4, 0) | 0 | 0;
   SAFE_HEAP_STORE($656 | 0, $1060 | 0, 4);
   $1061 = $655;
   $425 = $1061;
   $1062 = $425;
   $1063 = $1062 + 4 | 0;
   $1064 = SAFE_HEAP_LOAD($1063 | 0, 4, 0) | 0 | 0;
   $422 = $1062;
   $423 = $1064;
   $1065 = $423;
   $419 = $421;
   $420 = $1065;
   $1066 = $419;
   $1067 = $420;
   SAFE_HEAP_STORE($1066 | 0, $1067 | 0, 4);
   $1068 = SAFE_HEAP_LOAD($421 | 0, 4, 0) | 0 | 0;
   SAFE_HEAP_STORE($424 | 0, $1068 | 0, 4);
   $1069 = SAFE_HEAP_LOAD($424 | 0, 4, 0) | 0 | 0;
   SAFE_HEAP_STORE($657 | 0, $1069 | 0, 4);
   while (1) {
    $417 = $656;
    $418 = $657;
    $1070 = $417;
    $1071 = $418;
    $415 = $1070;
    $416 = $1071;
    $1072 = $415;
    $414 = $1072;
    $1073 = $414;
    $1074 = SAFE_HEAP_LOAD($1073 | 0, 4, 0) | 0 | 0;
    $1075 = $416;
    $413 = $1075;
    $1076 = $413;
    $1077 = SAFE_HEAP_LOAD($1076 | 0, 4, 0) | 0 | 0;
    $1078 = ($1074 | 0) == ($1077 | 0);
    $1079 = $1078 ^ 1;
    if (!$1079) {
     break;
    }
    $412 = $656;
    $1080 = $412;
    $1081 = SAFE_HEAP_LOAD($1080 | 0, 4, 0) | 0 | 0;
    $658 = $1081;
    $411 = $652;
    $1082 = $411;
    $1083 = $1082 + 4 | 0;
    $1084 = SAFE_HEAP_LOAD($1083 | 0, 4, 0) | 0 | 0;
    $1085 = SAFE_HEAP_LOAD($1082 | 0, 4, 0) | 0 | 0;
    $1086 = $1084;
    $1087 = $1085;
    $1088 = $1086 - $1087 | 0;
    $1089 = ($1088 | 0) / 12 & -1;
    $659 = $1089;
    $1090 = $658;
    __THREW__ = 0;
    $1091 = invoke_iii(34, $1090 | 0, 0) | 0;
    $1092 = __THREW__;
    __THREW__ = 0;
    $1093 = $1092 & 1;
    if ($1093) {
     break L66;
    }
    $1094 = SAFE_HEAP_LOAD($1091 | 0, 4, 0) | 0 | 0;
    $407 = $650;
    $408 = $1094;
    $1095 = $407;
    $1096 = SAFE_HEAP_LOAD($1095 | 0, 4, 0) | 0 | 0;
    $1097 = $408;
    $1098 = $1096 + ($1097 * 12 | 0) | 0;
    $404 = $652;
    $405 = $1098;
    $1099 = $404;
    $1100 = $1099 + 4 | 0;
    $1101 = SAFE_HEAP_LOAD($1100 | 0, 4, 0) | 0 | 0;
    $403 = $1099;
    $1102 = $403;
    $1103 = $1102 + 8 | 0;
    $402 = $1103;
    $1104 = $402;
    $401 = $1104;
    $1105 = $401;
    $1106 = SAFE_HEAP_LOAD($1105 | 0, 4, 0) | 0 | 0;
    $1107 = ($1101 | 0) != ($1106 | 0);
    if ($1107) {
     $398 = $406;
     $399 = $1099;
     $400 = 1;
     $382 = $1099;
     $1108 = $382;
     $1109 = $1108 + 8 | 0;
     $381 = $1109;
     $1110 = $381;
     $380 = $1110;
     $1111 = $380;
     $1112 = $1099 + 4 | 0;
     $1113 = SAFE_HEAP_LOAD($1112 | 0, 4, 0) | 0 | 0;
     $379 = $1113;
     $1114 = $379;
     $1115 = $405;
     $393 = $1111;
     $394 = $1114;
     $395 = $1115;
     $1116 = $393;
     $1117 = $394;
     $1118 = $395;
     $392 = $1118;
     $1119 = $392;
     {}
     SAFE_HEAP_STORE($391 >> 0 | 0, SAFE_HEAP_LOAD($396 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
     $388 = $1116;
     $389 = $1117;
     $390 = $1119;
     $1120 = $388;
     $1121 = $389;
     $1122 = $390;
     $387 = $1122;
     $1123 = $387;
     $384 = $1120;
     $385 = $1121;
     $386 = $1123;
     $1124 = $385;
     $1125 = $386;
     $383 = $1125;
     $1126 = $383;
     __THREW__ = 0;
     invoke_vii(35, $1124 | 0, $1126 | 0);
     $1127 = __THREW__;
     __THREW__ = 0;
     $1128 = $1127 & 1;
     if ($1128) {
      break L66;
     }
     $397 = $406;
     $1129 = $1099 + 4 | 0;
     $1130 = SAFE_HEAP_LOAD($1129 | 0, 4, 0) | 0 | 0;
     $1131 = $1130 + 12 | 0;
     SAFE_HEAP_STORE($1129 | 0, $1131 | 0, 4);
    } else {
     $1132 = $405;
     __THREW__ = 0;
     invoke_vii(36, $1099 | 0, $1132 | 0);
     $1133 = __THREW__;
     __THREW__ = 0;
     $1134 = $1133 & 1;
     if ($1134) {
      break L66;
     }
    }
    $1135 = $658;
    __THREW__ = 0;
    $1136 = invoke_iii(34, $1135 | 0, 1) | 0;
    $1137 = __THREW__;
    __THREW__ = 0;
    $1138 = $1137 & 1;
    if ($1138) {
     break L66;
    }
    $1139 = SAFE_HEAP_LOAD($1136 | 0, 4, 0) | 0 | 0;
    $377 = $650;
    $378 = $1139;
    $1140 = $377;
    $1141 = SAFE_HEAP_LOAD($1140 | 0, 4, 0) | 0 | 0;
    $1142 = $378;
    $1143 = $1141 + ($1142 * 12 | 0) | 0;
    $374 = $652;
    $375 = $1143;
    $1144 = $374;
    $1145 = $1144 + 4 | 0;
    $1146 = SAFE_HEAP_LOAD($1145 | 0, 4, 0) | 0 | 0;
    $373 = $1144;
    $1147 = $373;
    $1148 = $1147 + 8 | 0;
    $372 = $1148;
    $1149 = $372;
    $371 = $1149;
    $1150 = $371;
    $1151 = SAFE_HEAP_LOAD($1150 | 0, 4, 0) | 0 | 0;
    $1152 = ($1146 | 0) != ($1151 | 0);
    if ($1152) {
     $368 = $376;
     $369 = $1144;
     $370 = 1;
     $352 = $1144;
     $1153 = $352;
     $1154 = $1153 + 8 | 0;
     $351 = $1154;
     $1155 = $351;
     $350 = $1155;
     $1156 = $350;
     $1157 = $1144 + 4 | 0;
     $1158 = SAFE_HEAP_LOAD($1157 | 0, 4, 0) | 0 | 0;
     $349 = $1158;
     $1159 = $349;
     $1160 = $375;
     $363 = $1156;
     $364 = $1159;
     $365 = $1160;
     $1161 = $363;
     $1162 = $364;
     $1163 = $365;
     $362 = $1163;
     $1164 = $362;
     {}
     SAFE_HEAP_STORE($361 >> 0 | 0, SAFE_HEAP_LOAD($366 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
     $358 = $1161;
     $359 = $1162;
     $360 = $1164;
     $1165 = $358;
     $1166 = $359;
     $1167 = $360;
     $357 = $1167;
     $1168 = $357;
     $354 = $1165;
     $355 = $1166;
     $356 = $1168;
     $1169 = $355;
     $1170 = $356;
     $353 = $1170;
     $1171 = $353;
     __THREW__ = 0;
     invoke_vii(35, $1169 | 0, $1171 | 0);
     $1172 = __THREW__;
     __THREW__ = 0;
     $1173 = $1172 & 1;
     if ($1173) {
      break L66;
     }
     $367 = $376;
     $1174 = $1144 + 4 | 0;
     $1175 = SAFE_HEAP_LOAD($1174 | 0, 4, 0) | 0 | 0;
     $1176 = $1175 + 12 | 0;
     SAFE_HEAP_STORE($1174 | 0, $1176 | 0, 4);
    } else {
     $1177 = $375;
     __THREW__ = 0;
     invoke_vii(36, $1144 | 0, $1177 | 0);
     $1178 = __THREW__;
     __THREW__ = 0;
     $1179 = $1178 & 1;
     if ($1179) {
      break L66;
     }
    }
    $1180 = $658;
    __THREW__ = 0;
    $1181 = invoke_iii(34, $1180 | 0, 2) | 0;
    $1182 = __THREW__;
    __THREW__ = 0;
    $1183 = $1182 & 1;
    if ($1183) {
     break L66;
    }
    $1184 = SAFE_HEAP_LOAD($1181 | 0, 4, 0) | 0 | 0;
    $347 = $650;
    $348 = $1184;
    $1185 = $347;
    $1186 = SAFE_HEAP_LOAD($1185 | 0, 4, 0) | 0 | 0;
    $1187 = $348;
    $1188 = $1186 + ($1187 * 12 | 0) | 0;
    $344 = $652;
    $345 = $1188;
    $1189 = $344;
    $1190 = $1189 + 4 | 0;
    $1191 = SAFE_HEAP_LOAD($1190 | 0, 4, 0) | 0 | 0;
    $343 = $1189;
    $1192 = $343;
    $1193 = $1192 + 8 | 0;
    $342 = $1193;
    $1194 = $342;
    $341 = $1194;
    $1195 = $341;
    $1196 = SAFE_HEAP_LOAD($1195 | 0, 4, 0) | 0 | 0;
    $1197 = ($1191 | 0) != ($1196 | 0);
    if ($1197) {
     $338 = $346;
     $339 = $1189;
     $340 = 1;
     $322 = $1189;
     $1198 = $322;
     $1199 = $1198 + 8 | 0;
     $321 = $1199;
     $1200 = $321;
     $320 = $1200;
     $1201 = $320;
     $1202 = $1189 + 4 | 0;
     $1203 = SAFE_HEAP_LOAD($1202 | 0, 4, 0) | 0 | 0;
     $319 = $1203;
     $1204 = $319;
     $1205 = $345;
     $333 = $1201;
     $334 = $1204;
     $335 = $1205;
     $1206 = $333;
     $1207 = $334;
     $1208 = $335;
     $332 = $1208;
     $1209 = $332;
     {}
     SAFE_HEAP_STORE($331 >> 0 | 0, SAFE_HEAP_LOAD($336 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
     $328 = $1206;
     $329 = $1207;
     $330 = $1209;
     $1210 = $328;
     $1211 = $329;
     $1212 = $330;
     $327 = $1212;
     $1213 = $327;
     $324 = $1210;
     $325 = $1211;
     $326 = $1213;
     $1214 = $325;
     $1215 = $326;
     $323 = $1215;
     $1216 = $323;
     __THREW__ = 0;
     invoke_vii(35, $1214 | 0, $1216 | 0);
     $1217 = __THREW__;
     __THREW__ = 0;
     $1218 = $1217 & 1;
     if ($1218) {
      break L66;
     }
     $337 = $346;
     $1219 = $1189 + 4 | 0;
     $1220 = SAFE_HEAP_LOAD($1219 | 0, 4, 0) | 0 | 0;
     $1221 = $1220 + 12 | 0;
     SAFE_HEAP_STORE($1219 | 0, $1221 | 0, 4);
    } else {
     $1222 = $345;
     __THREW__ = 0;
     invoke_vii(36, $1189 | 0, $1222 | 0);
     $1223 = __THREW__;
     __THREW__ = 0;
     $1224 = $1223 & 1;
     if ($1224) {
      break L66;
     }
    }
    $1225 = $658;
    __THREW__ = 0;
    $1226 = invoke_iii(34, $1225 | 0, 0) | 0;
    $1227 = __THREW__;
    __THREW__ = 0;
    $1228 = $1227 & 1;
    if ($1228) {
     break L66;
    }
    $1229 = SAFE_HEAP_LOAD($1226 | 0, 4, 0) | 0 | 0;
    $317 = $650;
    $318 = $1229;
    $1230 = $317;
    $1231 = SAFE_HEAP_LOAD($1230 | 0, 4, 0) | 0 | 0;
    $1232 = $318;
    $1233 = $1231 + ($1232 * 12 | 0) | 0;
    $1234 = $658;
    __THREW__ = 0;
    $1235 = invoke_iii(34, $1234 | 0, 1) | 0;
    $1236 = __THREW__;
    __THREW__ = 0;
    $1237 = $1236 & 1;
    if ($1237) {
     break L66;
    }
    $1238 = SAFE_HEAP_LOAD($1235 | 0, 4, 0) | 0 | 0;
    $315 = $650;
    $316 = $1238;
    $1239 = $315;
    $1240 = SAFE_HEAP_LOAD($1239 | 0, 4, 0) | 0 | 0;
    $1241 = $316;
    $1242 = $1240 + ($1241 * 12 | 0) | 0;
    __THREW__ = 0;
    invoke_viii(37, $663 | 0, $1233 | 0, $1242 | 0);
    $1243 = __THREW__;
    __THREW__ = 0;
    $1244 = $1243 & 1;
    if ($1244) {
     break L66;
    }
    __THREW__ = 0;
    invoke_vii(38, $662 | 0, $663 | 0);
    $1245 = __THREW__;
    __THREW__ = 0;
    $1246 = $1245 & 1;
    if ($1246) {
     break L66;
    }
    __THREW__ = 0;
    invoke_vii(39, $661 | 0, $662 | 0);
    $1247 = __THREW__;
    __THREW__ = 0;
    $1248 = $1247 & 1;
    if ($1248) {
     break L66;
    }
    __THREW__ = 0;
    {}
    SAFE_HEAP_STORE($$byval_copy >> 0 | 0, SAFE_HEAP_LOAD($664 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
    invoke_viii(40, $660 | 0, $661 | 0, $$byval_copy | 0);
    $1249 = __THREW__;
    __THREW__ = 0;
    $1250 = $1249 & 1;
    if ($1250) {
     break L66;
    }
    $312 = $652;
    $313 = $660;
    $1251 = $312;
    $1252 = $1251 + 4 | 0;
    $1253 = SAFE_HEAP_LOAD($1252 | 0, 4, 0) | 0 | 0;
    $311 = $1251;
    $1254 = $311;
    $1255 = $1254 + 8 | 0;
    $310 = $1255;
    $1256 = $310;
    $309 = $1256;
    $1257 = $309;
    $1258 = SAFE_HEAP_LOAD($1257 | 0, 4, 0) | 0 | 0;
    $1259 = $1253 >>> 0 < $1258 >>> 0;
    if ($1259) {
     $306 = $314;
     $307 = $1251;
     $308 = 1;
     $289 = $1251;
     $1260 = $289;
     $1261 = $1260 + 8 | 0;
     $288 = $1261;
     $1262 = $288;
     $287 = $1262;
     $1263 = $287;
     $1264 = $1251 + 4 | 0;
     $1265 = SAFE_HEAP_LOAD($1264 | 0, 4, 0) | 0 | 0;
     $285 = $1265;
     $1266 = $285;
     $1267 = $313;
     $286 = $1267;
     $1268 = $286;
     $300 = $1263;
     $301 = $1266;
     $302 = $1268;
     $1269 = $300;
     $1270 = $301;
     $1271 = $302;
     $299 = $1271;
     $1272 = $299;
     {}
     SAFE_HEAP_STORE($298 >> 0 | 0, SAFE_HEAP_LOAD($303 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
     $295 = $1269;
     $296 = $1270;
     $297 = $1272;
     $1273 = $295;
     $1274 = $296;
     $1275 = $297;
     $294 = $1275;
     $1276 = $294;
     $291 = $1273;
     $292 = $1274;
     $293 = $1276;
     $1277 = $292;
     $1278 = $293;
     $290 = $1278;
     $1279 = $290;
     __ZN5Eigen5ArrayIfLi3ELi1ELi0ELi3ELi1EEC2EOS1_($1277, $1279);
     $304 = $314;
     $1280 = $1251 + 4 | 0;
     $1281 = SAFE_HEAP_LOAD($1280 | 0, 4, 0) | 0 | 0;
     $1282 = $1281 + 12 | 0;
     SAFE_HEAP_STORE($1280 | 0, $1282 | 0, 4);
    } else {
     $1283 = $313;
     $305 = $1283;
     $1284 = $305;
     __THREW__ = 0;
     invoke_vii(41, $1251 | 0, $1284 | 0);
     $1285 = __THREW__;
     __THREW__ = 0;
     $1286 = $1285 & 1;
     if ($1286) {
      break L66;
     }
    }
    $1287 = $658;
    __THREW__ = 0;
    $1288 = invoke_iii(34, $1287 | 0, 1) | 0;
    $1289 = __THREW__;
    __THREW__ = 0;
    $1290 = $1289 & 1;
    if ($1290) {
     break L66;
    }
    $1291 = SAFE_HEAP_LOAD($1288 | 0, 4, 0) | 0 | 0;
    $283 = $650;
    $284 = $1291;
    $1292 = $283;
    $1293 = SAFE_HEAP_LOAD($1292 | 0, 4, 0) | 0 | 0;
    $1294 = $284;
    $1295 = $1293 + ($1294 * 12 | 0) | 0;
    $1296 = $658;
    __THREW__ = 0;
    $1297 = invoke_iii(34, $1296 | 0, 2) | 0;
    $1298 = __THREW__;
    __THREW__ = 0;
    $1299 = $1298 & 1;
    if ($1299) {
     break L66;
    }
    $1300 = SAFE_HEAP_LOAD($1297 | 0, 4, 0) | 0 | 0;
    $281 = $650;
    $282 = $1300;
    $1301 = $281;
    $1302 = SAFE_HEAP_LOAD($1301 | 0, 4, 0) | 0 | 0;
    $1303 = $282;
    $1304 = $1302 + ($1303 * 12 | 0) | 0;
    __THREW__ = 0;
    invoke_viii(37, $668 | 0, $1295 | 0, $1304 | 0);
    $1305 = __THREW__;
    __THREW__ = 0;
    $1306 = $1305 & 1;
    if ($1306) {
     break L66;
    }
    __THREW__ = 0;
    invoke_vii(38, $667 | 0, $668 | 0);
    $1307 = __THREW__;
    __THREW__ = 0;
    $1308 = $1307 & 1;
    if ($1308) {
     break L66;
    }
    __THREW__ = 0;
    invoke_vii(39, $666 | 0, $667 | 0);
    $1309 = __THREW__;
    __THREW__ = 0;
    $1310 = $1309 & 1;
    if ($1310) {
     break L66;
    }
    __THREW__ = 0;
    {}
    SAFE_HEAP_STORE($$byval_copy5 >> 0 | 0, SAFE_HEAP_LOAD($669 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
    invoke_viii(40, $665 | 0, $666 | 0, $$byval_copy5 | 0);
    $1311 = __THREW__;
    __THREW__ = 0;
    $1312 = $1311 & 1;
    if ($1312) {
     break L66;
    }
    $278 = $652;
    $279 = $665;
    $1313 = $278;
    $1314 = $1313 + 4 | 0;
    $1315 = SAFE_HEAP_LOAD($1314 | 0, 4, 0) | 0 | 0;
    $277 = $1313;
    $1316 = $277;
    $1317 = $1316 + 8 | 0;
    $276 = $1317;
    $1318 = $276;
    $275 = $1318;
    $1319 = $275;
    $1320 = SAFE_HEAP_LOAD($1319 | 0, 4, 0) | 0 | 0;
    $1321 = $1315 >>> 0 < $1320 >>> 0;
    if ($1321) {
     $272 = $280;
     $273 = $1313;
     $274 = 1;
     $255 = $1313;
     $1322 = $255;
     $1323 = $1322 + 8 | 0;
     $254 = $1323;
     $1324 = $254;
     $253 = $1324;
     $1325 = $253;
     $1326 = $1313 + 4 | 0;
     $1327 = SAFE_HEAP_LOAD($1326 | 0, 4, 0) | 0 | 0;
     $251 = $1327;
     $1328 = $251;
     $1329 = $279;
     $252 = $1329;
     $1330 = $252;
     $266 = $1325;
     $267 = $1328;
     $268 = $1330;
     $1331 = $266;
     $1332 = $267;
     $1333 = $268;
     $265 = $1333;
     $1334 = $265;
     {}
     SAFE_HEAP_STORE($264 >> 0 | 0, SAFE_HEAP_LOAD($269 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
     $261 = $1331;
     $262 = $1332;
     $263 = $1334;
     $1335 = $261;
     $1336 = $262;
     $1337 = $263;
     $260 = $1337;
     $1338 = $260;
     $257 = $1335;
     $258 = $1336;
     $259 = $1338;
     $1339 = $258;
     $1340 = $259;
     $256 = $1340;
     $1341 = $256;
     __ZN5Eigen5ArrayIfLi3ELi1ELi0ELi3ELi1EEC2EOS1_($1339, $1341);
     $270 = $280;
     $1342 = $1313 + 4 | 0;
     $1343 = SAFE_HEAP_LOAD($1342 | 0, 4, 0) | 0 | 0;
     $1344 = $1343 + 12 | 0;
     SAFE_HEAP_STORE($1342 | 0, $1344 | 0, 4);
    } else {
     $1345 = $279;
     $271 = $1345;
     $1346 = $271;
     __THREW__ = 0;
     invoke_vii(41, $1313 | 0, $1346 | 0);
     $1347 = __THREW__;
     __THREW__ = 0;
     $1348 = $1347 & 1;
     if ($1348) {
      break L66;
     }
    }
    $1349 = $658;
    __THREW__ = 0;
    $1350 = invoke_iii(34, $1349 | 0, 2) | 0;
    $1351 = __THREW__;
    __THREW__ = 0;
    $1352 = $1351 & 1;
    if ($1352) {
     break L66;
    }
    $1353 = SAFE_HEAP_LOAD($1350 | 0, 4, 0) | 0 | 0;
    $249 = $650;
    $250 = $1353;
    $1354 = $249;
    $1355 = SAFE_HEAP_LOAD($1354 | 0, 4, 0) | 0 | 0;
    $1356 = $250;
    $1357 = $1355 + ($1356 * 12 | 0) | 0;
    $1358 = $658;
    __THREW__ = 0;
    $1359 = invoke_iii(34, $1358 | 0, 0) | 0;
    $1360 = __THREW__;
    __THREW__ = 0;
    $1361 = $1360 & 1;
    if ($1361) {
     break L66;
    }
    $1362 = SAFE_HEAP_LOAD($1359 | 0, 4, 0) | 0 | 0;
    $247 = $650;
    $248 = $1362;
    $1363 = $247;
    $1364 = SAFE_HEAP_LOAD($1363 | 0, 4, 0) | 0 | 0;
    $1365 = $248;
    $1366 = $1364 + ($1365 * 12 | 0) | 0;
    __THREW__ = 0;
    invoke_viii(37, $673 | 0, $1357 | 0, $1366 | 0);
    $1367 = __THREW__;
    __THREW__ = 0;
    $1368 = $1367 & 1;
    if ($1368) {
     break L66;
    }
    __THREW__ = 0;
    invoke_vii(38, $672 | 0, $673 | 0);
    $1369 = __THREW__;
    __THREW__ = 0;
    $1370 = $1369 & 1;
    if ($1370) {
     break L66;
    }
    __THREW__ = 0;
    invoke_vii(39, $671 | 0, $672 | 0);
    $1371 = __THREW__;
    __THREW__ = 0;
    $1372 = $1371 & 1;
    if ($1372) {
     break L66;
    }
    __THREW__ = 0;
    {}
    SAFE_HEAP_STORE($$byval_copy6 >> 0 | 0, SAFE_HEAP_LOAD($674 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
    invoke_viii(40, $670 | 0, $671 | 0, $$byval_copy6 | 0);
    $1373 = __THREW__;
    __THREW__ = 0;
    $1374 = $1373 & 1;
    if ($1374) {
     break L66;
    }
    $241 = $652;
    $242 = $670;
    $1375 = $241;
    $1376 = $1375 + 4 | 0;
    $1377 = SAFE_HEAP_LOAD($1376 | 0, 4, 0) | 0 | 0;
    $240 = $1375;
    $1378 = $240;
    $1379 = $1378 + 8 | 0;
    $239 = $1379;
    $1380 = $239;
    $238 = $1380;
    $1381 = $238;
    $1382 = SAFE_HEAP_LOAD($1381 | 0, 4, 0) | 0 | 0;
    $1383 = $1377 >>> 0 < $1382 >>> 0;
    if ($1383) {
     $235 = $243;
     $236 = $1375;
     $237 = 1;
     $218 = $1375;
     $1384 = $218;
     $1385 = $1384 + 8 | 0;
     $217 = $1385;
     $1386 = $217;
     $216 = $1386;
     $1387 = $216;
     $1388 = $1375 + 4 | 0;
     $1389 = SAFE_HEAP_LOAD($1388 | 0, 4, 0) | 0 | 0;
     $214 = $1389;
     $1390 = $214;
     $1391 = $242;
     $215 = $1391;
     $1392 = $215;
     $229 = $1387;
     $230 = $1390;
     $231 = $1392;
     $1393 = $229;
     $1394 = $230;
     $1395 = $231;
     $228 = $1395;
     $1396 = $228;
     {}
     SAFE_HEAP_STORE($227 >> 0 | 0, SAFE_HEAP_LOAD($232 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
     $224 = $1393;
     $225 = $1394;
     $226 = $1396;
     $1397 = $224;
     $1398 = $225;
     $1399 = $226;
     $223 = $1399;
     $1400 = $223;
     $220 = $1397;
     $221 = $1398;
     $222 = $1400;
     $1401 = $221;
     $1402 = $222;
     $219 = $1402;
     $1403 = $219;
     __ZN5Eigen5ArrayIfLi3ELi1ELi0ELi3ELi1EEC2EOS1_($1401, $1403);
     $233 = $243;
     $1404 = $1375 + 4 | 0;
     $1405 = SAFE_HEAP_LOAD($1404 | 0, 4, 0) | 0 | 0;
     $1406 = $1405 + 12 | 0;
     SAFE_HEAP_STORE($1404 | 0, $1406 | 0, 4);
    } else {
     $1407 = $242;
     $234 = $1407;
     $1408 = $234;
     __THREW__ = 0;
     invoke_vii(41, $1375 | 0, $1408 | 0);
     $1409 = __THREW__;
     __THREW__ = 0;
     $1410 = $1409 & 1;
     if ($1410) {
      break L66;
     }
    }
    $1411 = $659;
    $1412 = $1411 + 0 | 0;
    SAFE_HEAP_STORE($675 | 0, $1412 | 0, 4);
    $1413 = $659;
    $1414 = $1413 + 3 | 0;
    SAFE_HEAP_STORE($676 | 0, $1414 | 0, 4);
    $1415 = $659;
    $1416 = $1415 + 5 | 0;
    SAFE_HEAP_STORE($677 | 0, $1416 | 0, 4);
    $209 = $653;
    $210 = $675;
    $211 = $676;
    $212 = $677;
    $1417 = $209;
    $1418 = $1417 + 4 | 0;
    $1419 = SAFE_HEAP_LOAD($1418 | 0, 4, 0) | 0 | 0;
    $208 = $1417;
    $1420 = $208;
    $1421 = $1420 + 8 | 0;
    $207 = $1421;
    $1422 = $207;
    $206 = $1422;
    $1423 = $206;
    $1424 = SAFE_HEAP_LOAD($1423 | 0, 4, 0) | 0 | 0;
    $1425 = $1419 >>> 0 < $1424 >>> 0;
    if ($1425) {
     $203 = $213;
     $204 = $1417;
     $205 = 1;
     $172 = $1417;
     $1426 = $172;
     $1427 = $1426 + 8 | 0;
     $171 = $1427;
     $1428 = $171;
     $170 = $1428;
     $1429 = $170;
     $1430 = $1417 + 4 | 0;
     $1431 = SAFE_HEAP_LOAD($1430 | 0, 4, 0) | 0 | 0;
     $166 = $1431;
     $1432 = $166;
     $1433 = $210;
     $167 = $1433;
     $1434 = $167;
     $1435 = $211;
     $168 = $1435;
     $1436 = $168;
     $1437 = $212;
     $169 = $1437;
     $1438 = $169;
     $193 = $1429;
     $194 = $1432;
     $195 = $1434;
     $196 = $1436;
     $197 = $1438;
     $1439 = $193;
     $1440 = $194;
     $1441 = $195;
     $192 = $1441;
     $1442 = $192;
     $1443 = $196;
     $174 = $1443;
     $1444 = $174;
     $1445 = $197;
     $173 = $1445;
     $1446 = $173;
     {}
     SAFE_HEAP_STORE($191 >> 0 | 0, SAFE_HEAP_LOAD($198 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
     $186 = $1439;
     $187 = $1440;
     $188 = $1442;
     $189 = $1444;
     $190 = $1446;
     $1447 = $186;
     $1448 = $187;
     $1449 = $188;
     $185 = $1449;
     $1450 = $185;
     $1451 = $189;
     $176 = $1451;
     $1452 = $176;
     $1453 = $190;
     $175 = $1453;
     $1454 = $175;
     $180 = $1447;
     $181 = $1448;
     $182 = $1450;
     $183 = $1452;
     $184 = $1454;
     $1455 = $181;
     $1456 = $182;
     $179 = $1456;
     $1457 = $179;
     $1458 = $183;
     $178 = $1458;
     $1459 = $178;
     $1460 = $184;
     $177 = $1460;
     $1461 = $177;
     __THREW__ = 0;
     invoke_viiii(28, $1455 | 0, $1457 | 0, $1459 | 0, $1461 | 0);
     $1462 = __THREW__;
     __THREW__ = 0;
     $1463 = $1462 & 1;
     if ($1463) {
      break L66;
     }
     $199 = $213;
     $1464 = $1417 + 4 | 0;
     $1465 = SAFE_HEAP_LOAD($1464 | 0, 4, 0) | 0 | 0;
     $1466 = $1465 + 12 | 0;
     SAFE_HEAP_STORE($1464 | 0, $1466 | 0, 4);
    } else {
     $1467 = $210;
     $200 = $1467;
     $1468 = $200;
     $1469 = $211;
     $201 = $1469;
     $1470 = $201;
     $1471 = $212;
     $202 = $1471;
     $1472 = $202;
     __THREW__ = 0;
     invoke_viiii(42, $1417 | 0, $1468 | 0, $1470 | 0, $1472 | 0);
     $1473 = __THREW__;
     __THREW__ = 0;
     $1474 = $1473 & 1;
     if ($1474) {
      break L66;
     }
    }
    $1475 = $659;
    $1476 = $1475 + 3 | 0;
    SAFE_HEAP_STORE($678 | 0, $1476 | 0, 4);
    $1477 = $659;
    $1478 = $1477 + 4 | 0;
    SAFE_HEAP_STORE($679 | 0, $1478 | 0, 4);
    $1479 = $659;
    $1480 = $1479 + 5 | 0;
    SAFE_HEAP_STORE($680 | 0, $1480 | 0, 4);
    $161 = $653;
    $162 = $678;
    $163 = $679;
    $164 = $680;
    $1481 = $161;
    $1482 = $1481 + 4 | 0;
    $1483 = SAFE_HEAP_LOAD($1482 | 0, 4, 0) | 0 | 0;
    $160 = $1481;
    $1484 = $160;
    $1485 = $1484 + 8 | 0;
    $159 = $1485;
    $1486 = $159;
    $158 = $1486;
    $1487 = $158;
    $1488 = SAFE_HEAP_LOAD($1487 | 0, 4, 0) | 0 | 0;
    $1489 = $1483 >>> 0 < $1488 >>> 0;
    if ($1489) {
     $155 = $165;
     $156 = $1481;
     $157 = 1;
     $124 = $1481;
     $1490 = $124;
     $1491 = $1490 + 8 | 0;
     $123 = $1491;
     $1492 = $123;
     $122 = $1492;
     $1493 = $122;
     $1494 = $1481 + 4 | 0;
     $1495 = SAFE_HEAP_LOAD($1494 | 0, 4, 0) | 0 | 0;
     $118 = $1495;
     $1496 = $118;
     $1497 = $162;
     $119 = $1497;
     $1498 = $119;
     $1499 = $163;
     $120 = $1499;
     $1500 = $120;
     $1501 = $164;
     $121 = $1501;
     $1502 = $121;
     $145 = $1493;
     $146 = $1496;
     $147 = $1498;
     $148 = $1500;
     $149 = $1502;
     $1503 = $145;
     $1504 = $146;
     $1505 = $147;
     $144 = $1505;
     $1506 = $144;
     $1507 = $148;
     $126 = $1507;
     $1508 = $126;
     $1509 = $149;
     $125 = $1509;
     $1510 = $125;
     {}
     SAFE_HEAP_STORE($143 >> 0 | 0, SAFE_HEAP_LOAD($150 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
     $138 = $1503;
     $139 = $1504;
     $140 = $1506;
     $141 = $1508;
     $142 = $1510;
     $1511 = $138;
     $1512 = $139;
     $1513 = $140;
     $137 = $1513;
     $1514 = $137;
     $1515 = $141;
     $128 = $1515;
     $1516 = $128;
     $1517 = $142;
     $127 = $1517;
     $1518 = $127;
     $132 = $1511;
     $133 = $1512;
     $134 = $1514;
     $135 = $1516;
     $136 = $1518;
     $1519 = $133;
     $1520 = $134;
     $131 = $1520;
     $1521 = $131;
     $1522 = $135;
     $130 = $1522;
     $1523 = $130;
     $1524 = $136;
     $129 = $1524;
     $1525 = $129;
     __THREW__ = 0;
     invoke_viiii(28, $1519 | 0, $1521 | 0, $1523 | 0, $1525 | 0);
     $1526 = __THREW__;
     __THREW__ = 0;
     $1527 = $1526 & 1;
     if ($1527) {
      break L66;
     }
     $151 = $165;
     $1528 = $1481 + 4 | 0;
     $1529 = SAFE_HEAP_LOAD($1528 | 0, 4, 0) | 0 | 0;
     $1530 = $1529 + 12 | 0;
     SAFE_HEAP_STORE($1528 | 0, $1530 | 0, 4);
    } else {
     $1531 = $162;
     $152 = $1531;
     $1532 = $152;
     $1533 = $163;
     $153 = $1533;
     $1534 = $153;
     $1535 = $164;
     $154 = $1535;
     $1536 = $154;
     __THREW__ = 0;
     invoke_viiii(42, $1481 | 0, $1532 | 0, $1534 | 0, $1536 | 0);
     $1537 = __THREW__;
     __THREW__ = 0;
     $1538 = $1537 & 1;
     if ($1538) {
      break L66;
     }
    }
    $1539 = $659;
    $1540 = $1539 + 3 | 0;
    SAFE_HEAP_STORE($681 | 0, $1540 | 0, 4);
    $1541 = $659;
    $1542 = $1541 + 1 | 0;
    SAFE_HEAP_STORE($682 | 0, $1542 | 0, 4);
    $1543 = $659;
    $1544 = $1543 + 4 | 0;
    SAFE_HEAP_STORE($683 | 0, $1544 | 0, 4);
    $113 = $653;
    $114 = $681;
    $115 = $682;
    $116 = $683;
    $1545 = $113;
    $1546 = $1545 + 4 | 0;
    $1547 = SAFE_HEAP_LOAD($1546 | 0, 4, 0) | 0 | 0;
    $112 = $1545;
    $1548 = $112;
    $1549 = $1548 + 8 | 0;
    $111 = $1549;
    $1550 = $111;
    $110 = $1550;
    $1551 = $110;
    $1552 = SAFE_HEAP_LOAD($1551 | 0, 4, 0) | 0 | 0;
    $1553 = $1547 >>> 0 < $1552 >>> 0;
    if ($1553) {
     $107 = $117;
     $108 = $1545;
     $109 = 1;
     $76 = $1545;
     $1554 = $76;
     $1555 = $1554 + 8 | 0;
     $75 = $1555;
     $1556 = $75;
     $74 = $1556;
     $1557 = $74;
     $1558 = $1545 + 4 | 0;
     $1559 = SAFE_HEAP_LOAD($1558 | 0, 4, 0) | 0 | 0;
     $70 = $1559;
     $1560 = $70;
     $1561 = $114;
     $71 = $1561;
     $1562 = $71;
     $1563 = $115;
     $72 = $1563;
     $1564 = $72;
     $1565 = $116;
     $73 = $1565;
     $1566 = $73;
     $97 = $1557;
     $98 = $1560;
     $99 = $1562;
     $100 = $1564;
     $101 = $1566;
     $1567 = $97;
     $1568 = $98;
     $1569 = $99;
     $96 = $1569;
     $1570 = $96;
     $1571 = $100;
     $78 = $1571;
     $1572 = $78;
     $1573 = $101;
     $77 = $1573;
     $1574 = $77;
     {}
     SAFE_HEAP_STORE($95 >> 0 | 0, SAFE_HEAP_LOAD($102 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
     $90 = $1567;
     $91 = $1568;
     $92 = $1570;
     $93 = $1572;
     $94 = $1574;
     $1575 = $90;
     $1576 = $91;
     $1577 = $92;
     $89 = $1577;
     $1578 = $89;
     $1579 = $93;
     $80 = $1579;
     $1580 = $80;
     $1581 = $94;
     $79 = $1581;
     $1582 = $79;
     $84 = $1575;
     $85 = $1576;
     $86 = $1578;
     $87 = $1580;
     $88 = $1582;
     $1583 = $85;
     $1584 = $86;
     $83 = $1584;
     $1585 = $83;
     $1586 = $87;
     $82 = $1586;
     $1587 = $82;
     $1588 = $88;
     $81 = $1588;
     $1589 = $81;
     __THREW__ = 0;
     invoke_viiii(28, $1583 | 0, $1585 | 0, $1587 | 0, $1589 | 0);
     $1590 = __THREW__;
     __THREW__ = 0;
     $1591 = $1590 & 1;
     if ($1591) {
      break L66;
     }
     $103 = $117;
     $1592 = $1545 + 4 | 0;
     $1593 = SAFE_HEAP_LOAD($1592 | 0, 4, 0) | 0 | 0;
     $1594 = $1593 + 12 | 0;
     SAFE_HEAP_STORE($1592 | 0, $1594 | 0, 4);
    } else {
     $1595 = $114;
     $104 = $1595;
     $1596 = $104;
     $1597 = $115;
     $105 = $1597;
     $1598 = $105;
     $1599 = $116;
     $106 = $1599;
     $1600 = $106;
     __THREW__ = 0;
     invoke_viiii(42, $1545 | 0, $1596 | 0, $1598 | 0, $1600 | 0);
     $1601 = __THREW__;
     __THREW__ = 0;
     $1602 = $1601 & 1;
     if ($1602) {
      break L66;
     }
    }
    $1603 = $659;
    $1604 = $1603 + 5 | 0;
    SAFE_HEAP_STORE($684 | 0, $1604 | 0, 4);
    $1605 = $659;
    $1606 = $1605 + 4 | 0;
    SAFE_HEAP_STORE($685 | 0, $1606 | 0, 4);
    $1607 = $659;
    $1608 = $1607 + 2 | 0;
    SAFE_HEAP_STORE($686 | 0, $1608 | 0, 4);
    $65 = $653;
    $66 = $684;
    $67 = $685;
    $68 = $686;
    $1609 = $65;
    $1610 = $1609 + 4 | 0;
    $1611 = SAFE_HEAP_LOAD($1610 | 0, 4, 0) | 0 | 0;
    $64 = $1609;
    $1612 = $64;
    $1613 = $1612 + 8 | 0;
    $63 = $1613;
    $1614 = $63;
    $62 = $1614;
    $1615 = $62;
    $1616 = SAFE_HEAP_LOAD($1615 | 0, 4, 0) | 0 | 0;
    $1617 = $1611 >>> 0 < $1616 >>> 0;
    if ($1617) {
     $59 = $69;
     $60 = $1609;
     $61 = 1;
     $28 = $1609;
     $1618 = $28;
     $1619 = $1618 + 8 | 0;
     $27 = $1619;
     $1620 = $27;
     $26 = $1620;
     $1621 = $26;
     $1622 = $1609 + 4 | 0;
     $1623 = SAFE_HEAP_LOAD($1622 | 0, 4, 0) | 0 | 0;
     $22 = $1623;
     $1624 = $22;
     $1625 = $66;
     $23 = $1625;
     $1626 = $23;
     $1627 = $67;
     $24 = $1627;
     $1628 = $24;
     $1629 = $68;
     $25 = $1629;
     $1630 = $25;
     $49 = $1621;
     $50 = $1624;
     $51 = $1626;
     $52 = $1628;
     $53 = $1630;
     $1631 = $49;
     $1632 = $50;
     $1633 = $51;
     $48 = $1633;
     $1634 = $48;
     $1635 = $52;
     $30 = $1635;
     $1636 = $30;
     $1637 = $53;
     $29 = $1637;
     $1638 = $29;
     {}
     SAFE_HEAP_STORE($47 >> 0 | 0, SAFE_HEAP_LOAD($54 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
     $42 = $1631;
     $43 = $1632;
     $44 = $1634;
     $45 = $1636;
     $46 = $1638;
     $1639 = $42;
     $1640 = $43;
     $1641 = $44;
     $41 = $1641;
     $1642 = $41;
     $1643 = $45;
     $32 = $1643;
     $1644 = $32;
     $1645 = $46;
     $31 = $1645;
     $1646 = $31;
     $36 = $1639;
     $37 = $1640;
     $38 = $1642;
     $39 = $1644;
     $40 = $1646;
     $1647 = $37;
     $1648 = $38;
     $35 = $1648;
     $1649 = $35;
     $1650 = $39;
     $34 = $1650;
     $1651 = $34;
     $1652 = $40;
     $33 = $1652;
     $1653 = $33;
     __THREW__ = 0;
     invoke_viiii(28, $1647 | 0, $1649 | 0, $1651 | 0, $1653 | 0);
     $1654 = __THREW__;
     __THREW__ = 0;
     $1655 = $1654 & 1;
     if ($1655) {
      break L66;
     }
     $55 = $69;
     $1656 = $1609 + 4 | 0;
     $1657 = SAFE_HEAP_LOAD($1656 | 0, 4, 0) | 0 | 0;
     $1658 = $1657 + 12 | 0;
     SAFE_HEAP_STORE($1656 | 0, $1658 | 0, 4);
    } else {
     $1659 = $66;
     $56 = $1659;
     $1660 = $56;
     $1661 = $67;
     $57 = $1661;
     $1662 = $57;
     $1663 = $68;
     $58 = $1663;
     $1664 = $58;
     __THREW__ = 0;
     invoke_viiii(42, $1609 | 0, $1660 | 0, $1662 | 0, $1664 | 0);
     $1665 = __THREW__;
     __THREW__ = 0;
     $1666 = $1665 & 1;
     if ($1666) {
      break L66;
     }
    }
    $21 = $656;
    $1667 = $21;
    $1668 = SAFE_HEAP_LOAD($1667 | 0, 4, 0) | 0 | 0;
    $1669 = $1668 + 12 | 0;
    SAFE_HEAP_STORE($1667 | 0, $1669 | 0, 4);
   }
   $19 = $651;
   $20 = $653;
   $1678 = $19;
   $1679 = $20;
   __ZNSt3__26vectorIN5Eigen5ArrayIjLi3ELi1ELi0ELi3ELi1EEENS_9allocatorIS3_EEE4swapERS6_($1678, $1679);
   $17 = $650;
   $18 = $652;
   $1680 = $17;
   $1681 = $18;
   __ZNSt3__26vectorIN5Eigen5ArrayIfLi3ELi1ELi0ELi3ELi1EEENS_9allocatorIS3_EEE4swapERS6_($1680, $1681);
   $1682 = $654;
   $1683 = $1682 + 1 | 0;
   $654 = $1683;
  }
  L151 : do {
   if ((label | 0) == 126) {
    $1684 = $571;
    $1685 = $1684 + 36 | 0;
    $1686 = SAFE_HEAP_LOAD($1685 | 0, 4, 0) | 0 | 0;
    dest = $1686;
    stop = dest + 48 | 0;
    do {
     SAFE_HEAP_STORE(dest | 0, 0 | 0 | 0, 4);
     dest = dest + 4 | 0;
    } while ((dest | 0) < (stop | 0));
    __ZN5flint8geometry12SphereBufferILj3EfEC2Ev($1686);
    $687 = $1686;
    $1687 = $571;
    $1688 = $1687 + 40 | 0;
    $15 = $689;
    $16 = $1688;
    __THREW__ = 0;
    invoke_viii(43, $688 | 0, $651 | 0, $689 | 0);
    $1689 = __THREW__;
    __THREW__ = 0;
    $1690 = $1689 & 1;
    if (!$1690) {
     $1691 = $687;
     $12 = $1691;
     $13 = $688;
     $1692 = $12;
     $1693 = $13;
     {}
     SAFE_HEAP_STORE($$byval_copy7 >> 0 | 0, SAFE_HEAP_LOAD($14 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
     __ZNSt3__26vectorIN5Eigen5ArrayIjLi3ELi1ELi0ELi3ELi1EEENS_9allocatorIS3_EEE13__move_assignERS6_NS_17integral_constantIbLb1EEE($1692, $1693, $$byval_copy7);
     __ZNSt3__26vectorIN5Eigen5ArrayIjLi3ELi1ELi0ELi3ELi1EEENS_9allocatorIS3_EEED2Ev($688);
     $1694 = $571;
     $1695 = $1694 + 40 | 0;
     $10 = $691;
     $11 = $1695;
     __THREW__ = 0;
     invoke_viii(44, $690 | 0, $650 | 0, $691 | 0);
     $1696 = __THREW__;
     __THREW__ = 0;
     $1697 = $1696 & 1;
     if (!$1697) {
      $1698 = $687;
      $1699 = $1698 + 24 | 0;
      $7 = $1699;
      $8 = $690;
      $1700 = $7;
      $1701 = $8;
      {}
      SAFE_HEAP_STORE($$byval_copy8 >> 0 | 0, SAFE_HEAP_LOAD($9 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
      __ZNSt3__26vectorIN5Eigen5ArrayIfLi3ELi1ELi0ELi3ELi1EEENS_9allocatorIS3_EEE13__move_assignERS6_NS_17integral_constantIbLb1EEE($1700, $1701, $$byval_copy8);
      __ZNSt3__26vectorIN5Eigen5ArrayIfLi3ELi1ELi0ELi3ELi1EEENS_9allocatorIS3_EEED2Ev($690);
      $6 = $650;
      $1702 = $6;
      $1703 = $1702 + 4 | 0;
      $1704 = SAFE_HEAP_LOAD($1703 | 0, 4, 0) | 0 | 0;
      $1705 = SAFE_HEAP_LOAD($1702 | 0, 4, 0) | 0 | 0;
      $1706 = $1704;
      $1707 = $1705;
      $1708 = $1706 - $1707 | 0;
      $1709 = ($1708 | 0) / 12 & -1;
      $1710 = $571;
      $1711 = $1710 + 40 | 0;
      $4 = $693;
      $5 = $1711;
      __THREW__ = 0;
      invoke_viii(45, $692 | 0, $1709 | 0, $693 | 0);
      $1712 = __THREW__;
      __THREW__ = 0;
      $1713 = $1712 & 1;
      if (!$1713) {
       $1714 = $687;
       $1715 = $1714 + 12 | 0;
       $1 = $1715;
       $2 = $692;
       $1716 = $1;
       $1717 = $2;
       {}
       SAFE_HEAP_STORE($$byval_copy9 >> 0 | 0, SAFE_HEAP_LOAD($3 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
       __ZNSt3__26vectorIN5Eigen5ArrayIfLi3ELi1ELi0ELi3ELi1EEENS_9allocatorIS3_EEE13__move_assignERS6_NS_17integral_constantIbLb1EEE($1716, $1717, $$byval_copy9);
       __ZNSt3__26vectorIN5Eigen5ArrayIfLi3ELi1ELi0ELi3ELi1EEENS_9allocatorIS3_EEED2Ev($692);
       $694 = 0;
       while (1) {
        $1718 = $694;
        $244 = $650;
        $1719 = $244;
        $1720 = $1719 + 4 | 0;
        $1721 = SAFE_HEAP_LOAD($1720 | 0, 4, 0) | 0 | 0;
        $1722 = SAFE_HEAP_LOAD($1719 | 0, 4, 0) | 0 | 0;
        $1723 = $1721;
        $1724 = $1722;
        $1725 = $1723 - $1724 | 0;
        $1726 = ($1725 | 0) / 12 & -1;
        $1727 = $1718 >>> 0 < $1726 >>> 0;
        if (!$1727) {
         break;
        }
        $1728 = $694;
        $245 = $650;
        $246 = $1728;
        $1729 = $245;
        $1730 = SAFE_HEAP_LOAD($1729 | 0, 4, 0) | 0 | 0;
        $1731 = $246;
        $1732 = $1730 + ($1731 * 12 | 0) | 0;
        $1733 = $571;
        __THREW__ = 0;
        $1734 = +invoke_di(46, $1733 | 0);
        $1735 = __THREW__;
        __THREW__ = 0;
        $1736 = $1735 & 1;
        if ($1736) {
         break L151;
        }
        SAFE_HEAP_STORE_D($696 | 0, +$1734, 4);
        __THREW__ = 0;
        invoke_viii(47, $697 | 0, $1732 | 0, $696 | 0);
        $1737 = __THREW__;
        __THREW__ = 0;
        $1738 = $1737 & 1;
        if ($1738) {
         break L151;
        }
        $1739 = $571;
        __THREW__ = 0;
        $1740 = invoke_ii(48, $1739 | 0) | 0;
        $1741 = __THREW__;
        __THREW__ = 0;
        $1742 = $1741 & 1;
        if ($1742) {
         break L151;
        }
        __THREW__ = 0;
        invoke_viii(49, $695 | 0, $697 | 0, $1740 | 0);
        $1743 = __THREW__;
        __THREW__ = 0;
        $1744 = $1743 & 1;
        if ($1744) {
         break L151;
        }
        $1745 = $687;
        $1746 = $1745 + 12 | 0;
        $1747 = $694;
        $409 = $1746;
        $410 = $1747;
        $1748 = $409;
        $1749 = SAFE_HEAP_LOAD($1748 | 0, 4, 0) | 0 | 0;
        $1750 = $410;
        $1751 = $1749 + ($1750 * 12 | 0) | 0;
        __THREW__ = 0;
        invoke_iii(50, $1751 | 0, $695 | 0) | 0;
        $1752 = __THREW__;
        __THREW__ = 0;
        $1753 = $1752 & 1;
        if ($1753) {
         break L151;
        }
        $1754 = $694;
        $1755 = $1754 + 1 | 0;
        $694 = $1755;
       }
       __ZNSt3__26vectorIN5Eigen5ArrayIjLi3ELi1ELi0ELi3ELi1EEENS_9allocatorIS3_EEED2Ev($653);
       __ZNSt3__26vectorIN5Eigen5ArrayIfLi3ELi1ELi0ELi3ELi1EEENS_9allocatorIS3_EEED2Ev($652);
       __ZNSt3__26vectorIN5Eigen5ArrayIjLi3ELi1ELi0ELi3ELi1EEENS_9allocatorIS3_EEED2Ev($651);
       __ZNSt3__26vectorIN5Eigen5ArrayIfLi3ELi1ELi0ELi3ELi1EEENS_9allocatorIS3_EEED2Ev($650);
       STACKTOP = sp;
       return;
      }
     }
    }
   }
  } while (0);
  $1676 = ___cxa_find_matching_catch_2() | 0;
  $1677 = tempRet0;
  $575 = $1676;
  $576 = $1677;
  __ZNSt3__26vectorIN5Eigen5ArrayIjLi3ELi1ELi0ELi3ELi1EEENS_9allocatorIS3_EEED2Ev($653);
  __ZNSt3__26vectorIN5Eigen5ArrayIfLi3ELi1ELi0ELi3ELi1EEENS_9allocatorIS3_EEED2Ev($652);
  __ZNSt3__26vectorIN5Eigen5ArrayIjLi3ELi1ELi0ELi3ELi1EEENS_9allocatorIS3_EEED2Ev($651);
 }
 __ZNSt3__26vectorIN5Eigen5ArrayIfLi3ELi1ELi0ELi3ELi1EEENS_9allocatorIS3_EEED2Ev($650);
 $1756 = $575;
 $1757 = $576;
 ___resumeException($1756 | 0);
}
function _malloc($0) {
 $0 = $0 | 0;
 var $$$0192$i = 0, $$$0193$i = 0, $$$4236$i = 0, $$$4351$i = 0, $$$i = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i18$i = 0, $$01$i$i = 0, $$0189$i = 0, $$0192$lcssa$i = 0, $$01928$i = 0, $$0193$lcssa$i = 0, $$01937$i = 0, $$0197 = 0, $$0199 = 0, $$0206$i$i = 0, $$0207$i$i = 0, $$0211$i$i = 0;
 var $$0212$i$i = 0, $$024371$i = 0, $$0287$i$i = 0, $$0288$i$i = 0, $$0289$i$i = 0, $$0295$i$i = 0, $$0296$i$i = 0, $$0342$i = 0, $$0344$i = 0, $$0345$i = 0, $$0347$i = 0, $$0353$i = 0, $$0358$i = 0, $$0359$$i = 0, $$0359$i = 0, $$0361$i = 0, $$0362$i = 0, $$0368$i = 0, $$1196$i = 0, $$1198$i = 0;
 var $$124470$i = 0, $$1291$i$i = 0, $$1293$i$i = 0, $$1343$i = 0, $$1348$i = 0, $$1363$i = 0, $$1370$i = 0, $$1374$i = 0, $$2234253237$i = 0, $$2247$ph$i = 0, $$2253$ph$i = 0, $$2355$i = 0, $$3$i = 0, $$3$i$i = 0, $$3$i201 = 0, $$3350$i = 0, $$3372$i = 0, $$4$lcssa$i = 0, $$4$ph$i = 0, $$415$i = 0;
 var $$4236$i = 0, $$4351$lcssa$i = 0, $$435114$i = 0, $$4357$$4$i = 0, $$4357$ph$i = 0, $$435713$i = 0, $$723948$i = 0, $$749$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i19$i = 0, $$pre$i210 = 0, $$pre$i212 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i20$iZ2D = 0, $$pre$phi$i211Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi11$i$iZ2D = 0, $$pre$phiZ2D = 0;
 var $$pre10$i$i = 0, $$sink1$i = 0, $$sink1$i$i = 0, $$sink16$i = 0, $$sink2$i = 0, $$sink2$i204 = 0, $$sink3$i = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0;
 var $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0;
 var $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0;
 var $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
 var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0;
 var $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0;
 var $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0;
 var $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0;
 var $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0;
 var $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0;
 var $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0;
 var $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0;
 var $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0;
 var $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0;
 var $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0;
 var $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0;
 var $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0;
 var $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0;
 var $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0;
 var $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0;
 var $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0;
 var $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0;
 var $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0;
 var $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0;
 var $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0;
 var $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0;
 var $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0;
 var $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0;
 var $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0;
 var $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0;
 var $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0;
 var $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0;
 var $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0;
 var $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0;
 var $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0;
 var $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0;
 var $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0;
 var $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0;
 var $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0;
 var $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0;
 var $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0;
 var $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0;
 var $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0;
 var $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i208 = 0, $exitcond$i$i = 0, $not$$i = 0, $not$$i$i = 0, $not$$i17$i = 0, $not$$i209 = 0, $not$$i216 = 0, $not$1$i = 0, $not$1$i203 = 0, $not$5$i = 0, $not$7$i$i = 0, $not$8$i = 0, $not$9$i = 0;
 var $or$cond$i = 0, $or$cond$i214 = 0, $or$cond1$i = 0, $or$cond10$i = 0, $or$cond11$i = 0, $or$cond11$not$i = 0, $or$cond12$i = 0, $or$cond2$i = 0, $or$cond2$i215 = 0, $or$cond5$i = 0, $or$cond50$i = 0, $or$cond51$i = 0, $or$cond7$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = sp;
 $2 = $0 >>> 0 < 245;
 do {
  if ($2) {
   $3 = $0 >>> 0 < 11;
   $4 = $0 + 11 | 0;
   $5 = $4 & -8;
   $6 = $3 ? 16 : $5;
   $7 = $6 >>> 3;
   $8 = SAFE_HEAP_LOAD(1427 * 4 | 0, 4, 0) | 0 | 0;
   $9 = $8 >>> $7;
   $10 = $9 & 3;
   $11 = ($10 | 0) == 0;
   if (!$11) {
    $12 = $9 & 1;
    $13 = $12 ^ 1;
    $14 = $13 + $7 | 0;
    $15 = $14 << 1;
    $16 = 5748 + ($15 << 2) | 0;
    $17 = $16 + 8 | 0;
    $18 = SAFE_HEAP_LOAD($17 | 0, 4, 0) | 0 | 0;
    $19 = $18 + 8 | 0;
    $20 = SAFE_HEAP_LOAD($19 | 0, 4, 0) | 0 | 0;
    $21 = ($16 | 0) == ($20 | 0);
    do {
     if ($21) {
      $22 = 1 << $14;
      $23 = $22 ^ -1;
      $24 = $8 & $23;
      SAFE_HEAP_STORE(1427 * 4 | 0, $24 | 0, 4);
     } else {
      $25 = SAFE_HEAP_LOAD(5724 | 0, 4, 0) | 0 | 0;
      $26 = $20 >>> 0 < $25 >>> 0;
      if ($26) {
       _abort();
      }
      $27 = $20 + 12 | 0;
      $28 = SAFE_HEAP_LOAD($27 | 0, 4, 0) | 0 | 0;
      $29 = ($28 | 0) == ($18 | 0);
      if ($29) {
       SAFE_HEAP_STORE($27 | 0, $16 | 0, 4);
       SAFE_HEAP_STORE($17 | 0, $20 | 0, 4);
       break;
      } else {
       _abort();
      }
     }
    } while (0);
    $30 = $14 << 3;
    $31 = $30 | 3;
    $32 = $18 + 4 | 0;
    SAFE_HEAP_STORE($32 | 0, $31 | 0, 4);
    $33 = $18 + $30 | 0;
    $34 = $33 + 4 | 0;
    $35 = SAFE_HEAP_LOAD($34 | 0, 4, 0) | 0 | 0;
    $36 = $35 | 1;
    SAFE_HEAP_STORE($34 | 0, $36 | 0, 4);
    $$0 = $19;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $37 = SAFE_HEAP_LOAD(5716 | 0, 4, 0) | 0 | 0;
   $38 = $6 >>> 0 > $37 >>> 0;
   if ($38) {
    $39 = ($9 | 0) == 0;
    if (!$39) {
     $40 = $9 << $7;
     $41 = 2 << $7;
     $42 = 0 - $41 | 0;
     $43 = $41 | $42;
     $44 = $40 & $43;
     $45 = 0 - $44 | 0;
     $46 = $44 & $45;
     $47 = $46 + -1 | 0;
     $48 = $47 >>> 12;
     $49 = $48 & 16;
     $50 = $47 >>> $49;
     $51 = $50 >>> 5;
     $52 = $51 & 8;
     $53 = $52 | $49;
     $54 = $50 >>> $52;
     $55 = $54 >>> 2;
     $56 = $55 & 4;
     $57 = $53 | $56;
     $58 = $54 >>> $56;
     $59 = $58 >>> 1;
     $60 = $59 & 2;
     $61 = $57 | $60;
     $62 = $58 >>> $60;
     $63 = $62 >>> 1;
     $64 = $63 & 1;
     $65 = $61 | $64;
     $66 = $62 >>> $64;
     $67 = $65 + $66 | 0;
     $68 = $67 << 1;
     $69 = 5748 + ($68 << 2) | 0;
     $70 = $69 + 8 | 0;
     $71 = SAFE_HEAP_LOAD($70 | 0, 4, 0) | 0 | 0;
     $72 = $71 + 8 | 0;
     $73 = SAFE_HEAP_LOAD($72 | 0, 4, 0) | 0 | 0;
     $74 = ($69 | 0) == ($73 | 0);
     do {
      if ($74) {
       $75 = 1 << $67;
       $76 = $75 ^ -1;
       $77 = $8 & $76;
       SAFE_HEAP_STORE(1427 * 4 | 0, $77 | 0, 4);
       $98 = $77;
      } else {
       $78 = SAFE_HEAP_LOAD(5724 | 0, 4, 0) | 0 | 0;
       $79 = $73 >>> 0 < $78 >>> 0;
       if ($79) {
        _abort();
       }
       $80 = $73 + 12 | 0;
       $81 = SAFE_HEAP_LOAD($80 | 0, 4, 0) | 0 | 0;
       $82 = ($81 | 0) == ($71 | 0);
       if ($82) {
        SAFE_HEAP_STORE($80 | 0, $69 | 0, 4);
        SAFE_HEAP_STORE($70 | 0, $73 | 0, 4);
        $98 = $8;
        break;
       } else {
        _abort();
       }
      }
     } while (0);
     $83 = $67 << 3;
     $84 = $83 - $6 | 0;
     $85 = $6 | 3;
     $86 = $71 + 4 | 0;
     SAFE_HEAP_STORE($86 | 0, $85 | 0, 4);
     $87 = $71 + $6 | 0;
     $88 = $84 | 1;
     $89 = $87 + 4 | 0;
     SAFE_HEAP_STORE($89 | 0, $88 | 0, 4);
     $90 = $87 + $84 | 0;
     SAFE_HEAP_STORE($90 | 0, $84 | 0, 4);
     $91 = ($37 | 0) == 0;
     if (!$91) {
      $92 = SAFE_HEAP_LOAD(5728 | 0, 4, 0) | 0 | 0;
      $93 = $37 >>> 3;
      $94 = $93 << 1;
      $95 = 5748 + ($94 << 2) | 0;
      $96 = 1 << $93;
      $97 = $98 & $96;
      $99 = ($97 | 0) == 0;
      if ($99) {
       $100 = $98 | $96;
       SAFE_HEAP_STORE(1427 * 4 | 0, $100 | 0, 4);
       $$pre = $95 + 8 | 0;
       $$0199 = $95;
       $$pre$phiZ2D = $$pre;
      } else {
       $101 = $95 + 8 | 0;
       $102 = SAFE_HEAP_LOAD($101 | 0, 4, 0) | 0 | 0;
       $103 = SAFE_HEAP_LOAD(5724 | 0, 4, 0) | 0 | 0;
       $104 = $102 >>> 0 < $103 >>> 0;
       if ($104) {
        _abort();
       } else {
        $$0199 = $102;
        $$pre$phiZ2D = $101;
       }
      }
      SAFE_HEAP_STORE($$pre$phiZ2D | 0, $92 | 0, 4);
      $105 = $$0199 + 12 | 0;
      SAFE_HEAP_STORE($105 | 0, $92 | 0, 4);
      $106 = $92 + 8 | 0;
      SAFE_HEAP_STORE($106 | 0, $$0199 | 0, 4);
      $107 = $92 + 12 | 0;
      SAFE_HEAP_STORE($107 | 0, $95 | 0, 4);
     }
     SAFE_HEAP_STORE(5716 | 0, $84 | 0, 4);
     SAFE_HEAP_STORE(5728 | 0, $87 | 0, 4);
     $$0 = $72;
     STACKTOP = sp;
     return $$0 | 0;
    }
    $108 = SAFE_HEAP_LOAD(5712 | 0, 4, 0) | 0 | 0;
    $109 = ($108 | 0) == 0;
    if ($109) {
     $$0197 = $6;
    } else {
     $110 = 0 - $108 | 0;
     $111 = $108 & $110;
     $112 = $111 + -1 | 0;
     $113 = $112 >>> 12;
     $114 = $113 & 16;
     $115 = $112 >>> $114;
     $116 = $115 >>> 5;
     $117 = $116 & 8;
     $118 = $117 | $114;
     $119 = $115 >>> $117;
     $120 = $119 >>> 2;
     $121 = $120 & 4;
     $122 = $118 | $121;
     $123 = $119 >>> $121;
     $124 = $123 >>> 1;
     $125 = $124 & 2;
     $126 = $122 | $125;
     $127 = $123 >>> $125;
     $128 = $127 >>> 1;
     $129 = $128 & 1;
     $130 = $126 | $129;
     $131 = $127 >>> $129;
     $132 = $130 + $131 | 0;
     $133 = 6012 + ($132 << 2) | 0;
     $134 = SAFE_HEAP_LOAD($133 | 0, 4, 0) | 0 | 0;
     $135 = $134 + 4 | 0;
     $136 = SAFE_HEAP_LOAD($135 | 0, 4, 0) | 0 | 0;
     $137 = $136 & -8;
     $138 = $137 - $6 | 0;
     $139 = $134 + 16 | 0;
     $140 = SAFE_HEAP_LOAD($139 | 0, 4, 0) | 0 | 0;
     $not$5$i = ($140 | 0) == (0 | 0);
     $$sink16$i = $not$5$i & 1;
     $141 = ($134 + 16 | 0) + ($$sink16$i << 2) | 0;
     $142 = SAFE_HEAP_LOAD($141 | 0, 4, 0) | 0 | 0;
     $143 = ($142 | 0) == (0 | 0);
     if ($143) {
      $$0192$lcssa$i = $134;
      $$0193$lcssa$i = $138;
     } else {
      $$01928$i = $134;
      $$01937$i = $138;
      $145 = $142;
      while (1) {
       $144 = $145 + 4 | 0;
       $146 = SAFE_HEAP_LOAD($144 | 0, 4, 0) | 0 | 0;
       $147 = $146 & -8;
       $148 = $147 - $6 | 0;
       $149 = $148 >>> 0 < $$01937$i >>> 0;
       $$$0193$i = $149 ? $148 : $$01937$i;
       $$$0192$i = $149 ? $145 : $$01928$i;
       $150 = $145 + 16 | 0;
       $151 = SAFE_HEAP_LOAD($150 | 0, 4, 0) | 0 | 0;
       $not$$i = ($151 | 0) == (0 | 0);
       $$sink1$i = $not$$i & 1;
       $152 = ($145 + 16 | 0) + ($$sink1$i << 2) | 0;
       $153 = SAFE_HEAP_LOAD($152 | 0, 4, 0) | 0 | 0;
       $154 = ($153 | 0) == (0 | 0);
       if ($154) {
        $$0192$lcssa$i = $$$0192$i;
        $$0193$lcssa$i = $$$0193$i;
        break;
       } else {
        $$01928$i = $$$0192$i;
        $$01937$i = $$$0193$i;
        $145 = $153;
       }
      }
     }
     $155 = SAFE_HEAP_LOAD(5724 | 0, 4, 0) | 0 | 0;
     $156 = $$0192$lcssa$i >>> 0 < $155 >>> 0;
     if ($156) {
      _abort();
     }
     $157 = $$0192$lcssa$i + $6 | 0;
     $158 = $$0192$lcssa$i >>> 0 < $157 >>> 0;
     if (!$158) {
      _abort();
     }
     $159 = $$0192$lcssa$i + 24 | 0;
     $160 = SAFE_HEAP_LOAD($159 | 0, 4, 0) | 0 | 0;
     $161 = $$0192$lcssa$i + 12 | 0;
     $162 = SAFE_HEAP_LOAD($161 | 0, 4, 0) | 0 | 0;
     $163 = ($162 | 0) == ($$0192$lcssa$i | 0);
     do {
      if ($163) {
       $173 = $$0192$lcssa$i + 20 | 0;
       $174 = SAFE_HEAP_LOAD($173 | 0, 4, 0) | 0 | 0;
       $175 = ($174 | 0) == (0 | 0);
       if ($175) {
        $176 = $$0192$lcssa$i + 16 | 0;
        $177 = SAFE_HEAP_LOAD($176 | 0, 4, 0) | 0 | 0;
        $178 = ($177 | 0) == (0 | 0);
        if ($178) {
         $$3$i = 0;
         break;
        } else {
         $$1196$i = $177;
         $$1198$i = $176;
        }
       } else {
        $$1196$i = $174;
        $$1198$i = $173;
       }
       while (1) {
        $179 = $$1196$i + 20 | 0;
        $180 = SAFE_HEAP_LOAD($179 | 0, 4, 0) | 0 | 0;
        $181 = ($180 | 0) == (0 | 0);
        if (!$181) {
         $$1196$i = $180;
         $$1198$i = $179;
         continue;
        }
        $182 = $$1196$i + 16 | 0;
        $183 = SAFE_HEAP_LOAD($182 | 0, 4, 0) | 0 | 0;
        $184 = ($183 | 0) == (0 | 0);
        if ($184) {
         break;
        } else {
         $$1196$i = $183;
         $$1198$i = $182;
        }
       }
       $185 = $$1198$i >>> 0 < $155 >>> 0;
       if ($185) {
        _abort();
       } else {
        SAFE_HEAP_STORE($$1198$i | 0, 0 | 0, 4);
        $$3$i = $$1196$i;
        break;
       }
      } else {
       $164 = $$0192$lcssa$i + 8 | 0;
       $165 = SAFE_HEAP_LOAD($164 | 0, 4, 0) | 0 | 0;
       $166 = $165 >>> 0 < $155 >>> 0;
       if ($166) {
        _abort();
       }
       $167 = $165 + 12 | 0;
       $168 = SAFE_HEAP_LOAD($167 | 0, 4, 0) | 0 | 0;
       $169 = ($168 | 0) == ($$0192$lcssa$i | 0);
       if (!$169) {
        _abort();
       }
       $170 = $162 + 8 | 0;
       $171 = SAFE_HEAP_LOAD($170 | 0, 4, 0) | 0 | 0;
       $172 = ($171 | 0) == ($$0192$lcssa$i | 0);
       if ($172) {
        SAFE_HEAP_STORE($167 | 0, $162 | 0, 4);
        SAFE_HEAP_STORE($170 | 0, $165 | 0, 4);
        $$3$i = $162;
        break;
       } else {
        _abort();
       }
      }
     } while (0);
     $186 = ($160 | 0) == (0 | 0);
     L73 : do {
      if (!$186) {
       $187 = $$0192$lcssa$i + 28 | 0;
       $188 = SAFE_HEAP_LOAD($187 | 0, 4, 0) | 0 | 0;
       $189 = 6012 + ($188 << 2) | 0;
       $190 = SAFE_HEAP_LOAD($189 | 0, 4, 0) | 0 | 0;
       $191 = ($$0192$lcssa$i | 0) == ($190 | 0);
       do {
        if ($191) {
         SAFE_HEAP_STORE($189 | 0, $$3$i | 0, 4);
         $cond$i = ($$3$i | 0) == (0 | 0);
         if ($cond$i) {
          $192 = 1 << $188;
          $193 = $192 ^ -1;
          $194 = $108 & $193;
          SAFE_HEAP_STORE(5712 | 0, $194 | 0, 4);
          break L73;
         }
        } else {
         $195 = SAFE_HEAP_LOAD(5724 | 0, 4, 0) | 0 | 0;
         $196 = $160 >>> 0 < $195 >>> 0;
         if ($196) {
          _abort();
         } else {
          $197 = $160 + 16 | 0;
          $198 = SAFE_HEAP_LOAD($197 | 0, 4, 0) | 0 | 0;
          $not$1$i = ($198 | 0) != ($$0192$lcssa$i | 0);
          $$sink2$i = $not$1$i & 1;
          $199 = ($160 + 16 | 0) + ($$sink2$i << 2) | 0;
          SAFE_HEAP_STORE($199 | 0, $$3$i | 0, 4);
          $200 = ($$3$i | 0) == (0 | 0);
          if ($200) {
           break L73;
          } else {
           break;
          }
         }
        }
       } while (0);
       $201 = SAFE_HEAP_LOAD(5724 | 0, 4, 0) | 0 | 0;
       $202 = $$3$i >>> 0 < $201 >>> 0;
       if ($202) {
        _abort();
       }
       $203 = $$3$i + 24 | 0;
       SAFE_HEAP_STORE($203 | 0, $160 | 0, 4);
       $204 = $$0192$lcssa$i + 16 | 0;
       $205 = SAFE_HEAP_LOAD($204 | 0, 4, 0) | 0 | 0;
       $206 = ($205 | 0) == (0 | 0);
       do {
        if (!$206) {
         $207 = $205 >>> 0 < $201 >>> 0;
         if ($207) {
          _abort();
         } else {
          $208 = $$3$i + 16 | 0;
          SAFE_HEAP_STORE($208 | 0, $205 | 0, 4);
          $209 = $205 + 24 | 0;
          SAFE_HEAP_STORE($209 | 0, $$3$i | 0, 4);
          break;
         }
        }
       } while (0);
       $210 = $$0192$lcssa$i + 20 | 0;
       $211 = SAFE_HEAP_LOAD($210 | 0, 4, 0) | 0 | 0;
       $212 = ($211 | 0) == (0 | 0);
       if (!$212) {
        $213 = SAFE_HEAP_LOAD(5724 | 0, 4, 0) | 0 | 0;
        $214 = $211 >>> 0 < $213 >>> 0;
        if ($214) {
         _abort();
        } else {
         $215 = $$3$i + 20 | 0;
         SAFE_HEAP_STORE($215 | 0, $211 | 0, 4);
         $216 = $211 + 24 | 0;
         SAFE_HEAP_STORE($216 | 0, $$3$i | 0, 4);
         break;
        }
       }
      }
     } while (0);
     $217 = $$0193$lcssa$i >>> 0 < 16;
     if ($217) {
      $218 = $$0193$lcssa$i + $6 | 0;
      $219 = $218 | 3;
      $220 = $$0192$lcssa$i + 4 | 0;
      SAFE_HEAP_STORE($220 | 0, $219 | 0, 4);
      $221 = $$0192$lcssa$i + $218 | 0;
      $222 = $221 + 4 | 0;
      $223 = SAFE_HEAP_LOAD($222 | 0, 4, 0) | 0 | 0;
      $224 = $223 | 1;
      SAFE_HEAP_STORE($222 | 0, $224 | 0, 4);
     } else {
      $225 = $6 | 3;
      $226 = $$0192$lcssa$i + 4 | 0;
      SAFE_HEAP_STORE($226 | 0, $225 | 0, 4);
      $227 = $$0193$lcssa$i | 1;
      $228 = $157 + 4 | 0;
      SAFE_HEAP_STORE($228 | 0, $227 | 0, 4);
      $229 = $157 + $$0193$lcssa$i | 0;
      SAFE_HEAP_STORE($229 | 0, $$0193$lcssa$i | 0, 4);
      $230 = ($37 | 0) == 0;
      if (!$230) {
       $231 = SAFE_HEAP_LOAD(5728 | 0, 4, 0) | 0 | 0;
       $232 = $37 >>> 3;
       $233 = $232 << 1;
       $234 = 5748 + ($233 << 2) | 0;
       $235 = 1 << $232;
       $236 = $8 & $235;
       $237 = ($236 | 0) == 0;
       if ($237) {
        $238 = $8 | $235;
        SAFE_HEAP_STORE(1427 * 4 | 0, $238 | 0, 4);
        $$pre$i = $234 + 8 | 0;
        $$0189$i = $234;
        $$pre$phi$iZ2D = $$pre$i;
       } else {
        $239 = $234 + 8 | 0;
        $240 = SAFE_HEAP_LOAD($239 | 0, 4, 0) | 0 | 0;
        $241 = SAFE_HEAP_LOAD(5724 | 0, 4, 0) | 0 | 0;
        $242 = $240 >>> 0 < $241 >>> 0;
        if ($242) {
         _abort();
        } else {
         $$0189$i = $240;
         $$pre$phi$iZ2D = $239;
        }
       }
       SAFE_HEAP_STORE($$pre$phi$iZ2D | 0, $231 | 0, 4);
       $243 = $$0189$i + 12 | 0;
       SAFE_HEAP_STORE($243 | 0, $231 | 0, 4);
       $244 = $231 + 8 | 0;
       SAFE_HEAP_STORE($244 | 0, $$0189$i | 0, 4);
       $245 = $231 + 12 | 0;
       SAFE_HEAP_STORE($245 | 0, $234 | 0, 4);
      }
      SAFE_HEAP_STORE(5716 | 0, $$0193$lcssa$i | 0, 4);
      SAFE_HEAP_STORE(5728 | 0, $157 | 0, 4);
     }
     $246 = $$0192$lcssa$i + 8 | 0;
     $$0 = $246;
     STACKTOP = sp;
     return $$0 | 0;
    }
   } else {
    $$0197 = $6;
   }
  } else {
   $247 = $0 >>> 0 > 4294967231;
   if ($247) {
    $$0197 = -1;
   } else {
    $248 = $0 + 11 | 0;
    $249 = $248 & -8;
    $250 = SAFE_HEAP_LOAD(5712 | 0, 4, 0) | 0 | 0;
    $251 = ($250 | 0) == 0;
    if ($251) {
     $$0197 = $249;
    } else {
     $252 = 0 - $249 | 0;
     $253 = $248 >>> 8;
     $254 = ($253 | 0) == 0;
     if ($254) {
      $$0358$i = 0;
     } else {
      $255 = $249 >>> 0 > 16777215;
      if ($255) {
       $$0358$i = 31;
      } else {
       $256 = $253 + 1048320 | 0;
       $257 = $256 >>> 16;
       $258 = $257 & 8;
       $259 = $253 << $258;
       $260 = $259 + 520192 | 0;
       $261 = $260 >>> 16;
       $262 = $261 & 4;
       $263 = $262 | $258;
       $264 = $259 << $262;
       $265 = $264 + 245760 | 0;
       $266 = $265 >>> 16;
       $267 = $266 & 2;
       $268 = $263 | $267;
       $269 = 14 - $268 | 0;
       $270 = $264 << $267;
       $271 = $270 >>> 15;
       $272 = $269 + $271 | 0;
       $273 = $272 << 1;
       $274 = $272 + 7 | 0;
       $275 = $249 >>> $274;
       $276 = $275 & 1;
       $277 = $276 | $273;
       $$0358$i = $277;
      }
     }
     $278 = 6012 + ($$0358$i << 2) | 0;
     $279 = SAFE_HEAP_LOAD($278 | 0, 4, 0) | 0 | 0;
     $280 = ($279 | 0) == (0 | 0);
     L117 : do {
      if ($280) {
       $$2355$i = 0;
       $$3$i201 = 0;
       $$3350$i = $252;
       label = 81;
      } else {
       $281 = ($$0358$i | 0) == 31;
       $282 = $$0358$i >>> 1;
       $283 = 25 - $282 | 0;
       $284 = $281 ? 0 : $283;
       $285 = $249 << $284;
       $$0342$i = 0;
       $$0347$i = $252;
       $$0353$i = $279;
       $$0359$i = $285;
       $$0362$i = 0;
       while (1) {
        $286 = $$0353$i + 4 | 0;
        $287 = SAFE_HEAP_LOAD($286 | 0, 4, 0) | 0 | 0;
        $288 = $287 & -8;
        $289 = $288 - $249 | 0;
        $290 = $289 >>> 0 < $$0347$i >>> 0;
        if ($290) {
         $291 = ($289 | 0) == 0;
         if ($291) {
          $$415$i = $$0353$i;
          $$435114$i = 0;
          $$435713$i = $$0353$i;
          label = 85;
          break L117;
         } else {
          $$1343$i = $$0353$i;
          $$1348$i = $289;
         }
        } else {
         $$1343$i = $$0342$i;
         $$1348$i = $$0347$i;
        }
        $292 = $$0353$i + 20 | 0;
        $293 = SAFE_HEAP_LOAD($292 | 0, 4, 0) | 0 | 0;
        $294 = $$0359$i >>> 31;
        $295 = ($$0353$i + 16 | 0) + ($294 << 2) | 0;
        $296 = SAFE_HEAP_LOAD($295 | 0, 4, 0) | 0 | 0;
        $297 = ($293 | 0) == (0 | 0);
        $298 = ($293 | 0) == ($296 | 0);
        $or$cond2$i = $297 | $298;
        $$1363$i = $or$cond2$i ? $$0362$i : $293;
        $299 = ($296 | 0) == (0 | 0);
        $not$8$i = $299 ^ 1;
        $300 = $not$8$i & 1;
        $$0359$$i = $$0359$i << $300;
        if ($299) {
         $$2355$i = $$1363$i;
         $$3$i201 = $$1343$i;
         $$3350$i = $$1348$i;
         label = 81;
         break;
        } else {
         $$0342$i = $$1343$i;
         $$0347$i = $$1348$i;
         $$0353$i = $296;
         $$0359$i = $$0359$$i;
         $$0362$i = $$1363$i;
        }
       }
      }
     } while (0);
     if ((label | 0) == 81) {
      $301 = ($$2355$i | 0) == (0 | 0);
      $302 = ($$3$i201 | 0) == (0 | 0);
      $or$cond$i = $301 & $302;
      if ($or$cond$i) {
       $303 = 2 << $$0358$i;
       $304 = 0 - $303 | 0;
       $305 = $303 | $304;
       $306 = $250 & $305;
       $307 = ($306 | 0) == 0;
       if ($307) {
        $$0197 = $249;
        break;
       }
       $308 = 0 - $306 | 0;
       $309 = $306 & $308;
       $310 = $309 + -1 | 0;
       $311 = $310 >>> 12;
       $312 = $311 & 16;
       $313 = $310 >>> $312;
       $314 = $313 >>> 5;
       $315 = $314 & 8;
       $316 = $315 | $312;
       $317 = $313 >>> $315;
       $318 = $317 >>> 2;
       $319 = $318 & 4;
       $320 = $316 | $319;
       $321 = $317 >>> $319;
       $322 = $321 >>> 1;
       $323 = $322 & 2;
       $324 = $320 | $323;
       $325 = $321 >>> $323;
       $326 = $325 >>> 1;
       $327 = $326 & 1;
       $328 = $324 | $327;
       $329 = $325 >>> $327;
       $330 = $328 + $329 | 0;
       $331 = 6012 + ($330 << 2) | 0;
       $332 = SAFE_HEAP_LOAD($331 | 0, 4, 0) | 0 | 0;
       $$4$ph$i = 0;
       $$4357$ph$i = $332;
      } else {
       $$4$ph$i = $$3$i201;
       $$4357$ph$i = $$2355$i;
      }
      $333 = ($$4357$ph$i | 0) == (0 | 0);
      if ($333) {
       $$4$lcssa$i = $$4$ph$i;
       $$4351$lcssa$i = $$3350$i;
      } else {
       $$415$i = $$4$ph$i;
       $$435114$i = $$3350$i;
       $$435713$i = $$4357$ph$i;
       label = 85;
      }
     }
     if ((label | 0) == 85) {
      while (1) {
       label = 0;
       $334 = $$435713$i + 4 | 0;
       $335 = SAFE_HEAP_LOAD($334 | 0, 4, 0) | 0 | 0;
       $336 = $335 & -8;
       $337 = $336 - $249 | 0;
       $338 = $337 >>> 0 < $$435114$i >>> 0;
       $$$4351$i = $338 ? $337 : $$435114$i;
       $$4357$$4$i = $338 ? $$435713$i : $$415$i;
       $339 = $$435713$i + 16 | 0;
       $340 = SAFE_HEAP_LOAD($339 | 0, 4, 0) | 0 | 0;
       $not$1$i203 = ($340 | 0) == (0 | 0);
       $$sink2$i204 = $not$1$i203 & 1;
       $341 = ($$435713$i + 16 | 0) + ($$sink2$i204 << 2) | 0;
       $342 = SAFE_HEAP_LOAD($341 | 0, 4, 0) | 0 | 0;
       $343 = ($342 | 0) == (0 | 0);
       if ($343) {
        $$4$lcssa$i = $$4357$$4$i;
        $$4351$lcssa$i = $$$4351$i;
        break;
       } else {
        $$415$i = $$4357$$4$i;
        $$435114$i = $$$4351$i;
        $$435713$i = $342;
        label = 85;
       }
      }
     }
     $344 = ($$4$lcssa$i | 0) == (0 | 0);
     if ($344) {
      $$0197 = $249;
     } else {
      $345 = SAFE_HEAP_LOAD(5716 | 0, 4, 0) | 0 | 0;
      $346 = $345 - $249 | 0;
      $347 = $$4351$lcssa$i >>> 0 < $346 >>> 0;
      if ($347) {
       $348 = SAFE_HEAP_LOAD(5724 | 0, 4, 0) | 0 | 0;
       $349 = $$4$lcssa$i >>> 0 < $348 >>> 0;
       if ($349) {
        _abort();
       }
       $350 = $$4$lcssa$i + $249 | 0;
       $351 = $$4$lcssa$i >>> 0 < $350 >>> 0;
       if (!$351) {
        _abort();
       }
       $352 = $$4$lcssa$i + 24 | 0;
       $353 = SAFE_HEAP_LOAD($352 | 0, 4, 0) | 0 | 0;
       $354 = $$4$lcssa$i + 12 | 0;
       $355 = SAFE_HEAP_LOAD($354 | 0, 4, 0) | 0 | 0;
       $356 = ($355 | 0) == ($$4$lcssa$i | 0);
       do {
        if ($356) {
         $366 = $$4$lcssa$i + 20 | 0;
         $367 = SAFE_HEAP_LOAD($366 | 0, 4, 0) | 0 | 0;
         $368 = ($367 | 0) == (0 | 0);
         if ($368) {
          $369 = $$4$lcssa$i + 16 | 0;
          $370 = SAFE_HEAP_LOAD($369 | 0, 4, 0) | 0 | 0;
          $371 = ($370 | 0) == (0 | 0);
          if ($371) {
           $$3372$i = 0;
           break;
          } else {
           $$1370$i = $370;
           $$1374$i = $369;
          }
         } else {
          $$1370$i = $367;
          $$1374$i = $366;
         }
         while (1) {
          $372 = $$1370$i + 20 | 0;
          $373 = SAFE_HEAP_LOAD($372 | 0, 4, 0) | 0 | 0;
          $374 = ($373 | 0) == (0 | 0);
          if (!$374) {
           $$1370$i = $373;
           $$1374$i = $372;
           continue;
          }
          $375 = $$1370$i + 16 | 0;
          $376 = SAFE_HEAP_LOAD($375 | 0, 4, 0) | 0 | 0;
          $377 = ($376 | 0) == (0 | 0);
          if ($377) {
           break;
          } else {
           $$1370$i = $376;
           $$1374$i = $375;
          }
         }
         $378 = $$1374$i >>> 0 < $348 >>> 0;
         if ($378) {
          _abort();
         } else {
          SAFE_HEAP_STORE($$1374$i | 0, 0 | 0, 4);
          $$3372$i = $$1370$i;
          break;
         }
        } else {
         $357 = $$4$lcssa$i + 8 | 0;
         $358 = SAFE_HEAP_LOAD($357 | 0, 4, 0) | 0 | 0;
         $359 = $358 >>> 0 < $348 >>> 0;
         if ($359) {
          _abort();
         }
         $360 = $358 + 12 | 0;
         $361 = SAFE_HEAP_LOAD($360 | 0, 4, 0) | 0 | 0;
         $362 = ($361 | 0) == ($$4$lcssa$i | 0);
         if (!$362) {
          _abort();
         }
         $363 = $355 + 8 | 0;
         $364 = SAFE_HEAP_LOAD($363 | 0, 4, 0) | 0 | 0;
         $365 = ($364 | 0) == ($$4$lcssa$i | 0);
         if ($365) {
          SAFE_HEAP_STORE($360 | 0, $355 | 0, 4);
          SAFE_HEAP_STORE($363 | 0, $358 | 0, 4);
          $$3372$i = $355;
          break;
         } else {
          _abort();
         }
        }
       } while (0);
       $379 = ($353 | 0) == (0 | 0);
       L164 : do {
        if ($379) {
         $470 = $250;
        } else {
         $380 = $$4$lcssa$i + 28 | 0;
         $381 = SAFE_HEAP_LOAD($380 | 0, 4, 0) | 0 | 0;
         $382 = 6012 + ($381 << 2) | 0;
         $383 = SAFE_HEAP_LOAD($382 | 0, 4, 0) | 0 | 0;
         $384 = ($$4$lcssa$i | 0) == ($383 | 0);
         do {
          if ($384) {
           SAFE_HEAP_STORE($382 | 0, $$3372$i | 0, 4);
           $cond$i208 = ($$3372$i | 0) == (0 | 0);
           if ($cond$i208) {
            $385 = 1 << $381;
            $386 = $385 ^ -1;
            $387 = $250 & $386;
            SAFE_HEAP_STORE(5712 | 0, $387 | 0, 4);
            $470 = $387;
            break L164;
           }
          } else {
           $388 = SAFE_HEAP_LOAD(5724 | 0, 4, 0) | 0 | 0;
           $389 = $353 >>> 0 < $388 >>> 0;
           if ($389) {
            _abort();
           } else {
            $390 = $353 + 16 | 0;
            $391 = SAFE_HEAP_LOAD($390 | 0, 4, 0) | 0 | 0;
            $not$$i209 = ($391 | 0) != ($$4$lcssa$i | 0);
            $$sink3$i = $not$$i209 & 1;
            $392 = ($353 + 16 | 0) + ($$sink3$i << 2) | 0;
            SAFE_HEAP_STORE($392 | 0, $$3372$i | 0, 4);
            $393 = ($$3372$i | 0) == (0 | 0);
            if ($393) {
             $470 = $250;
             break L164;
            } else {
             break;
            }
           }
          }
         } while (0);
         $394 = SAFE_HEAP_LOAD(5724 | 0, 4, 0) | 0 | 0;
         $395 = $$3372$i >>> 0 < $394 >>> 0;
         if ($395) {
          _abort();
         }
         $396 = $$3372$i + 24 | 0;
         SAFE_HEAP_STORE($396 | 0, $353 | 0, 4);
         $397 = $$4$lcssa$i + 16 | 0;
         $398 = SAFE_HEAP_LOAD($397 | 0, 4, 0) | 0 | 0;
         $399 = ($398 | 0) == (0 | 0);
         do {
          if (!$399) {
           $400 = $398 >>> 0 < $394 >>> 0;
           if ($400) {
            _abort();
           } else {
            $401 = $$3372$i + 16 | 0;
            SAFE_HEAP_STORE($401 | 0, $398 | 0, 4);
            $402 = $398 + 24 | 0;
            SAFE_HEAP_STORE($402 | 0, $$3372$i | 0, 4);
            break;
           }
          }
         } while (0);
         $403 = $$4$lcssa$i + 20 | 0;
         $404 = SAFE_HEAP_LOAD($403 | 0, 4, 0) | 0 | 0;
         $405 = ($404 | 0) == (0 | 0);
         if ($405) {
          $470 = $250;
         } else {
          $406 = SAFE_HEAP_LOAD(5724 | 0, 4, 0) | 0 | 0;
          $407 = $404 >>> 0 < $406 >>> 0;
          if ($407) {
           _abort();
          } else {
           $408 = $$3372$i + 20 | 0;
           SAFE_HEAP_STORE($408 | 0, $404 | 0, 4);
           $409 = $404 + 24 | 0;
           SAFE_HEAP_STORE($409 | 0, $$3372$i | 0, 4);
           $470 = $250;
           break;
          }
         }
        }
       } while (0);
       $410 = $$4351$lcssa$i >>> 0 < 16;
       do {
        if ($410) {
         $411 = $$4351$lcssa$i + $249 | 0;
         $412 = $411 | 3;
         $413 = $$4$lcssa$i + 4 | 0;
         SAFE_HEAP_STORE($413 | 0, $412 | 0, 4);
         $414 = $$4$lcssa$i + $411 | 0;
         $415 = $414 + 4 | 0;
         $416 = SAFE_HEAP_LOAD($415 | 0, 4, 0) | 0 | 0;
         $417 = $416 | 1;
         SAFE_HEAP_STORE($415 | 0, $417 | 0, 4);
        } else {
         $418 = $249 | 3;
         $419 = $$4$lcssa$i + 4 | 0;
         SAFE_HEAP_STORE($419 | 0, $418 | 0, 4);
         $420 = $$4351$lcssa$i | 1;
         $421 = $350 + 4 | 0;
         SAFE_HEAP_STORE($421 | 0, $420 | 0, 4);
         $422 = $350 + $$4351$lcssa$i | 0;
         SAFE_HEAP_STORE($422 | 0, $$4351$lcssa$i | 0, 4);
         $423 = $$4351$lcssa$i >>> 3;
         $424 = $$4351$lcssa$i >>> 0 < 256;
         if ($424) {
          $425 = $423 << 1;
          $426 = 5748 + ($425 << 2) | 0;
          $427 = SAFE_HEAP_LOAD(1427 * 4 | 0, 4, 0) | 0 | 0;
          $428 = 1 << $423;
          $429 = $427 & $428;
          $430 = ($429 | 0) == 0;
          if ($430) {
           $431 = $427 | $428;
           SAFE_HEAP_STORE(1427 * 4 | 0, $431 | 0, 4);
           $$pre$i210 = $426 + 8 | 0;
           $$0368$i = $426;
           $$pre$phi$i211Z2D = $$pre$i210;
          } else {
           $432 = $426 + 8 | 0;
           $433 = SAFE_HEAP_LOAD($432 | 0, 4, 0) | 0 | 0;
           $434 = SAFE_HEAP_LOAD(5724 | 0, 4, 0) | 0 | 0;
           $435 = $433 >>> 0 < $434 >>> 0;
           if ($435) {
            _abort();
           } else {
            $$0368$i = $433;
            $$pre$phi$i211Z2D = $432;
           }
          }
          SAFE_HEAP_STORE($$pre$phi$i211Z2D | 0, $350 | 0, 4);
          $436 = $$0368$i + 12 | 0;
          SAFE_HEAP_STORE($436 | 0, $350 | 0, 4);
          $437 = $350 + 8 | 0;
          SAFE_HEAP_STORE($437 | 0, $$0368$i | 0, 4);
          $438 = $350 + 12 | 0;
          SAFE_HEAP_STORE($438 | 0, $426 | 0, 4);
          break;
         }
         $439 = $$4351$lcssa$i >>> 8;
         $440 = ($439 | 0) == 0;
         if ($440) {
          $$0361$i = 0;
         } else {
          $441 = $$4351$lcssa$i >>> 0 > 16777215;
          if ($441) {
           $$0361$i = 31;
          } else {
           $442 = $439 + 1048320 | 0;
           $443 = $442 >>> 16;
           $444 = $443 & 8;
           $445 = $439 << $444;
           $446 = $445 + 520192 | 0;
           $447 = $446 >>> 16;
           $448 = $447 & 4;
           $449 = $448 | $444;
           $450 = $445 << $448;
           $451 = $450 + 245760 | 0;
           $452 = $451 >>> 16;
           $453 = $452 & 2;
           $454 = $449 | $453;
           $455 = 14 - $454 | 0;
           $456 = $450 << $453;
           $457 = $456 >>> 15;
           $458 = $455 + $457 | 0;
           $459 = $458 << 1;
           $460 = $458 + 7 | 0;
           $461 = $$4351$lcssa$i >>> $460;
           $462 = $461 & 1;
           $463 = $462 | $459;
           $$0361$i = $463;
          }
         }
         $464 = 6012 + ($$0361$i << 2) | 0;
         $465 = $350 + 28 | 0;
         SAFE_HEAP_STORE($465 | 0, $$0361$i | 0, 4);
         $466 = $350 + 16 | 0;
         $467 = $466 + 4 | 0;
         SAFE_HEAP_STORE($467 | 0, 0 | 0, 4);
         SAFE_HEAP_STORE($466 | 0, 0 | 0, 4);
         $468 = 1 << $$0361$i;
         $469 = $470 & $468;
         $471 = ($469 | 0) == 0;
         if ($471) {
          $472 = $470 | $468;
          SAFE_HEAP_STORE(5712 | 0, $472 | 0, 4);
          SAFE_HEAP_STORE($464 | 0, $350 | 0, 4);
          $473 = $350 + 24 | 0;
          SAFE_HEAP_STORE($473 | 0, $464 | 0, 4);
          $474 = $350 + 12 | 0;
          SAFE_HEAP_STORE($474 | 0, $350 | 0, 4);
          $475 = $350 + 8 | 0;
          SAFE_HEAP_STORE($475 | 0, $350 | 0, 4);
          break;
         }
         $476 = SAFE_HEAP_LOAD($464 | 0, 4, 0) | 0 | 0;
         $477 = ($$0361$i | 0) == 31;
         $478 = $$0361$i >>> 1;
         $479 = 25 - $478 | 0;
         $480 = $477 ? 0 : $479;
         $481 = $$4351$lcssa$i << $480;
         $$0344$i = $481;
         $$0345$i = $476;
         while (1) {
          $482 = $$0345$i + 4 | 0;
          $483 = SAFE_HEAP_LOAD($482 | 0, 4, 0) | 0 | 0;
          $484 = $483 & -8;
          $485 = ($484 | 0) == ($$4351$lcssa$i | 0);
          if ($485) {
           label = 139;
           break;
          }
          $486 = $$0344$i >>> 31;
          $487 = ($$0345$i + 16 | 0) + ($486 << 2) | 0;
          $488 = $$0344$i << 1;
          $489 = SAFE_HEAP_LOAD($487 | 0, 4, 0) | 0 | 0;
          $490 = ($489 | 0) == (0 | 0);
          if ($490) {
           label = 136;
           break;
          } else {
           $$0344$i = $488;
           $$0345$i = $489;
          }
         }
         if ((label | 0) == 136) {
          $491 = SAFE_HEAP_LOAD(5724 | 0, 4, 0) | 0 | 0;
          $492 = $487 >>> 0 < $491 >>> 0;
          if ($492) {
           _abort();
          } else {
           SAFE_HEAP_STORE($487 | 0, $350 | 0, 4);
           $493 = $350 + 24 | 0;
           SAFE_HEAP_STORE($493 | 0, $$0345$i | 0, 4);
           $494 = $350 + 12 | 0;
           SAFE_HEAP_STORE($494 | 0, $350 | 0, 4);
           $495 = $350 + 8 | 0;
           SAFE_HEAP_STORE($495 | 0, $350 | 0, 4);
           break;
          }
         } else if ((label | 0) == 139) {
          $496 = $$0345$i + 8 | 0;
          $497 = SAFE_HEAP_LOAD($496 | 0, 4, 0) | 0 | 0;
          $498 = SAFE_HEAP_LOAD(5724 | 0, 4, 0) | 0 | 0;
          $499 = $497 >>> 0 >= $498 >>> 0;
          $not$9$i = $$0345$i >>> 0 >= $498 >>> 0;
          $500 = $499 & $not$9$i;
          if ($500) {
           $501 = $497 + 12 | 0;
           SAFE_HEAP_STORE($501 | 0, $350 | 0, 4);
           SAFE_HEAP_STORE($496 | 0, $350 | 0, 4);
           $502 = $350 + 8 | 0;
           SAFE_HEAP_STORE($502 | 0, $497 | 0, 4);
           $503 = $350 + 12 | 0;
           SAFE_HEAP_STORE($503 | 0, $$0345$i | 0, 4);
           $504 = $350 + 24 | 0;
           SAFE_HEAP_STORE($504 | 0, 0 | 0, 4);
           break;
          } else {
           _abort();
          }
         }
        }
       } while (0);
       $505 = $$4$lcssa$i + 8 | 0;
       $$0 = $505;
       STACKTOP = sp;
       return $$0 | 0;
      } else {
       $$0197 = $249;
      }
     }
    }
   }
  }
 } while (0);
 $506 = SAFE_HEAP_LOAD(5716 | 0, 4, 0) | 0 | 0;
 $507 = $506 >>> 0 < $$0197 >>> 0;
 if (!$507) {
  $508 = $506 - $$0197 | 0;
  $509 = SAFE_HEAP_LOAD(5728 | 0, 4, 0) | 0 | 0;
  $510 = $508 >>> 0 > 15;
  if ($510) {
   $511 = $509 + $$0197 | 0;
   SAFE_HEAP_STORE(5728 | 0, $511 | 0, 4);
   SAFE_HEAP_STORE(5716 | 0, $508 | 0, 4);
   $512 = $508 | 1;
   $513 = $511 + 4 | 0;
   SAFE_HEAP_STORE($513 | 0, $512 | 0, 4);
   $514 = $511 + $508 | 0;
   SAFE_HEAP_STORE($514 | 0, $508 | 0, 4);
   $515 = $$0197 | 3;
   $516 = $509 + 4 | 0;
   SAFE_HEAP_STORE($516 | 0, $515 | 0, 4);
  } else {
   SAFE_HEAP_STORE(5716 | 0, 0 | 0, 4);
   SAFE_HEAP_STORE(5728 | 0, 0 | 0, 4);
   $517 = $506 | 3;
   $518 = $509 + 4 | 0;
   SAFE_HEAP_STORE($518 | 0, $517 | 0, 4);
   $519 = $509 + $506 | 0;
   $520 = $519 + 4 | 0;
   $521 = SAFE_HEAP_LOAD($520 | 0, 4, 0) | 0 | 0;
   $522 = $521 | 1;
   SAFE_HEAP_STORE($520 | 0, $522 | 0, 4);
  }
  $523 = $509 + 8 | 0;
  $$0 = $523;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $524 = SAFE_HEAP_LOAD(5720 | 0, 4, 0) | 0 | 0;
 $525 = $524 >>> 0 > $$0197 >>> 0;
 if ($525) {
  $526 = $524 - $$0197 | 0;
  SAFE_HEAP_STORE(5720 | 0, $526 | 0, 4);
  $527 = SAFE_HEAP_LOAD(5732 | 0, 4, 0) | 0 | 0;
  $528 = $527 + $$0197 | 0;
  SAFE_HEAP_STORE(5732 | 0, $528 | 0, 4);
  $529 = $526 | 1;
  $530 = $528 + 4 | 0;
  SAFE_HEAP_STORE($530 | 0, $529 | 0, 4);
  $531 = $$0197 | 3;
  $532 = $527 + 4 | 0;
  SAFE_HEAP_STORE($532 | 0, $531 | 0, 4);
  $533 = $527 + 8 | 0;
  $$0 = $533;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $534 = SAFE_HEAP_LOAD(1545 * 4 | 0, 4, 0) | 0 | 0;
 $535 = ($534 | 0) == 0;
 if ($535) {
  SAFE_HEAP_STORE(6188 | 0, 4096 | 0, 4);
  SAFE_HEAP_STORE(6184 | 0, 4096 | 0, 4);
  SAFE_HEAP_STORE(6192 | 0, -1 | 0, 4);
  SAFE_HEAP_STORE(6196 | 0, -1 | 0, 4);
  SAFE_HEAP_STORE(6200 | 0, 0 | 0, 4);
  SAFE_HEAP_STORE(6152 | 0, 0 | 0, 4);
  $536 = $1;
  $537 = $536 & -16;
  $538 = $537 ^ 1431655768;
  SAFE_HEAP_STORE($1 | 0, $538 | 0, 4);
  SAFE_HEAP_STORE(1545 * 4 | 0, $538 | 0, 4);
  $542 = 4096;
 } else {
  $$pre$i212 = SAFE_HEAP_LOAD(6188 | 0, 4, 0) | 0 | 0;
  $542 = $$pre$i212;
 }
 $539 = $$0197 + 48 | 0;
 $540 = $$0197 + 47 | 0;
 $541 = $542 + $540 | 0;
 $543 = 0 - $542 | 0;
 $544 = $541 & $543;
 $545 = $544 >>> 0 > $$0197 >>> 0;
 if (!$545) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $546 = SAFE_HEAP_LOAD(6148 | 0, 4, 0) | 0 | 0;
 $547 = ($546 | 0) == 0;
 if (!$547) {
  $548 = SAFE_HEAP_LOAD(6140 | 0, 4, 0) | 0 | 0;
  $549 = $548 + $544 | 0;
  $550 = $549 >>> 0 <= $548 >>> 0;
  $551 = $549 >>> 0 > $546 >>> 0;
  $or$cond1$i = $550 | $551;
  if ($or$cond1$i) {
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 }
 $552 = SAFE_HEAP_LOAD(6152 | 0, 4, 0) | 0 | 0;
 $553 = $552 & 4;
 $554 = ($553 | 0) == 0;
 L244 : do {
  if ($554) {
   $555 = SAFE_HEAP_LOAD(5732 | 0, 4, 0) | 0 | 0;
   $556 = ($555 | 0) == (0 | 0);
   L246 : do {
    if ($556) {
     label = 163;
    } else {
     $$0$i$i = 6156;
     while (1) {
      $557 = SAFE_HEAP_LOAD($$0$i$i | 0, 4, 0) | 0 | 0;
      $558 = $557 >>> 0 > $555 >>> 0;
      if (!$558) {
       $559 = $$0$i$i + 4 | 0;
       $560 = SAFE_HEAP_LOAD($559 | 0, 4, 0) | 0 | 0;
       $561 = $557 + $560 | 0;
       $562 = $561 >>> 0 > $555 >>> 0;
       if ($562) {
        break;
       }
      }
      $563 = $$0$i$i + 8 | 0;
      $564 = SAFE_HEAP_LOAD($563 | 0, 4, 0) | 0 | 0;
      $565 = ($564 | 0) == (0 | 0);
      if ($565) {
       label = 163;
       break L246;
      } else {
       $$0$i$i = $564;
      }
     }
     $588 = $541 - $524 | 0;
     $589 = $588 & $543;
     $590 = $589 >>> 0 < 2147483647;
     if ($590) {
      $591 = _sbrk($589 | 0) | 0;
      $592 = SAFE_HEAP_LOAD($$0$i$i | 0, 4, 0) | 0 | 0;
      $593 = SAFE_HEAP_LOAD($559 | 0, 4, 0) | 0 | 0;
      $594 = $592 + $593 | 0;
      $595 = ($591 | 0) == ($594 | 0);
      if ($595) {
       $596 = ($591 | 0) == (-1 | 0);
       if ($596) {
        $$2234253237$i = $589;
       } else {
        $$723948$i = $589;
        $$749$i = $591;
        label = 180;
        break L244;
       }
      } else {
       $$2247$ph$i = $591;
       $$2253$ph$i = $589;
       label = 171;
      }
     } else {
      $$2234253237$i = 0;
     }
    }
   } while (0);
   do {
    if ((label | 0) == 163) {
     $566 = _sbrk(0) | 0;
     $567 = ($566 | 0) == (-1 | 0);
     if ($567) {
      $$2234253237$i = 0;
     } else {
      $568 = $566;
      $569 = SAFE_HEAP_LOAD(6184 | 0, 4, 0) | 0 | 0;
      $570 = $569 + -1 | 0;
      $571 = $570 & $568;
      $572 = ($571 | 0) == 0;
      $573 = $570 + $568 | 0;
      $574 = 0 - $569 | 0;
      $575 = $573 & $574;
      $576 = $575 - $568 | 0;
      $577 = $572 ? 0 : $576;
      $$$i = $577 + $544 | 0;
      $578 = SAFE_HEAP_LOAD(6140 | 0, 4, 0) | 0 | 0;
      $579 = $$$i + $578 | 0;
      $580 = $$$i >>> 0 > $$0197 >>> 0;
      $581 = $$$i >>> 0 < 2147483647;
      $or$cond$i214 = $580 & $581;
      if ($or$cond$i214) {
       $582 = SAFE_HEAP_LOAD(6148 | 0, 4, 0) | 0 | 0;
       $583 = ($582 | 0) == 0;
       if (!$583) {
        $584 = $579 >>> 0 <= $578 >>> 0;
        $585 = $579 >>> 0 > $582 >>> 0;
        $or$cond2$i215 = $584 | $585;
        if ($or$cond2$i215) {
         $$2234253237$i = 0;
         break;
        }
       }
       $586 = _sbrk($$$i | 0) | 0;
       $587 = ($586 | 0) == ($566 | 0);
       if ($587) {
        $$723948$i = $$$i;
        $$749$i = $566;
        label = 180;
        break L244;
       } else {
        $$2247$ph$i = $586;
        $$2253$ph$i = $$$i;
        label = 171;
       }
      } else {
       $$2234253237$i = 0;
      }
     }
    }
   } while (0);
   do {
    if ((label | 0) == 171) {
     $597 = 0 - $$2253$ph$i | 0;
     $598 = ($$2247$ph$i | 0) != (-1 | 0);
     $599 = $$2253$ph$i >>> 0 < 2147483647;
     $or$cond7$i = $599 & $598;
     $600 = $539 >>> 0 > $$2253$ph$i >>> 0;
     $or$cond10$i = $600 & $or$cond7$i;
     if (!$or$cond10$i) {
      $610 = ($$2247$ph$i | 0) == (-1 | 0);
      if ($610) {
       $$2234253237$i = 0;
       break;
      } else {
       $$723948$i = $$2253$ph$i;
       $$749$i = $$2247$ph$i;
       label = 180;
       break L244;
      }
     }
     $601 = SAFE_HEAP_LOAD(6188 | 0, 4, 0) | 0 | 0;
     $602 = $540 - $$2253$ph$i | 0;
     $603 = $602 + $601 | 0;
     $604 = 0 - $601 | 0;
     $605 = $603 & $604;
     $606 = $605 >>> 0 < 2147483647;
     if (!$606) {
      $$723948$i = $$2253$ph$i;
      $$749$i = $$2247$ph$i;
      label = 180;
      break L244;
     }
     $607 = _sbrk($605 | 0) | 0;
     $608 = ($607 | 0) == (-1 | 0);
     if ($608) {
      _sbrk($597 | 0) | 0;
      $$2234253237$i = 0;
      break;
     } else {
      $609 = $605 + $$2253$ph$i | 0;
      $$723948$i = $609;
      $$749$i = $$2247$ph$i;
      label = 180;
      break L244;
     }
    }
   } while (0);
   $611 = SAFE_HEAP_LOAD(6152 | 0, 4, 0) | 0 | 0;
   $612 = $611 | 4;
   SAFE_HEAP_STORE(6152 | 0, $612 | 0, 4);
   $$4236$i = $$2234253237$i;
   label = 178;
  } else {
   $$4236$i = 0;
   label = 178;
  }
 } while (0);
 if ((label | 0) == 178) {
  $613 = $544 >>> 0 < 2147483647;
  if ($613) {
   $614 = _sbrk($544 | 0) | 0;
   $615 = _sbrk(0) | 0;
   $616 = ($614 | 0) != (-1 | 0);
   $617 = ($615 | 0) != (-1 | 0);
   $or$cond5$i = $616 & $617;
   $618 = $614 >>> 0 < $615 >>> 0;
   $or$cond11$i = $618 & $or$cond5$i;
   $619 = $615;
   $620 = $614;
   $621 = $619 - $620 | 0;
   $622 = $$0197 + 40 | 0;
   $623 = $621 >>> 0 > $622 >>> 0;
   $$$4236$i = $623 ? $621 : $$4236$i;
   $or$cond11$not$i = $or$cond11$i ^ 1;
   $624 = ($614 | 0) == (-1 | 0);
   $not$$i216 = $623 ^ 1;
   $625 = $624 | $not$$i216;
   $or$cond50$i = $625 | $or$cond11$not$i;
   if (!$or$cond50$i) {
    $$723948$i = $$$4236$i;
    $$749$i = $614;
    label = 180;
   }
  }
 }
 if ((label | 0) == 180) {
  $626 = SAFE_HEAP_LOAD(6140 | 0, 4, 0) | 0 | 0;
  $627 = $626 + $$723948$i | 0;
  SAFE_HEAP_STORE(6140 | 0, $627 | 0, 4);
  $628 = SAFE_HEAP_LOAD(6144 | 0, 4, 0) | 0 | 0;
  $629 = $627 >>> 0 > $628 >>> 0;
  if ($629) {
   SAFE_HEAP_STORE(6144 | 0, $627 | 0, 4);
  }
  $630 = SAFE_HEAP_LOAD(5732 | 0, 4, 0) | 0 | 0;
  $631 = ($630 | 0) == (0 | 0);
  do {
   if ($631) {
    $632 = SAFE_HEAP_LOAD(5724 | 0, 4, 0) | 0 | 0;
    $633 = ($632 | 0) == (0 | 0);
    $634 = $$749$i >>> 0 < $632 >>> 0;
    $or$cond12$i = $633 | $634;
    if ($or$cond12$i) {
     SAFE_HEAP_STORE(5724 | 0, $$749$i | 0, 4);
    }
    SAFE_HEAP_STORE(6156 | 0, $$749$i | 0, 4);
    SAFE_HEAP_STORE(6160 | 0, $$723948$i | 0, 4);
    SAFE_HEAP_STORE(6168 | 0, 0 | 0, 4);
    $635 = SAFE_HEAP_LOAD(1545 * 4 | 0, 4, 0) | 0 | 0;
    SAFE_HEAP_STORE(5744 | 0, $635 | 0, 4);
    SAFE_HEAP_STORE(5740 | 0, -1 | 0, 4);
    $$01$i$i = 0;
    while (1) {
     $636 = $$01$i$i << 1;
     $637 = 5748 + ($636 << 2) | 0;
     $638 = $637 + 12 | 0;
     SAFE_HEAP_STORE($638 | 0, $637 | 0, 4);
     $639 = $637 + 8 | 0;
     SAFE_HEAP_STORE($639 | 0, $637 | 0, 4);
     $640 = $$01$i$i + 1 | 0;
     $exitcond$i$i = ($640 | 0) == 32;
     if ($exitcond$i$i) {
      break;
     } else {
      $$01$i$i = $640;
     }
    }
    $641 = $$723948$i + -40 | 0;
    $642 = $$749$i + 8 | 0;
    $643 = $642;
    $644 = $643 & 7;
    $645 = ($644 | 0) == 0;
    $646 = 0 - $643 | 0;
    $647 = $646 & 7;
    $648 = $645 ? 0 : $647;
    $649 = $$749$i + $648 | 0;
    $650 = $641 - $648 | 0;
    SAFE_HEAP_STORE(5732 | 0, $649 | 0, 4);
    SAFE_HEAP_STORE(5720 | 0, $650 | 0, 4);
    $651 = $650 | 1;
    $652 = $649 + 4 | 0;
    SAFE_HEAP_STORE($652 | 0, $651 | 0, 4);
    $653 = $649 + $650 | 0;
    $654 = $653 + 4 | 0;
    SAFE_HEAP_STORE($654 | 0, 40 | 0, 4);
    $655 = SAFE_HEAP_LOAD(6196 | 0, 4, 0) | 0 | 0;
    SAFE_HEAP_STORE(5736 | 0, $655 | 0, 4);
   } else {
    $$024371$i = 6156;
    while (1) {
     $656 = SAFE_HEAP_LOAD($$024371$i | 0, 4, 0) | 0 | 0;
     $657 = $$024371$i + 4 | 0;
     $658 = SAFE_HEAP_LOAD($657 | 0, 4, 0) | 0 | 0;
     $659 = $656 + $658 | 0;
     $660 = ($$749$i | 0) == ($659 | 0);
     if ($660) {
      label = 190;
      break;
     }
     $661 = $$024371$i + 8 | 0;
     $662 = SAFE_HEAP_LOAD($661 | 0, 4, 0) | 0 | 0;
     $663 = ($662 | 0) == (0 | 0);
     if ($663) {
      break;
     } else {
      $$024371$i = $662;
     }
    }
    if ((label | 0) == 190) {
     $664 = $$024371$i + 12 | 0;
     $665 = SAFE_HEAP_LOAD($664 | 0, 4, 0) | 0 | 0;
     $666 = $665 & 8;
     $667 = ($666 | 0) == 0;
     if ($667) {
      $668 = $630 >>> 0 >= $656 >>> 0;
      $669 = $630 >>> 0 < $$749$i >>> 0;
      $or$cond51$i = $669 & $668;
      if ($or$cond51$i) {
       $670 = $658 + $$723948$i | 0;
       SAFE_HEAP_STORE($657 | 0, $670 | 0, 4);
       $671 = SAFE_HEAP_LOAD(5720 | 0, 4, 0) | 0 | 0;
       $672 = $630 + 8 | 0;
       $673 = $672;
       $674 = $673 & 7;
       $675 = ($674 | 0) == 0;
       $676 = 0 - $673 | 0;
       $677 = $676 & 7;
       $678 = $675 ? 0 : $677;
       $679 = $630 + $678 | 0;
       $680 = $$723948$i - $678 | 0;
       $681 = $671 + $680 | 0;
       SAFE_HEAP_STORE(5732 | 0, $679 | 0, 4);
       SAFE_HEAP_STORE(5720 | 0, $681 | 0, 4);
       $682 = $681 | 1;
       $683 = $679 + 4 | 0;
       SAFE_HEAP_STORE($683 | 0, $682 | 0, 4);
       $684 = $679 + $681 | 0;
       $685 = $684 + 4 | 0;
       SAFE_HEAP_STORE($685 | 0, 40 | 0, 4);
       $686 = SAFE_HEAP_LOAD(6196 | 0, 4, 0) | 0 | 0;
       SAFE_HEAP_STORE(5736 | 0, $686 | 0, 4);
       break;
      }
     }
    }
    $687 = SAFE_HEAP_LOAD(5724 | 0, 4, 0) | 0 | 0;
    $688 = $$749$i >>> 0 < $687 >>> 0;
    if ($688) {
     SAFE_HEAP_STORE(5724 | 0, $$749$i | 0, 4);
     $752 = $$749$i;
    } else {
     $752 = $687;
    }
    $689 = $$749$i + $$723948$i | 0;
    $$124470$i = 6156;
    while (1) {
     $690 = SAFE_HEAP_LOAD($$124470$i | 0, 4, 0) | 0 | 0;
     $691 = ($690 | 0) == ($689 | 0);
     if ($691) {
      label = 198;
      break;
     }
     $692 = $$124470$i + 8 | 0;
     $693 = SAFE_HEAP_LOAD($692 | 0, 4, 0) | 0 | 0;
     $694 = ($693 | 0) == (0 | 0);
     if ($694) {
      break;
     } else {
      $$124470$i = $693;
     }
    }
    if ((label | 0) == 198) {
     $695 = $$124470$i + 12 | 0;
     $696 = SAFE_HEAP_LOAD($695 | 0, 4, 0) | 0 | 0;
     $697 = $696 & 8;
     $698 = ($697 | 0) == 0;
     if ($698) {
      SAFE_HEAP_STORE($$124470$i | 0, $$749$i | 0, 4);
      $699 = $$124470$i + 4 | 0;
      $700 = SAFE_HEAP_LOAD($699 | 0, 4, 0) | 0 | 0;
      $701 = $700 + $$723948$i | 0;
      SAFE_HEAP_STORE($699 | 0, $701 | 0, 4);
      $702 = $$749$i + 8 | 0;
      $703 = $702;
      $704 = $703 & 7;
      $705 = ($704 | 0) == 0;
      $706 = 0 - $703 | 0;
      $707 = $706 & 7;
      $708 = $705 ? 0 : $707;
      $709 = $$749$i + $708 | 0;
      $710 = $689 + 8 | 0;
      $711 = $710;
      $712 = $711 & 7;
      $713 = ($712 | 0) == 0;
      $714 = 0 - $711 | 0;
      $715 = $714 & 7;
      $716 = $713 ? 0 : $715;
      $717 = $689 + $716 | 0;
      $718 = $717;
      $719 = $709;
      $720 = $718 - $719 | 0;
      $721 = $709 + $$0197 | 0;
      $722 = $720 - $$0197 | 0;
      $723 = $$0197 | 3;
      $724 = $709 + 4 | 0;
      SAFE_HEAP_STORE($724 | 0, $723 | 0, 4);
      $725 = ($717 | 0) == ($630 | 0);
      do {
       if ($725) {
        $726 = SAFE_HEAP_LOAD(5720 | 0, 4, 0) | 0 | 0;
        $727 = $726 + $722 | 0;
        SAFE_HEAP_STORE(5720 | 0, $727 | 0, 4);
        SAFE_HEAP_STORE(5732 | 0, $721 | 0, 4);
        $728 = $727 | 1;
        $729 = $721 + 4 | 0;
        SAFE_HEAP_STORE($729 | 0, $728 | 0, 4);
       } else {
        $730 = SAFE_HEAP_LOAD(5728 | 0, 4, 0) | 0 | 0;
        $731 = ($717 | 0) == ($730 | 0);
        if ($731) {
         $732 = SAFE_HEAP_LOAD(5716 | 0, 4, 0) | 0 | 0;
         $733 = $732 + $722 | 0;
         SAFE_HEAP_STORE(5716 | 0, $733 | 0, 4);
         SAFE_HEAP_STORE(5728 | 0, $721 | 0, 4);
         $734 = $733 | 1;
         $735 = $721 + 4 | 0;
         SAFE_HEAP_STORE($735 | 0, $734 | 0, 4);
         $736 = $721 + $733 | 0;
         SAFE_HEAP_STORE($736 | 0, $733 | 0, 4);
         break;
        }
        $737 = $717 + 4 | 0;
        $738 = SAFE_HEAP_LOAD($737 | 0, 4, 0) | 0 | 0;
        $739 = $738 & 3;
        $740 = ($739 | 0) == 1;
        if ($740) {
         $741 = $738 & -8;
         $742 = $738 >>> 3;
         $743 = $738 >>> 0 < 256;
         L314 : do {
          if ($743) {
           $744 = $717 + 8 | 0;
           $745 = SAFE_HEAP_LOAD($744 | 0, 4, 0) | 0 | 0;
           $746 = $717 + 12 | 0;
           $747 = SAFE_HEAP_LOAD($746 | 0, 4, 0) | 0 | 0;
           $748 = $742 << 1;
           $749 = 5748 + ($748 << 2) | 0;
           $750 = ($745 | 0) == ($749 | 0);
           do {
            if (!$750) {
             $751 = $745 >>> 0 < $752 >>> 0;
             if ($751) {
              _abort();
             }
             $753 = $745 + 12 | 0;
             $754 = SAFE_HEAP_LOAD($753 | 0, 4, 0) | 0 | 0;
             $755 = ($754 | 0) == ($717 | 0);
             if ($755) {
              break;
             }
             _abort();
            }
           } while (0);
           $756 = ($747 | 0) == ($745 | 0);
           if ($756) {
            $757 = 1 << $742;
            $758 = $757 ^ -1;
            $759 = SAFE_HEAP_LOAD(1427 * 4 | 0, 4, 0) | 0 | 0;
            $760 = $759 & $758;
            SAFE_HEAP_STORE(1427 * 4 | 0, $760 | 0, 4);
            break;
           }
           $761 = ($747 | 0) == ($749 | 0);
           do {
            if ($761) {
             $$pre10$i$i = $747 + 8 | 0;
             $$pre$phi11$i$iZ2D = $$pre10$i$i;
            } else {
             $762 = $747 >>> 0 < $752 >>> 0;
             if ($762) {
              _abort();
             }
             $763 = $747 + 8 | 0;
             $764 = SAFE_HEAP_LOAD($763 | 0, 4, 0) | 0 | 0;
             $765 = ($764 | 0) == ($717 | 0);
             if ($765) {
              $$pre$phi11$i$iZ2D = $763;
              break;
             }
             _abort();
            }
           } while (0);
           $766 = $745 + 12 | 0;
           SAFE_HEAP_STORE($766 | 0, $747 | 0, 4);
           SAFE_HEAP_STORE($$pre$phi11$i$iZ2D | 0, $745 | 0, 4);
          } else {
           $767 = $717 + 24 | 0;
           $768 = SAFE_HEAP_LOAD($767 | 0, 4, 0) | 0 | 0;
           $769 = $717 + 12 | 0;
           $770 = SAFE_HEAP_LOAD($769 | 0, 4, 0) | 0 | 0;
           $771 = ($770 | 0) == ($717 | 0);
           do {
            if ($771) {
             $781 = $717 + 16 | 0;
             $782 = $781 + 4 | 0;
             $783 = SAFE_HEAP_LOAD($782 | 0, 4, 0) | 0 | 0;
             $784 = ($783 | 0) == (0 | 0);
             if ($784) {
              $785 = SAFE_HEAP_LOAD($781 | 0, 4, 0) | 0 | 0;
              $786 = ($785 | 0) == (0 | 0);
              if ($786) {
               $$3$i$i = 0;
               break;
              } else {
               $$1291$i$i = $785;
               $$1293$i$i = $781;
              }
             } else {
              $$1291$i$i = $783;
              $$1293$i$i = $782;
             }
             while (1) {
              $787 = $$1291$i$i + 20 | 0;
              $788 = SAFE_HEAP_LOAD($787 | 0, 4, 0) | 0 | 0;
              $789 = ($788 | 0) == (0 | 0);
              if (!$789) {
               $$1291$i$i = $788;
               $$1293$i$i = $787;
               continue;
              }
              $790 = $$1291$i$i + 16 | 0;
              $791 = SAFE_HEAP_LOAD($790 | 0, 4, 0) | 0 | 0;
              $792 = ($791 | 0) == (0 | 0);
              if ($792) {
               break;
              } else {
               $$1291$i$i = $791;
               $$1293$i$i = $790;
              }
             }
             $793 = $$1293$i$i >>> 0 < $752 >>> 0;
             if ($793) {
              _abort();
             } else {
              SAFE_HEAP_STORE($$1293$i$i | 0, 0 | 0, 4);
              $$3$i$i = $$1291$i$i;
              break;
             }
            } else {
             $772 = $717 + 8 | 0;
             $773 = SAFE_HEAP_LOAD($772 | 0, 4, 0) | 0 | 0;
             $774 = $773 >>> 0 < $752 >>> 0;
             if ($774) {
              _abort();
             }
             $775 = $773 + 12 | 0;
             $776 = SAFE_HEAP_LOAD($775 | 0, 4, 0) | 0 | 0;
             $777 = ($776 | 0) == ($717 | 0);
             if (!$777) {
              _abort();
             }
             $778 = $770 + 8 | 0;
             $779 = SAFE_HEAP_LOAD($778 | 0, 4, 0) | 0 | 0;
             $780 = ($779 | 0) == ($717 | 0);
             if ($780) {
              SAFE_HEAP_STORE($775 | 0, $770 | 0, 4);
              SAFE_HEAP_STORE($778 | 0, $773 | 0, 4);
              $$3$i$i = $770;
              break;
             } else {
              _abort();
             }
            }
           } while (0);
           $794 = ($768 | 0) == (0 | 0);
           if ($794) {
            break;
           }
           $795 = $717 + 28 | 0;
           $796 = SAFE_HEAP_LOAD($795 | 0, 4, 0) | 0 | 0;
           $797 = 6012 + ($796 << 2) | 0;
           $798 = SAFE_HEAP_LOAD($797 | 0, 4, 0) | 0 | 0;
           $799 = ($717 | 0) == ($798 | 0);
           do {
            if ($799) {
             SAFE_HEAP_STORE($797 | 0, $$3$i$i | 0, 4);
             $cond$i$i = ($$3$i$i | 0) == (0 | 0);
             if (!$cond$i$i) {
              break;
             }
             $800 = 1 << $796;
             $801 = $800 ^ -1;
             $802 = SAFE_HEAP_LOAD(5712 | 0, 4, 0) | 0 | 0;
             $803 = $802 & $801;
             SAFE_HEAP_STORE(5712 | 0, $803 | 0, 4);
             break L314;
            } else {
             $804 = SAFE_HEAP_LOAD(5724 | 0, 4, 0) | 0 | 0;
             $805 = $768 >>> 0 < $804 >>> 0;
             if ($805) {
              _abort();
             } else {
              $806 = $768 + 16 | 0;
              $807 = SAFE_HEAP_LOAD($806 | 0, 4, 0) | 0 | 0;
              $not$$i17$i = ($807 | 0) != ($717 | 0);
              $$sink1$i$i = $not$$i17$i & 1;
              $808 = ($768 + 16 | 0) + ($$sink1$i$i << 2) | 0;
              SAFE_HEAP_STORE($808 | 0, $$3$i$i | 0, 4);
              $809 = ($$3$i$i | 0) == (0 | 0);
              if ($809) {
               break L314;
              } else {
               break;
              }
             }
            }
           } while (0);
           $810 = SAFE_HEAP_LOAD(5724 | 0, 4, 0) | 0 | 0;
           $811 = $$3$i$i >>> 0 < $810 >>> 0;
           if ($811) {
            _abort();
           }
           $812 = $$3$i$i + 24 | 0;
           SAFE_HEAP_STORE($812 | 0, $768 | 0, 4);
           $813 = $717 + 16 | 0;
           $814 = SAFE_HEAP_LOAD($813 | 0, 4, 0) | 0 | 0;
           $815 = ($814 | 0) == (0 | 0);
           do {
            if (!$815) {
             $816 = $814 >>> 0 < $810 >>> 0;
             if ($816) {
              _abort();
             } else {
              $817 = $$3$i$i + 16 | 0;
              SAFE_HEAP_STORE($817 | 0, $814 | 0, 4);
              $818 = $814 + 24 | 0;
              SAFE_HEAP_STORE($818 | 0, $$3$i$i | 0, 4);
              break;
             }
            }
           } while (0);
           $819 = $813 + 4 | 0;
           $820 = SAFE_HEAP_LOAD($819 | 0, 4, 0) | 0 | 0;
           $821 = ($820 | 0) == (0 | 0);
           if ($821) {
            break;
           }
           $822 = SAFE_HEAP_LOAD(5724 | 0, 4, 0) | 0 | 0;
           $823 = $820 >>> 0 < $822 >>> 0;
           if ($823) {
            _abort();
           } else {
            $824 = $$3$i$i + 20 | 0;
            SAFE_HEAP_STORE($824 | 0, $820 | 0, 4);
            $825 = $820 + 24 | 0;
            SAFE_HEAP_STORE($825 | 0, $$3$i$i | 0, 4);
            break;
           }
          }
         } while (0);
         $826 = $717 + $741 | 0;
         $827 = $741 + $722 | 0;
         $$0$i18$i = $826;
         $$0287$i$i = $827;
        } else {
         $$0$i18$i = $717;
         $$0287$i$i = $722;
        }
        $828 = $$0$i18$i + 4 | 0;
        $829 = SAFE_HEAP_LOAD($828 | 0, 4, 0) | 0 | 0;
        $830 = $829 & -2;
        SAFE_HEAP_STORE($828 | 0, $830 | 0, 4);
        $831 = $$0287$i$i | 1;
        $832 = $721 + 4 | 0;
        SAFE_HEAP_STORE($832 | 0, $831 | 0, 4);
        $833 = $721 + $$0287$i$i | 0;
        SAFE_HEAP_STORE($833 | 0, $$0287$i$i | 0, 4);
        $834 = $$0287$i$i >>> 3;
        $835 = $$0287$i$i >>> 0 < 256;
        if ($835) {
         $836 = $834 << 1;
         $837 = 5748 + ($836 << 2) | 0;
         $838 = SAFE_HEAP_LOAD(1427 * 4 | 0, 4, 0) | 0 | 0;
         $839 = 1 << $834;
         $840 = $838 & $839;
         $841 = ($840 | 0) == 0;
         do {
          if ($841) {
           $842 = $838 | $839;
           SAFE_HEAP_STORE(1427 * 4 | 0, $842 | 0, 4);
           $$pre$i19$i = $837 + 8 | 0;
           $$0295$i$i = $837;
           $$pre$phi$i20$iZ2D = $$pre$i19$i;
          } else {
           $843 = $837 + 8 | 0;
           $844 = SAFE_HEAP_LOAD($843 | 0, 4, 0) | 0 | 0;
           $845 = SAFE_HEAP_LOAD(5724 | 0, 4, 0) | 0 | 0;
           $846 = $844 >>> 0 < $845 >>> 0;
           if (!$846) {
            $$0295$i$i = $844;
            $$pre$phi$i20$iZ2D = $843;
            break;
           }
           _abort();
          }
         } while (0);
         SAFE_HEAP_STORE($$pre$phi$i20$iZ2D | 0, $721 | 0, 4);
         $847 = $$0295$i$i + 12 | 0;
         SAFE_HEAP_STORE($847 | 0, $721 | 0, 4);
         $848 = $721 + 8 | 0;
         SAFE_HEAP_STORE($848 | 0, $$0295$i$i | 0, 4);
         $849 = $721 + 12 | 0;
         SAFE_HEAP_STORE($849 | 0, $837 | 0, 4);
         break;
        }
        $850 = $$0287$i$i >>> 8;
        $851 = ($850 | 0) == 0;
        do {
         if ($851) {
          $$0296$i$i = 0;
         } else {
          $852 = $$0287$i$i >>> 0 > 16777215;
          if ($852) {
           $$0296$i$i = 31;
           break;
          }
          $853 = $850 + 1048320 | 0;
          $854 = $853 >>> 16;
          $855 = $854 & 8;
          $856 = $850 << $855;
          $857 = $856 + 520192 | 0;
          $858 = $857 >>> 16;
          $859 = $858 & 4;
          $860 = $859 | $855;
          $861 = $856 << $859;
          $862 = $861 + 245760 | 0;
          $863 = $862 >>> 16;
          $864 = $863 & 2;
          $865 = $860 | $864;
          $866 = 14 - $865 | 0;
          $867 = $861 << $864;
          $868 = $867 >>> 15;
          $869 = $866 + $868 | 0;
          $870 = $869 << 1;
          $871 = $869 + 7 | 0;
          $872 = $$0287$i$i >>> $871;
          $873 = $872 & 1;
          $874 = $873 | $870;
          $$0296$i$i = $874;
         }
        } while (0);
        $875 = 6012 + ($$0296$i$i << 2) | 0;
        $876 = $721 + 28 | 0;
        SAFE_HEAP_STORE($876 | 0, $$0296$i$i | 0, 4);
        $877 = $721 + 16 | 0;
        $878 = $877 + 4 | 0;
        SAFE_HEAP_STORE($878 | 0, 0 | 0, 4);
        SAFE_HEAP_STORE($877 | 0, 0 | 0, 4);
        $879 = SAFE_HEAP_LOAD(5712 | 0, 4, 0) | 0 | 0;
        $880 = 1 << $$0296$i$i;
        $881 = $879 & $880;
        $882 = ($881 | 0) == 0;
        if ($882) {
         $883 = $879 | $880;
         SAFE_HEAP_STORE(5712 | 0, $883 | 0, 4);
         SAFE_HEAP_STORE($875 | 0, $721 | 0, 4);
         $884 = $721 + 24 | 0;
         SAFE_HEAP_STORE($884 | 0, $875 | 0, 4);
         $885 = $721 + 12 | 0;
         SAFE_HEAP_STORE($885 | 0, $721 | 0, 4);
         $886 = $721 + 8 | 0;
         SAFE_HEAP_STORE($886 | 0, $721 | 0, 4);
         break;
        }
        $887 = SAFE_HEAP_LOAD($875 | 0, 4, 0) | 0 | 0;
        $888 = ($$0296$i$i | 0) == 31;
        $889 = $$0296$i$i >>> 1;
        $890 = 25 - $889 | 0;
        $891 = $888 ? 0 : $890;
        $892 = $$0287$i$i << $891;
        $$0288$i$i = $892;
        $$0289$i$i = $887;
        while (1) {
         $893 = $$0289$i$i + 4 | 0;
         $894 = SAFE_HEAP_LOAD($893 | 0, 4, 0) | 0 | 0;
         $895 = $894 & -8;
         $896 = ($895 | 0) == ($$0287$i$i | 0);
         if ($896) {
          label = 265;
          break;
         }
         $897 = $$0288$i$i >>> 31;
         $898 = ($$0289$i$i + 16 | 0) + ($897 << 2) | 0;
         $899 = $$0288$i$i << 1;
         $900 = SAFE_HEAP_LOAD($898 | 0, 4, 0) | 0 | 0;
         $901 = ($900 | 0) == (0 | 0);
         if ($901) {
          label = 262;
          break;
         } else {
          $$0288$i$i = $899;
          $$0289$i$i = $900;
         }
        }
        if ((label | 0) == 262) {
         $902 = SAFE_HEAP_LOAD(5724 | 0, 4, 0) | 0 | 0;
         $903 = $898 >>> 0 < $902 >>> 0;
         if ($903) {
          _abort();
         } else {
          SAFE_HEAP_STORE($898 | 0, $721 | 0, 4);
          $904 = $721 + 24 | 0;
          SAFE_HEAP_STORE($904 | 0, $$0289$i$i | 0, 4);
          $905 = $721 + 12 | 0;
          SAFE_HEAP_STORE($905 | 0, $721 | 0, 4);
          $906 = $721 + 8 | 0;
          SAFE_HEAP_STORE($906 | 0, $721 | 0, 4);
          break;
         }
        } else if ((label | 0) == 265) {
         $907 = $$0289$i$i + 8 | 0;
         $908 = SAFE_HEAP_LOAD($907 | 0, 4, 0) | 0 | 0;
         $909 = SAFE_HEAP_LOAD(5724 | 0, 4, 0) | 0 | 0;
         $910 = $908 >>> 0 >= $909 >>> 0;
         $not$7$i$i = $$0289$i$i >>> 0 >= $909 >>> 0;
         $911 = $910 & $not$7$i$i;
         if ($911) {
          $912 = $908 + 12 | 0;
          SAFE_HEAP_STORE($912 | 0, $721 | 0, 4);
          SAFE_HEAP_STORE($907 | 0, $721 | 0, 4);
          $913 = $721 + 8 | 0;
          SAFE_HEAP_STORE($913 | 0, $908 | 0, 4);
          $914 = $721 + 12 | 0;
          SAFE_HEAP_STORE($914 | 0, $$0289$i$i | 0, 4);
          $915 = $721 + 24 | 0;
          SAFE_HEAP_STORE($915 | 0, 0 | 0, 4);
          break;
         } else {
          _abort();
         }
        }
       }
      } while (0);
      $1047 = $709 + 8 | 0;
      $$0 = $1047;
      STACKTOP = sp;
      return $$0 | 0;
     }
    }
    $$0$i$i$i = 6156;
    while (1) {
     $916 = SAFE_HEAP_LOAD($$0$i$i$i | 0, 4, 0) | 0 | 0;
     $917 = $916 >>> 0 > $630 >>> 0;
     if (!$917) {
      $918 = $$0$i$i$i + 4 | 0;
      $919 = SAFE_HEAP_LOAD($918 | 0, 4, 0) | 0 | 0;
      $920 = $916 + $919 | 0;
      $921 = $920 >>> 0 > $630 >>> 0;
      if ($921) {
       break;
      }
     }
     $922 = $$0$i$i$i + 8 | 0;
     $923 = SAFE_HEAP_LOAD($922 | 0, 4, 0) | 0 | 0;
     $$0$i$i$i = $923;
    }
    $924 = $920 + -47 | 0;
    $925 = $924 + 8 | 0;
    $926 = $925;
    $927 = $926 & 7;
    $928 = ($927 | 0) == 0;
    $929 = 0 - $926 | 0;
    $930 = $929 & 7;
    $931 = $928 ? 0 : $930;
    $932 = $924 + $931 | 0;
    $933 = $630 + 16 | 0;
    $934 = $932 >>> 0 < $933 >>> 0;
    $935 = $934 ? $630 : $932;
    $936 = $935 + 8 | 0;
    $937 = $935 + 24 | 0;
    $938 = $$723948$i + -40 | 0;
    $939 = $$749$i + 8 | 0;
    $940 = $939;
    $941 = $940 & 7;
    $942 = ($941 | 0) == 0;
    $943 = 0 - $940 | 0;
    $944 = $943 & 7;
    $945 = $942 ? 0 : $944;
    $946 = $$749$i + $945 | 0;
    $947 = $938 - $945 | 0;
    SAFE_HEAP_STORE(5732 | 0, $946 | 0, 4);
    SAFE_HEAP_STORE(5720 | 0, $947 | 0, 4);
    $948 = $947 | 1;
    $949 = $946 + 4 | 0;
    SAFE_HEAP_STORE($949 | 0, $948 | 0, 4);
    $950 = $946 + $947 | 0;
    $951 = $950 + 4 | 0;
    SAFE_HEAP_STORE($951 | 0, 40 | 0, 4);
    $952 = SAFE_HEAP_LOAD(6196 | 0, 4, 0) | 0 | 0;
    SAFE_HEAP_STORE(5736 | 0, $952 | 0, 4);
    $953 = $935 + 4 | 0;
    SAFE_HEAP_STORE($953 | 0, 27 | 0, 4);
    {}
    SAFE_HEAP_STORE($936 | 0, SAFE_HEAP_LOAD(6156 | 0, 4, 0) | 0 | 0 | 0, 4);
    SAFE_HEAP_STORE($936 + 4 | 0, SAFE_HEAP_LOAD(6156 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
    SAFE_HEAP_STORE($936 + 8 | 0, SAFE_HEAP_LOAD(6156 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
    SAFE_HEAP_STORE($936 + 12 | 0, SAFE_HEAP_LOAD(6156 + 12 | 0, 4, 0) | 0 | 0 | 0, 4);
    SAFE_HEAP_STORE(6156 | 0, $$749$i | 0, 4);
    SAFE_HEAP_STORE(6160 | 0, $$723948$i | 0, 4);
    SAFE_HEAP_STORE(6168 | 0, 0 | 0, 4);
    SAFE_HEAP_STORE(6164 | 0, $936 | 0, 4);
    $955 = $937;
    while (1) {
     $954 = $955 + 4 | 0;
     SAFE_HEAP_STORE($954 | 0, 7 | 0, 4);
     $956 = $955 + 8 | 0;
     $957 = $956 >>> 0 < $920 >>> 0;
     if ($957) {
      $955 = $954;
     } else {
      break;
     }
    }
    $958 = ($935 | 0) == ($630 | 0);
    if (!$958) {
     $959 = $935;
     $960 = $630;
     $961 = $959 - $960 | 0;
     $962 = SAFE_HEAP_LOAD($953 | 0, 4, 0) | 0 | 0;
     $963 = $962 & -2;
     SAFE_HEAP_STORE($953 | 0, $963 | 0, 4);
     $964 = $961 | 1;
     $965 = $630 + 4 | 0;
     SAFE_HEAP_STORE($965 | 0, $964 | 0, 4);
     SAFE_HEAP_STORE($935 | 0, $961 | 0, 4);
     $966 = $961 >>> 3;
     $967 = $961 >>> 0 < 256;
     if ($967) {
      $968 = $966 << 1;
      $969 = 5748 + ($968 << 2) | 0;
      $970 = SAFE_HEAP_LOAD(1427 * 4 | 0, 4, 0) | 0 | 0;
      $971 = 1 << $966;
      $972 = $970 & $971;
      $973 = ($972 | 0) == 0;
      if ($973) {
       $974 = $970 | $971;
       SAFE_HEAP_STORE(1427 * 4 | 0, $974 | 0, 4);
       $$pre$i$i = $969 + 8 | 0;
       $$0211$i$i = $969;
       $$pre$phi$i$iZ2D = $$pre$i$i;
      } else {
       $975 = $969 + 8 | 0;
       $976 = SAFE_HEAP_LOAD($975 | 0, 4, 0) | 0 | 0;
       $977 = SAFE_HEAP_LOAD(5724 | 0, 4, 0) | 0 | 0;
       $978 = $976 >>> 0 < $977 >>> 0;
       if ($978) {
        _abort();
       } else {
        $$0211$i$i = $976;
        $$pre$phi$i$iZ2D = $975;
       }
      }
      SAFE_HEAP_STORE($$pre$phi$i$iZ2D | 0, $630 | 0, 4);
      $979 = $$0211$i$i + 12 | 0;
      SAFE_HEAP_STORE($979 | 0, $630 | 0, 4);
      $980 = $630 + 8 | 0;
      SAFE_HEAP_STORE($980 | 0, $$0211$i$i | 0, 4);
      $981 = $630 + 12 | 0;
      SAFE_HEAP_STORE($981 | 0, $969 | 0, 4);
      break;
     }
     $982 = $961 >>> 8;
     $983 = ($982 | 0) == 0;
     if ($983) {
      $$0212$i$i = 0;
     } else {
      $984 = $961 >>> 0 > 16777215;
      if ($984) {
       $$0212$i$i = 31;
      } else {
       $985 = $982 + 1048320 | 0;
       $986 = $985 >>> 16;
       $987 = $986 & 8;
       $988 = $982 << $987;
       $989 = $988 + 520192 | 0;
       $990 = $989 >>> 16;
       $991 = $990 & 4;
       $992 = $991 | $987;
       $993 = $988 << $991;
       $994 = $993 + 245760 | 0;
       $995 = $994 >>> 16;
       $996 = $995 & 2;
       $997 = $992 | $996;
       $998 = 14 - $997 | 0;
       $999 = $993 << $996;
       $1000 = $999 >>> 15;
       $1001 = $998 + $1000 | 0;
       $1002 = $1001 << 1;
       $1003 = $1001 + 7 | 0;
       $1004 = $961 >>> $1003;
       $1005 = $1004 & 1;
       $1006 = $1005 | $1002;
       $$0212$i$i = $1006;
      }
     }
     $1007 = 6012 + ($$0212$i$i << 2) | 0;
     $1008 = $630 + 28 | 0;
     SAFE_HEAP_STORE($1008 | 0, $$0212$i$i | 0, 4);
     $1009 = $630 + 20 | 0;
     SAFE_HEAP_STORE($1009 | 0, 0 | 0, 4);
     SAFE_HEAP_STORE($933 | 0, 0 | 0, 4);
     $1010 = SAFE_HEAP_LOAD(5712 | 0, 4, 0) | 0 | 0;
     $1011 = 1 << $$0212$i$i;
     $1012 = $1010 & $1011;
     $1013 = ($1012 | 0) == 0;
     if ($1013) {
      $1014 = $1010 | $1011;
      SAFE_HEAP_STORE(5712 | 0, $1014 | 0, 4);
      SAFE_HEAP_STORE($1007 | 0, $630 | 0, 4);
      $1015 = $630 + 24 | 0;
      SAFE_HEAP_STORE($1015 | 0, $1007 | 0, 4);
      $1016 = $630 + 12 | 0;
      SAFE_HEAP_STORE($1016 | 0, $630 | 0, 4);
      $1017 = $630 + 8 | 0;
      SAFE_HEAP_STORE($1017 | 0, $630 | 0, 4);
      break;
     }
     $1018 = SAFE_HEAP_LOAD($1007 | 0, 4, 0) | 0 | 0;
     $1019 = ($$0212$i$i | 0) == 31;
     $1020 = $$0212$i$i >>> 1;
     $1021 = 25 - $1020 | 0;
     $1022 = $1019 ? 0 : $1021;
     $1023 = $961 << $1022;
     $$0206$i$i = $1023;
     $$0207$i$i = $1018;
     while (1) {
      $1024 = $$0207$i$i + 4 | 0;
      $1025 = SAFE_HEAP_LOAD($1024 | 0, 4, 0) | 0 | 0;
      $1026 = $1025 & -8;
      $1027 = ($1026 | 0) == ($961 | 0);
      if ($1027) {
       label = 292;
       break;
      }
      $1028 = $$0206$i$i >>> 31;
      $1029 = ($$0207$i$i + 16 | 0) + ($1028 << 2) | 0;
      $1030 = $$0206$i$i << 1;
      $1031 = SAFE_HEAP_LOAD($1029 | 0, 4, 0) | 0 | 0;
      $1032 = ($1031 | 0) == (0 | 0);
      if ($1032) {
       label = 289;
       break;
      } else {
       $$0206$i$i = $1030;
       $$0207$i$i = $1031;
      }
     }
     if ((label | 0) == 289) {
      $1033 = SAFE_HEAP_LOAD(5724 | 0, 4, 0) | 0 | 0;
      $1034 = $1029 >>> 0 < $1033 >>> 0;
      if ($1034) {
       _abort();
      } else {
       SAFE_HEAP_STORE($1029 | 0, $630 | 0, 4);
       $1035 = $630 + 24 | 0;
       SAFE_HEAP_STORE($1035 | 0, $$0207$i$i | 0, 4);
       $1036 = $630 + 12 | 0;
       SAFE_HEAP_STORE($1036 | 0, $630 | 0, 4);
       $1037 = $630 + 8 | 0;
       SAFE_HEAP_STORE($1037 | 0, $630 | 0, 4);
       break;
      }
     } else if ((label | 0) == 292) {
      $1038 = $$0207$i$i + 8 | 0;
      $1039 = SAFE_HEAP_LOAD($1038 | 0, 4, 0) | 0 | 0;
      $1040 = SAFE_HEAP_LOAD(5724 | 0, 4, 0) | 0 | 0;
      $1041 = $1039 >>> 0 >= $1040 >>> 0;
      $not$$i$i = $$0207$i$i >>> 0 >= $1040 >>> 0;
      $1042 = $1041 & $not$$i$i;
      if ($1042) {
       $1043 = $1039 + 12 | 0;
       SAFE_HEAP_STORE($1043 | 0, $630 | 0, 4);
       SAFE_HEAP_STORE($1038 | 0, $630 | 0, 4);
       $1044 = $630 + 8 | 0;
       SAFE_HEAP_STORE($1044 | 0, $1039 | 0, 4);
       $1045 = $630 + 12 | 0;
       SAFE_HEAP_STORE($1045 | 0, $$0207$i$i | 0, 4);
       $1046 = $630 + 24 | 0;
       SAFE_HEAP_STORE($1046 | 0, 0 | 0, 4);
       break;
      } else {
       _abort();
      }
     }
    }
   }
  } while (0);
  $1048 = SAFE_HEAP_LOAD(5720 | 0, 4, 0) | 0 | 0;
  $1049 = $1048 >>> 0 > $$0197 >>> 0;
  if ($1049) {
   $1050 = $1048 - $$0197 | 0;
   SAFE_HEAP_STORE(5720 | 0, $1050 | 0, 4);
   $1051 = SAFE_HEAP_LOAD(5732 | 0, 4, 0) | 0 | 0;
   $1052 = $1051 + $$0197 | 0;
   SAFE_HEAP_STORE(5732 | 0, $1052 | 0, 4);
   $1053 = $1050 | 1;
   $1054 = $1052 + 4 | 0;
   SAFE_HEAP_STORE($1054 | 0, $1053 | 0, 4);
   $1055 = $$0197 | 3;
   $1056 = $1051 + 4 | 0;
   SAFE_HEAP_STORE($1056 | 0, $1055 | 0, 4);
   $1057 = $1051 + 8 | 0;
   $$0 = $1057;
   STACKTOP = sp;
   return $$0 | 0;
  }
 }
 $1058 = ___errno_location() | 0;
 SAFE_HEAP_STORE($1058 | 0, 12 | 0, 4);
 $$0 = 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function _fmt_fp($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = +$1;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$ = 0, $$$ = 0, $$$$559 = 0.0, $$$3484 = 0, $$$3484691 = 0, $$$3484692 = 0, $$$3501 = 0, $$$4502 = 0, $$$542 = 0.0, $$$559 = 0.0, $$0 = 0, $$0463$lcssa = 0, $$0463584 = 0, $$0464594 = 0, $$0471 = 0.0, $$0479 = 0, $$0487642 = 0, $$0488 = 0, $$0488653 = 0, $$0488655 = 0;
 var $$0496$$9 = 0, $$0497654 = 0, $$0498 = 0, $$0509582 = 0.0, $$0510 = 0, $$0511 = 0, $$0514637 = 0, $$0520 = 0, $$0521 = 0, $$0521$ = 0, $$0523 = 0, $$0525 = 0, $$0527 = 0, $$0527629 = 0, $$0527631 = 0, $$0530636 = 0, $$1465 = 0, $$1467 = 0.0, $$1469 = 0.0, $$1472 = 0.0;
 var $$1480 = 0, $$1482$lcssa = 0, $$1482661 = 0, $$1489641 = 0, $$1499$lcssa = 0, $$1499660 = 0, $$1508583 = 0, $$1512$lcssa = 0, $$1512607 = 0, $$1515 = 0, $$1524 = 0, $$1526 = 0, $$1528614 = 0, $$1531$lcssa = 0, $$1531630 = 0, $$1598 = 0, $$2 = 0, $$2473 = 0.0, $$2476 = 0, $$2476$$547 = 0;
 var $$2476$$549 = 0, $$2483$ph = 0, $$2500 = 0, $$2513 = 0, $$2516618 = 0, $$2529 = 0, $$2532617 = 0, $$3 = 0.0, $$3477 = 0, $$3484$lcssa = 0, $$3484648 = 0, $$3501$lcssa = 0, $$3501647 = 0, $$3533613 = 0, $$4 = 0.0, $$4478$lcssa = 0, $$4478590 = 0, $$4492 = 0, $$4502 = 0, $$4518 = 0;
 var $$5$lcssa = 0, $$534$ = 0, $$539 = 0, $$539$ = 0, $$542 = 0.0, $$546 = 0, $$548 = 0, $$5486$lcssa = 0, $$5486623 = 0, $$5493597 = 0, $$5519$ph = 0, $$555 = 0, $$556 = 0, $$559 = 0.0, $$5602 = 0, $$6 = 0, $$6494589 = 0, $$7495601 = 0, $$7505 = 0, $$7505$ = 0;
 var $$7505$ph = 0, $$8 = 0, $$9$ph = 0, $$lcssa673 = 0, $$neg = 0, $$neg567 = 0, $$pn = 0, $$pn566 = 0, $$pr = 0, $$pr564 = 0, $$pre = 0, $$pre$phi690Z2D = 0, $$pre689 = 0, $$sink545$lcssa = 0, $$sink545622 = 0, $$sink562 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0.0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0;
 var $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0.0, $229 = 0.0, $23 = 0;
 var $230 = 0, $231 = 0.0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0;
 var $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0;
 var $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0;
 var $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0;
 var $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0.0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0;
 var $358 = 0, $359 = 0, $36 = 0.0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0;
 var $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0;
 var $narrow = 0, $not$ = 0, $notlhs = 0, $notrhs = 0, $or$cond = 0, $or$cond3$not = 0, $or$cond537 = 0, $or$cond541 = 0, $or$cond544 = 0, $or$cond554 = 0, $or$cond6 = 0, $scevgep684 = 0, $scevgep684685 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 560 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(560 | 0);
 $6 = sp + 8 | 0;
 $7 = sp;
 $8 = sp + 524 | 0;
 $9 = $8;
 $10 = sp + 512 | 0;
 SAFE_HEAP_STORE($7 | 0, 0 | 0, 4);
 $11 = $10 + 12 | 0;
 ___DOUBLE_BITS_675($1) | 0;
 $12 = tempRet0;
 $13 = ($12 | 0) < 0;
 if ($13) {
  $14 = -$1;
  $$0471 = $14;
  $$0520 = 1;
  $$0521 = 3060;
 } else {
  $15 = $4 & 2048;
  $16 = ($15 | 0) == 0;
  $17 = $4 & 1;
  $18 = ($17 | 0) == 0;
  $$ = $18 ? 3061 : 3066;
  $$$ = $16 ? $$ : 3063;
  $19 = $4 & 2049;
  $narrow = ($19 | 0) != 0;
  $$534$ = $narrow & 1;
  $$0471 = $1;
  $$0520 = $$534$;
  $$0521 = $$$;
 }
 ___DOUBLE_BITS_675($$0471) | 0;
 $20 = tempRet0;
 $21 = $20 & 2146435072;
 $22 = $21 >>> 0 < 2146435072;
 $23 = 0 < 0;
 $24 = ($21 | 0) == 2146435072;
 $25 = $24 & $23;
 $26 = $22 | $25;
 do {
  if ($26) {
   $35 = +_frexpl($$0471, $7);
   $36 = $35 * 2.0;
   $37 = $36 != 0.0;
   if ($37) {
    $38 = SAFE_HEAP_LOAD($7 | 0, 4, 0) | 0 | 0;
    $39 = $38 + -1 | 0;
    SAFE_HEAP_STORE($7 | 0, $39 | 0, 4);
   }
   $40 = $5 | 32;
   $41 = ($40 | 0) == 97;
   if ($41) {
    $42 = $5 & 32;
    $43 = ($42 | 0) == 0;
    $44 = $$0521 + 9 | 0;
    $$0521$ = $43 ? $$0521 : $44;
    $45 = $$0520 | 2;
    $46 = $3 >>> 0 > 11;
    $47 = 12 - $3 | 0;
    $48 = ($47 | 0) == 0;
    $49 = $46 | $48;
    do {
     if ($49) {
      $$1472 = $36;
     } else {
      $$0509582 = 8.0;
      $$1508583 = $47;
      while (1) {
       $50 = $$1508583 + -1 | 0;
       $51 = $$0509582 * 16.0;
       $52 = ($50 | 0) == 0;
       if ($52) {
        break;
       } else {
        $$0509582 = $51;
        $$1508583 = $50;
       }
      }
      $53 = SAFE_HEAP_LOAD($$0521$ >> 0 | 0, 1, 0) | 0 | 0;
      $54 = $53 << 24 >> 24 == 45;
      if ($54) {
       $55 = -$36;
       $56 = $55 - $51;
       $57 = $51 + $56;
       $58 = -$57;
       $$1472 = $58;
       break;
      } else {
       $59 = $36 + $51;
       $60 = $59 - $51;
       $$1472 = $60;
       break;
      }
     }
    } while (0);
    $61 = SAFE_HEAP_LOAD($7 | 0, 4, 0) | 0 | 0;
    $62 = ($61 | 0) < 0;
    $63 = 0 - $61 | 0;
    $64 = $62 ? $63 : $61;
    $65 = ($64 | 0) < 0;
    $66 = $65 << 31 >> 31;
    $67 = _fmt_u($64, $66, $11) | 0;
    $68 = ($67 | 0) == ($11 | 0);
    if ($68) {
     $69 = $10 + 11 | 0;
     SAFE_HEAP_STORE($69 >> 0 | 0, 48 | 0, 1);
     $$0511 = $69;
    } else {
     $$0511 = $67;
    }
    $70 = $61 >> 31;
    $71 = $70 & 2;
    $72 = $71 + 43 | 0;
    $73 = $72 & 255;
    $74 = $$0511 + -1 | 0;
    SAFE_HEAP_STORE($74 >> 0 | 0, $73 | 0, 1);
    $75 = $5 + 15 | 0;
    $76 = $75 & 255;
    $77 = $$0511 + -2 | 0;
    SAFE_HEAP_STORE($77 >> 0 | 0, $76 | 0, 1);
    $notrhs = ($3 | 0) < 1;
    $78 = $4 & 8;
    $79 = ($78 | 0) == 0;
    $$0523 = $8;
    $$2473 = $$1472;
    while (1) {
     $80 = ~~$$2473;
     $81 = 3095 + $80 | 0;
     $82 = SAFE_HEAP_LOAD($81 >> 0 | 0, 1, 0) | 0 | 0;
     $83 = $82 & 255;
     $84 = $83 | $42;
     $85 = $84 & 255;
     $86 = $$0523 + 1 | 0;
     SAFE_HEAP_STORE($$0523 >> 0 | 0, $85 | 0, 1);
     $87 = +($80 | 0);
     $88 = $$2473 - $87;
     $89 = $88 * 16.0;
     $90 = $86;
     $91 = $90 - $9 | 0;
     $92 = ($91 | 0) == 1;
     if ($92) {
      $notlhs = $89 == 0.0;
      $or$cond3$not = $notrhs & $notlhs;
      $or$cond = $79 & $or$cond3$not;
      if ($or$cond) {
       $$1524 = $86;
      } else {
       $93 = $$0523 + 2 | 0;
       SAFE_HEAP_STORE($86 >> 0 | 0, 46 | 0, 1);
       $$1524 = $93;
      }
     } else {
      $$1524 = $86;
     }
     $94 = $89 != 0.0;
     if ($94) {
      $$0523 = $$1524;
      $$2473 = $89;
     } else {
      break;
     }
    }
    $95 = ($3 | 0) != 0;
    $96 = $77;
    $97 = $11;
    $98 = $$1524;
    $99 = $98 - $9 | 0;
    $100 = $97 - $96 | 0;
    $101 = $99 + -2 | 0;
    $102 = ($101 | 0) < ($3 | 0);
    $or$cond537 = $95 & $102;
    $103 = $3 + 2 | 0;
    $$pn = $or$cond537 ? $103 : $99;
    $$0525 = $100 + $45 | 0;
    $104 = $$0525 + $$pn | 0;
    _pad_674($0, 32, $2, $104, $4);
    _out($0, $$0521$, $45);
    $105 = $4 ^ 65536;
    _pad_674($0, 48, $2, $104, $105);
    _out($0, $8, $99);
    $106 = $$pn - $99 | 0;
    _pad_674($0, 48, $106, 0, 0);
    _out($0, $77, $100);
    $107 = $4 ^ 8192;
    _pad_674($0, 32, $2, $104, $107);
    $$sink562 = $104;
    break;
   }
   $108 = ($3 | 0) < 0;
   $$539 = $108 ? 6 : $3;
   if ($37) {
    $109 = $36 * 268435456.0;
    $110 = SAFE_HEAP_LOAD($7 | 0, 4, 0) | 0 | 0;
    $111 = $110 + -28 | 0;
    SAFE_HEAP_STORE($7 | 0, $111 | 0, 4);
    $$3 = $109;
    $$pr = $111;
   } else {
    $$pre = SAFE_HEAP_LOAD($7 | 0, 4, 0) | 0 | 0;
    $$3 = $36;
    $$pr = $$pre;
   }
   $112 = ($$pr | 0) < 0;
   $113 = $6 + 288 | 0;
   $$556 = $112 ? $6 : $113;
   $$0498 = $$556;
   $$4 = $$3;
   while (1) {
    $114 = ~~$$4 >>> 0;
    SAFE_HEAP_STORE($$0498 | 0, $114 | 0, 4);
    $115 = $$0498 + 4 | 0;
    $116 = +($114 >>> 0);
    $117 = $$4 - $116;
    $118 = $117 * 1.0e9;
    $119 = $118 != 0.0;
    if ($119) {
     $$0498 = $115;
     $$4 = $118;
    } else {
     break;
    }
   }
   $120 = ($$pr | 0) > 0;
   if ($120) {
    $$1482661 = $$556;
    $$1499660 = $115;
    $122 = $$pr;
    while (1) {
     $121 = ($122 | 0) < 29;
     $123 = $121 ? $122 : 29;
     $$0488653 = $$1499660 + -4 | 0;
     $124 = $$0488653 >>> 0 < $$1482661 >>> 0;
     if ($124) {
      $$2483$ph = $$1482661;
     } else {
      $$0488655 = $$0488653;
      $$0497654 = 0;
      while (1) {
       $125 = SAFE_HEAP_LOAD($$0488655 | 0, 4, 0) | 0 | 0;
       $126 = _bitshift64Shl($125 | 0, 0, $123 | 0) | 0;
       $127 = tempRet0;
       $128 = _i64Add($126 | 0, $127 | 0, $$0497654 | 0, 0) | 0;
       $129 = tempRet0;
       $130 = ___uremdi3($128 | 0, $129 | 0, 1e9, 0) | 0;
       $131 = tempRet0;
       SAFE_HEAP_STORE($$0488655 | 0, $130 | 0, 4);
       $132 = ___udivdi3($128 | 0, $129 | 0, 1e9, 0) | 0;
       $133 = tempRet0;
       $$0488 = $$0488655 + -4 | 0;
       $134 = $$0488 >>> 0 < $$1482661 >>> 0;
       if ($134) {
        break;
       } else {
        $$0488655 = $$0488;
        $$0497654 = $132;
       }
      }
      $135 = ($132 | 0) == 0;
      if ($135) {
       $$2483$ph = $$1482661;
      } else {
       $136 = $$1482661 + -4 | 0;
       SAFE_HEAP_STORE($136 | 0, $132 | 0, 4);
       $$2483$ph = $136;
      }
     }
     $$2500 = $$1499660;
     while (1) {
      $137 = $$2500 >>> 0 > $$2483$ph >>> 0;
      if (!$137) {
       break;
      }
      $138 = $$2500 + -4 | 0;
      $139 = SAFE_HEAP_LOAD($138 | 0, 4, 0) | 0 | 0;
      $140 = ($139 | 0) == 0;
      if ($140) {
       $$2500 = $138;
      } else {
       break;
      }
     }
     $141 = SAFE_HEAP_LOAD($7 | 0, 4, 0) | 0 | 0;
     $142 = $141 - $123 | 0;
     SAFE_HEAP_STORE($7 | 0, $142 | 0, 4);
     $143 = ($142 | 0) > 0;
     if ($143) {
      $$1482661 = $$2483$ph;
      $$1499660 = $$2500;
      $122 = $142;
     } else {
      $$1482$lcssa = $$2483$ph;
      $$1499$lcssa = $$2500;
      $$pr564 = $142;
      break;
     }
    }
   } else {
    $$1482$lcssa = $$556;
    $$1499$lcssa = $115;
    $$pr564 = $$pr;
   }
   $144 = ($$pr564 | 0) < 0;
   if ($144) {
    $145 = $$539 + 25 | 0;
    $146 = ($145 | 0) / 9 & -1;
    $147 = $146 + 1 | 0;
    $148 = ($40 | 0) == 102;
    $$3484648 = $$1482$lcssa;
    $$3501647 = $$1499$lcssa;
    $150 = $$pr564;
    while (1) {
     $149 = 0 - $150 | 0;
     $151 = ($149 | 0) < 9;
     $152 = $151 ? $149 : 9;
     $153 = $$3484648 >>> 0 < $$3501647 >>> 0;
     if ($153) {
      $157 = 1 << $152;
      $158 = $157 + -1 | 0;
      $159 = 1e9 >>> $152;
      $$0487642 = 0;
      $$1489641 = $$3484648;
      while (1) {
       $160 = SAFE_HEAP_LOAD($$1489641 | 0, 4, 0) | 0 | 0;
       $161 = $160 & $158;
       $162 = $160 >>> $152;
       $163 = $162 + $$0487642 | 0;
       SAFE_HEAP_STORE($$1489641 | 0, $163 | 0, 4);
       $164 = Math_imul($161, $159) | 0;
       $165 = $$1489641 + 4 | 0;
       $166 = $165 >>> 0 < $$3501647 >>> 0;
       if ($166) {
        $$0487642 = $164;
        $$1489641 = $165;
       } else {
        break;
       }
      }
      $167 = SAFE_HEAP_LOAD($$3484648 | 0, 4, 0) | 0 | 0;
      $168 = ($167 | 0) == 0;
      $169 = $$3484648 + 4 | 0;
      $$$3484 = $168 ? $169 : $$3484648;
      $170 = ($164 | 0) == 0;
      if ($170) {
       $$$3484692 = $$$3484;
       $$4502 = $$3501647;
      } else {
       $171 = $$3501647 + 4 | 0;
       SAFE_HEAP_STORE($$3501647 | 0, $164 | 0, 4);
       $$$3484692 = $$$3484;
       $$4502 = $171;
      }
     } else {
      $154 = SAFE_HEAP_LOAD($$3484648 | 0, 4, 0) | 0 | 0;
      $155 = ($154 | 0) == 0;
      $156 = $$3484648 + 4 | 0;
      $$$3484691 = $155 ? $156 : $$3484648;
      $$$3484692 = $$$3484691;
      $$4502 = $$3501647;
     }
     $172 = $148 ? $$556 : $$$3484692;
     $173 = $$4502;
     $174 = $172;
     $175 = $173 - $174 | 0;
     $176 = $175 >> 2;
     $177 = ($176 | 0) > ($147 | 0);
     $178 = $172 + ($147 << 2) | 0;
     $$$4502 = $177 ? $178 : $$4502;
     $179 = SAFE_HEAP_LOAD($7 | 0, 4, 0) | 0 | 0;
     $180 = $179 + $152 | 0;
     SAFE_HEAP_STORE($7 | 0, $180 | 0, 4);
     $181 = ($180 | 0) < 0;
     if ($181) {
      $$3484648 = $$$3484692;
      $$3501647 = $$$4502;
      $150 = $180;
     } else {
      $$3484$lcssa = $$$3484692;
      $$3501$lcssa = $$$4502;
      break;
     }
    }
   } else {
    $$3484$lcssa = $$1482$lcssa;
    $$3501$lcssa = $$1499$lcssa;
   }
   $182 = $$3484$lcssa >>> 0 < $$3501$lcssa >>> 0;
   $183 = $$556;
   if ($182) {
    $184 = $$3484$lcssa;
    $185 = $183 - $184 | 0;
    $186 = $185 >> 2;
    $187 = $186 * 9 | 0;
    $188 = SAFE_HEAP_LOAD($$3484$lcssa | 0, 4, 0) | 0 | 0;
    $189 = $188 >>> 0 < 10;
    if ($189) {
     $$1515 = $187;
    } else {
     $$0514637 = $187;
     $$0530636 = 10;
     while (1) {
      $190 = $$0530636 * 10 | 0;
      $191 = $$0514637 + 1 | 0;
      $192 = $188 >>> 0 < $190 >>> 0;
      if ($192) {
       $$1515 = $191;
       break;
      } else {
       $$0514637 = $191;
       $$0530636 = $190;
      }
     }
    }
   } else {
    $$1515 = 0;
   }
   $193 = ($40 | 0) != 102;
   $194 = $193 ? $$1515 : 0;
   $195 = $$539 - $194 | 0;
   $196 = ($40 | 0) == 103;
   $197 = ($$539 | 0) != 0;
   $198 = $197 & $196;
   $$neg = $198 << 31 >> 31;
   $199 = $195 + $$neg | 0;
   $200 = $$3501$lcssa;
   $201 = $200 - $183 | 0;
   $202 = $201 >> 2;
   $203 = $202 * 9 | 0;
   $204 = $203 + -9 | 0;
   $205 = ($199 | 0) < ($204 | 0);
   if ($205) {
    $206 = $$556 + 4 | 0;
    $207 = $199 + 9216 | 0;
    $208 = ($207 | 0) / 9 & -1;
    $209 = $208 + -1024 | 0;
    $210 = $206 + ($209 << 2) | 0;
    $211 = ($207 | 0) % 9 & -1;
    $$0527629 = $211 + 1 | 0;
    $212 = ($$0527629 | 0) < 9;
    if ($212) {
     $$0527631 = $$0527629;
     $$1531630 = 10;
     while (1) {
      $213 = $$1531630 * 10 | 0;
      $$0527 = $$0527631 + 1 | 0;
      $exitcond = ($$0527 | 0) == 9;
      if ($exitcond) {
       $$1531$lcssa = $213;
       break;
      } else {
       $$0527631 = $$0527;
       $$1531630 = $213;
      }
     }
    } else {
     $$1531$lcssa = 10;
    }
    $214 = SAFE_HEAP_LOAD($210 | 0, 4, 0) | 0 | 0;
    $215 = ($214 >>> 0) % ($$1531$lcssa >>> 0) & -1;
    $216 = ($215 | 0) == 0;
    $217 = $210 + 4 | 0;
    $218 = ($217 | 0) == ($$3501$lcssa | 0);
    $or$cond541 = $218 & $216;
    if ($or$cond541) {
     $$4492 = $210;
     $$4518 = $$1515;
     $$8 = $$3484$lcssa;
    } else {
     $219 = ($214 >>> 0) / ($$1531$lcssa >>> 0) & -1;
     $220 = $219 & 1;
     $221 = ($220 | 0) == 0;
     $$542 = $221 ? 9007199254740992.0 : 9007199254740994.0;
     $222 = ($$1531$lcssa | 0) / 2 & -1;
     $223 = $215 >>> 0 < $222 >>> 0;
     $224 = ($215 | 0) == ($222 | 0);
     $or$cond544 = $218 & $224;
     $$559 = $or$cond544 ? 1.0 : 1.5;
     $$$559 = $223 ? .5 : $$559;
     $225 = ($$0520 | 0) == 0;
     if ($225) {
      $$1467 = $$$559;
      $$1469 = $$542;
     } else {
      $226 = SAFE_HEAP_LOAD($$0521 >> 0 | 0, 1, 0) | 0 | 0;
      $227 = $226 << 24 >> 24 == 45;
      $228 = -$$542;
      $229 = -$$$559;
      $$$542 = $227 ? $228 : $$542;
      $$$$559 = $227 ? $229 : $$$559;
      $$1467 = $$$$559;
      $$1469 = $$$542;
     }
     $230 = $214 - $215 | 0;
     SAFE_HEAP_STORE($210 | 0, $230 | 0, 4);
     $231 = $$1469 + $$1467;
     $232 = $231 != $$1469;
     if ($232) {
      $233 = $230 + $$1531$lcssa | 0;
      SAFE_HEAP_STORE($210 | 0, $233 | 0, 4);
      $234 = $233 >>> 0 > 999999999;
      if ($234) {
       $$5486623 = $$3484$lcssa;
       $$sink545622 = $210;
       while (1) {
        $235 = $$sink545622 + -4 | 0;
        SAFE_HEAP_STORE($$sink545622 | 0, 0 | 0, 4);
        $236 = $235 >>> 0 < $$5486623 >>> 0;
        if ($236) {
         $237 = $$5486623 + -4 | 0;
         SAFE_HEAP_STORE($237 | 0, 0 | 0, 4);
         $$6 = $237;
        } else {
         $$6 = $$5486623;
        }
        $238 = SAFE_HEAP_LOAD($235 | 0, 4, 0) | 0 | 0;
        $239 = $238 + 1 | 0;
        SAFE_HEAP_STORE($235 | 0, $239 | 0, 4);
        $240 = $239 >>> 0 > 999999999;
        if ($240) {
         $$5486623 = $$6;
         $$sink545622 = $235;
        } else {
         $$5486$lcssa = $$6;
         $$sink545$lcssa = $235;
         break;
        }
       }
      } else {
       $$5486$lcssa = $$3484$lcssa;
       $$sink545$lcssa = $210;
      }
      $241 = $$5486$lcssa;
      $242 = $183 - $241 | 0;
      $243 = $242 >> 2;
      $244 = $243 * 9 | 0;
      $245 = SAFE_HEAP_LOAD($$5486$lcssa | 0, 4, 0) | 0 | 0;
      $246 = $245 >>> 0 < 10;
      if ($246) {
       $$4492 = $$sink545$lcssa;
       $$4518 = $244;
       $$8 = $$5486$lcssa;
      } else {
       $$2516618 = $244;
       $$2532617 = 10;
       while (1) {
        $247 = $$2532617 * 10 | 0;
        $248 = $$2516618 + 1 | 0;
        $249 = $245 >>> 0 < $247 >>> 0;
        if ($249) {
         $$4492 = $$sink545$lcssa;
         $$4518 = $248;
         $$8 = $$5486$lcssa;
         break;
        } else {
         $$2516618 = $248;
         $$2532617 = $247;
        }
       }
      }
     } else {
      $$4492 = $210;
      $$4518 = $$1515;
      $$8 = $$3484$lcssa;
     }
    }
    $250 = $$4492 + 4 | 0;
    $251 = $$3501$lcssa >>> 0 > $250 >>> 0;
    $$$3501 = $251 ? $250 : $$3501$lcssa;
    $$5519$ph = $$4518;
    $$7505$ph = $$$3501;
    $$9$ph = $$8;
   } else {
    $$5519$ph = $$1515;
    $$7505$ph = $$3501$lcssa;
    $$9$ph = $$3484$lcssa;
   }
   $$7505 = $$7505$ph;
   while (1) {
    $252 = $$7505 >>> 0 > $$9$ph >>> 0;
    if (!$252) {
     $$lcssa673 = 0;
     break;
    }
    $253 = $$7505 + -4 | 0;
    $254 = SAFE_HEAP_LOAD($253 | 0, 4, 0) | 0 | 0;
    $255 = ($254 | 0) == 0;
    if ($255) {
     $$7505 = $253;
    } else {
     $$lcssa673 = 1;
     break;
    }
   }
   $256 = 0 - $$5519$ph | 0;
   do {
    if ($196) {
     $not$ = $197 ^ 1;
     $257 = $not$ & 1;
     $$539$ = $257 + $$539 | 0;
     $258 = ($$539$ | 0) > ($$5519$ph | 0);
     $259 = ($$5519$ph | 0) > -5;
     $or$cond6 = $258 & $259;
     if ($or$cond6) {
      $260 = $5 + -1 | 0;
      $$neg567 = $$539$ + -1 | 0;
      $261 = $$neg567 - $$5519$ph | 0;
      $$0479 = $260;
      $$2476 = $261;
     } else {
      $262 = $5 + -2 | 0;
      $263 = $$539$ + -1 | 0;
      $$0479 = $262;
      $$2476 = $263;
     }
     $264 = $4 & 8;
     $265 = ($264 | 0) == 0;
     if ($265) {
      if ($$lcssa673) {
       $266 = $$7505 + -4 | 0;
       $267 = SAFE_HEAP_LOAD($266 | 0, 4, 0) | 0 | 0;
       $268 = ($267 | 0) == 0;
       if ($268) {
        $$2529 = 9;
       } else {
        $269 = ($267 >>> 0) % 10 & -1;
        $270 = ($269 | 0) == 0;
        if ($270) {
         $$1528614 = 0;
         $$3533613 = 10;
         while (1) {
          $271 = $$3533613 * 10 | 0;
          $272 = $$1528614 + 1 | 0;
          $273 = ($267 >>> 0) % ($271 >>> 0) & -1;
          $274 = ($273 | 0) == 0;
          if ($274) {
           $$1528614 = $272;
           $$3533613 = $271;
          } else {
           $$2529 = $272;
           break;
          }
         }
        } else {
         $$2529 = 0;
        }
       }
      } else {
       $$2529 = 9;
      }
      $275 = $$0479 | 32;
      $276 = ($275 | 0) == 102;
      $277 = $$7505;
      $278 = $277 - $183 | 0;
      $279 = $278 >> 2;
      $280 = $279 * 9 | 0;
      $281 = $280 + -9 | 0;
      if ($276) {
       $282 = $281 - $$2529 | 0;
       $283 = ($282 | 0) > 0;
       $$546 = $283 ? $282 : 0;
       $284 = ($$2476 | 0) < ($$546 | 0);
       $$2476$$547 = $284 ? $$2476 : $$546;
       $$1480 = $$0479;
       $$3477 = $$2476$$547;
       $$pre$phi690Z2D = 0;
       break;
      } else {
       $285 = $281 + $$5519$ph | 0;
       $286 = $285 - $$2529 | 0;
       $287 = ($286 | 0) > 0;
       $$548 = $287 ? $286 : 0;
       $288 = ($$2476 | 0) < ($$548 | 0);
       $$2476$$549 = $288 ? $$2476 : $$548;
       $$1480 = $$0479;
       $$3477 = $$2476$$549;
       $$pre$phi690Z2D = 0;
       break;
      }
     } else {
      $$1480 = $$0479;
      $$3477 = $$2476;
      $$pre$phi690Z2D = $264;
     }
    } else {
     $$pre689 = $4 & 8;
     $$1480 = $5;
     $$3477 = $$539;
     $$pre$phi690Z2D = $$pre689;
    }
   } while (0);
   $289 = $$3477 | $$pre$phi690Z2D;
   $290 = ($289 | 0) != 0;
   $291 = $290 & 1;
   $292 = $$1480 | 32;
   $293 = ($292 | 0) == 102;
   if ($293) {
    $294 = ($$5519$ph | 0) > 0;
    $295 = $294 ? $$5519$ph : 0;
    $$2513 = 0;
    $$pn566 = $295;
   } else {
    $296 = ($$5519$ph | 0) < 0;
    $297 = $296 ? $256 : $$5519$ph;
    $298 = ($297 | 0) < 0;
    $299 = $298 << 31 >> 31;
    $300 = _fmt_u($297, $299, $11) | 0;
    $301 = $11;
    $302 = $300;
    $303 = $301 - $302 | 0;
    $304 = ($303 | 0) < 2;
    if ($304) {
     $$1512607 = $300;
     while (1) {
      $305 = $$1512607 + -1 | 0;
      SAFE_HEAP_STORE($305 >> 0 | 0, 48 | 0, 1);
      $306 = $305;
      $307 = $301 - $306 | 0;
      $308 = ($307 | 0) < 2;
      if ($308) {
       $$1512607 = $305;
      } else {
       $$1512$lcssa = $305;
       break;
      }
     }
    } else {
     $$1512$lcssa = $300;
    }
    $309 = $$5519$ph >> 31;
    $310 = $309 & 2;
    $311 = $310 + 43 | 0;
    $312 = $311 & 255;
    $313 = $$1512$lcssa + -1 | 0;
    SAFE_HEAP_STORE($313 >> 0 | 0, $312 | 0, 1);
    $314 = $$1480 & 255;
    $315 = $$1512$lcssa + -2 | 0;
    SAFE_HEAP_STORE($315 >> 0 | 0, $314 | 0, 1);
    $316 = $315;
    $317 = $301 - $316 | 0;
    $$2513 = $315;
    $$pn566 = $317;
   }
   $318 = $$0520 + 1 | 0;
   $319 = $318 + $$3477 | 0;
   $$1526 = $319 + $291 | 0;
   $320 = $$1526 + $$pn566 | 0;
   _pad_674($0, 32, $2, $320, $4);
   _out($0, $$0521, $$0520);
   $321 = $4 ^ 65536;
   _pad_674($0, 48, $2, $320, $321);
   if ($293) {
    $322 = $$9$ph >>> 0 > $$556 >>> 0;
    $$0496$$9 = $322 ? $$556 : $$9$ph;
    $323 = $8 + 9 | 0;
    $324 = $323;
    $325 = $8 + 8 | 0;
    $$5493597 = $$0496$$9;
    while (1) {
     $326 = SAFE_HEAP_LOAD($$5493597 | 0, 4, 0) | 0 | 0;
     $327 = _fmt_u($326, 0, $323) | 0;
     $328 = ($$5493597 | 0) == ($$0496$$9 | 0);
     if ($328) {
      $334 = ($327 | 0) == ($323 | 0);
      if ($334) {
       SAFE_HEAP_STORE($325 >> 0 | 0, 48 | 0, 1);
       $$1465 = $325;
      } else {
       $$1465 = $327;
      }
     } else {
      $329 = $327 >>> 0 > $8 >>> 0;
      if ($329) {
       $330 = $327;
       $331 = $330 - $9 | 0;
       _memset($8 | 0, 48, $331 | 0) | 0;
       $$0464594 = $327;
       while (1) {
        $332 = $$0464594 + -1 | 0;
        $333 = $332 >>> 0 > $8 >>> 0;
        if ($333) {
         $$0464594 = $332;
        } else {
         $$1465 = $332;
         break;
        }
       }
      } else {
       $$1465 = $327;
      }
     }
     $335 = $$1465;
     $336 = $324 - $335 | 0;
     _out($0, $$1465, $336);
     $337 = $$5493597 + 4 | 0;
     $338 = $337 >>> 0 > $$556 >>> 0;
     if ($338) {
      break;
     } else {
      $$5493597 = $337;
     }
    }
    $339 = ($289 | 0) == 0;
    if (!$339) {
     _out($0, 3111, 1);
    }
    $340 = $337 >>> 0 < $$7505 >>> 0;
    $341 = ($$3477 | 0) > 0;
    $342 = $340 & $341;
    if ($342) {
     $$4478590 = $$3477;
     $$6494589 = $337;
     while (1) {
      $343 = SAFE_HEAP_LOAD($$6494589 | 0, 4, 0) | 0 | 0;
      $344 = _fmt_u($343, 0, $323) | 0;
      $345 = $344 >>> 0 > $8 >>> 0;
      if ($345) {
       $346 = $344;
       $347 = $346 - $9 | 0;
       _memset($8 | 0, 48, $347 | 0) | 0;
       $$0463584 = $344;
       while (1) {
        $348 = $$0463584 + -1 | 0;
        $349 = $348 >>> 0 > $8 >>> 0;
        if ($349) {
         $$0463584 = $348;
        } else {
         $$0463$lcssa = $348;
         break;
        }
       }
      } else {
       $$0463$lcssa = $344;
      }
      $350 = ($$4478590 | 0) < 9;
      $351 = $350 ? $$4478590 : 9;
      _out($0, $$0463$lcssa, $351);
      $352 = $$6494589 + 4 | 0;
      $353 = $$4478590 + -9 | 0;
      $354 = $352 >>> 0 < $$7505 >>> 0;
      $355 = ($$4478590 | 0) > 9;
      $356 = $354 & $355;
      if ($356) {
       $$4478590 = $353;
       $$6494589 = $352;
      } else {
       $$4478$lcssa = $353;
       break;
      }
     }
    } else {
     $$4478$lcssa = $$3477;
    }
    $357 = $$4478$lcssa + 9 | 0;
    _pad_674($0, 48, $357, 9, 0);
   } else {
    $358 = $$9$ph + 4 | 0;
    $$7505$ = $$lcssa673 ? $$7505 : $358;
    $359 = ($$3477 | 0) > -1;
    if ($359) {
     $360 = $8 + 9 | 0;
     $361 = ($$pre$phi690Z2D | 0) == 0;
     $362 = $360;
     $363 = 0 - $9 | 0;
     $364 = $8 + 8 | 0;
     $$5602 = $$3477;
     $$7495601 = $$9$ph;
     while (1) {
      $365 = SAFE_HEAP_LOAD($$7495601 | 0, 4, 0) | 0 | 0;
      $366 = _fmt_u($365, 0, $360) | 0;
      $367 = ($366 | 0) == ($360 | 0);
      if ($367) {
       SAFE_HEAP_STORE($364 >> 0 | 0, 48 | 0, 1);
       $$0 = $364;
      } else {
       $$0 = $366;
      }
      $368 = ($$7495601 | 0) == ($$9$ph | 0);
      do {
       if ($368) {
        $372 = $$0 + 1 | 0;
        _out($0, $$0, 1);
        $373 = ($$5602 | 0) < 1;
        $or$cond554 = $361 & $373;
        if ($or$cond554) {
         $$2 = $372;
         break;
        }
        _out($0, 3111, 1);
        $$2 = $372;
       } else {
        $369 = $$0 >>> 0 > $8 >>> 0;
        if (!$369) {
         $$2 = $$0;
         break;
        }
        $scevgep684 = $$0 + $363 | 0;
        $scevgep684685 = $scevgep684;
        _memset($8 | 0, 48, $scevgep684685 | 0) | 0;
        $$1598 = $$0;
        while (1) {
         $370 = $$1598 + -1 | 0;
         $371 = $370 >>> 0 > $8 >>> 0;
         if ($371) {
          $$1598 = $370;
         } else {
          $$2 = $370;
          break;
         }
        }
       }
      } while (0);
      $374 = $$2;
      $375 = $362 - $374 | 0;
      $376 = ($$5602 | 0) > ($375 | 0);
      $377 = $376 ? $375 : $$5602;
      _out($0, $$2, $377);
      $378 = $$5602 - $375 | 0;
      $379 = $$7495601 + 4 | 0;
      $380 = $379 >>> 0 < $$7505$ >>> 0;
      $381 = ($378 | 0) > -1;
      $382 = $380 & $381;
      if ($382) {
       $$5602 = $378;
       $$7495601 = $379;
      } else {
       $$5$lcssa = $378;
       break;
      }
     }
    } else {
     $$5$lcssa = $$3477;
    }
    $383 = $$5$lcssa + 18 | 0;
    _pad_674($0, 48, $383, 18, 0);
    $384 = $11;
    $385 = $$2513;
    $386 = $384 - $385 | 0;
    _out($0, $$2513, $386);
   }
   $387 = $4 ^ 8192;
   _pad_674($0, 32, $2, $320, $387);
   $$sink562 = $320;
  } else {
   $27 = $5 & 32;
   $28 = ($27 | 0) != 0;
   $29 = $28 ? 3079 : 3083;
   $30 = $$0471 != $$0471 | 0.0 != 0.0;
   $31 = $28 ? 3087 : 3091;
   $$0510 = $30 ? $31 : $29;
   $32 = $$0520 + 3 | 0;
   $33 = $4 & -65537;
   _pad_674($0, 32, $2, $32, $33);
   _out($0, $$0521, $$0520);
   _out($0, $$0510, 3);
   $34 = $4 ^ 8192;
   _pad_674($0, 32, $2, $32, $34);
   $$sink562 = $32;
  }
 } while (0);
 $388 = ($$sink562 | 0) < ($2 | 0);
 $$555 = $388 ? $2 : $$sink562;
 STACKTOP = sp;
 return $$555 | 0;
}

function _printf_core($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$ = 0, $$$ = 0, $$$0259 = 0, $$$0262 = 0, $$$0269 = 0, $$$4266 = 0, $$$5 = 0, $$0 = 0, $$0228 = 0, $$0228$ = 0, $$0229322 = 0, $$0232 = 0, $$0235 = 0, $$0237 = 0, $$0240$lcssa = 0, $$0240$lcssa357 = 0, $$0240321 = 0, $$0243 = 0, $$0247 = 0, $$0249$lcssa = 0;
 var $$0249306 = 0, $$0252 = 0, $$0253 = 0, $$0254 = 0, $$0254$$0254$ = 0, $$0259 = 0, $$0262$lcssa = 0, $$0262311 = 0, $$0269 = 0, $$0269$phi = 0, $$1 = 0, $$1230333 = 0, $$1233 = 0, $$1236 = 0, $$1238 = 0, $$1241332 = 0, $$1244320 = 0, $$1248 = 0, $$1250 = 0, $$1255 = 0;
 var $$1260 = 0, $$1263 = 0, $$1263$ = 0, $$1270 = 0, $$2 = 0, $$2234 = 0, $$2239 = 0, $$2242305 = 0, $$2245 = 0, $$2251 = 0, $$2256 = 0, $$2256$ = 0, $$2256$$$2256 = 0, $$2261 = 0, $$2271 = 0, $$284$ = 0, $$289 = 0, $$290 = 0, $$3257 = 0, $$3265 = 0;
 var $$3272 = 0, $$3303 = 0, $$377 = 0, $$4258355 = 0, $$4266 = 0, $$5 = 0, $$6268 = 0, $$lcssa295 = 0, $$pre = 0, $$pre346 = 0, $$pre347 = 0, $$pre347$pre = 0, $$pre349 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0;
 var $306 = 0.0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0;
 var $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $isdigit = 0, $isdigit275 = 0, $isdigit277 = 0, $isdigittmp = 0, $isdigittmp$ = 0, $isdigittmp274 = 0;
 var $isdigittmp276 = 0, $narrow = 0, $or$cond = 0, $or$cond281 = 0, $or$cond283 = 0, $or$cond286 = 0, $storemerge = 0, $storemerge273310 = 0, $storemerge278 = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64 | 0);
 $5 = sp + 16 | 0;
 $6 = sp;
 $7 = sp + 24 | 0;
 $8 = sp + 8 | 0;
 $9 = sp + 20 | 0;
 SAFE_HEAP_STORE($5 | 0, $1 | 0, 4);
 $10 = ($0 | 0) != (0 | 0);
 $11 = $7 + 40 | 0;
 $12 = $11;
 $13 = $7 + 39 | 0;
 $14 = $8 + 4 | 0;
 $$0243 = 0;
 $$0247 = 0;
 $$0269 = 0;
 $21 = $1;
 L1 : while (1) {
  $15 = ($$0247 | 0) > -1;
  do {
   if ($15) {
    $16 = 2147483647 - $$0247 | 0;
    $17 = ($$0243 | 0) > ($16 | 0);
    if ($17) {
     $18 = ___errno_location() | 0;
     SAFE_HEAP_STORE($18 | 0, 75 | 0, 4);
     $$1248 = -1;
     break;
    } else {
     $19 = $$0243 + $$0247 | 0;
     $$1248 = $19;
     break;
    }
   } else {
    $$1248 = $$0247;
   }
  } while (0);
  $20 = SAFE_HEAP_LOAD($21 >> 0 | 0, 1, 0) | 0 | 0;
  $22 = $20 << 24 >> 24 == 0;
  if ($22) {
   label = 87;
   break;
  } else {
   $23 = $20;
   $25 = $21;
  }
  L9 : while (1) {
   switch ($23 << 24 >> 24) {
   case 37:
    {
     $$0249306 = $25;
     $27 = $25;
     label = 9;
     break L9;
     break;
    }
   case 0:
    {
     $$0249$lcssa = $25;
     $39 = $25;
     break L9;
     break;
    }
   default:
    {}
   }
   $24 = $25 + 1 | 0;
   SAFE_HEAP_STORE($5 | 0, $24 | 0, 4);
   $$pre = SAFE_HEAP_LOAD($24 >> 0 | 0, 1, 0) | 0 | 0;
   $23 = $$pre;
   $25 = $24;
  }
  L12 : do {
   if ((label | 0) == 9) {
    while (1) {
     label = 0;
     $26 = $27 + 1 | 0;
     $28 = SAFE_HEAP_LOAD($26 >> 0 | 0, 1, 0) | 0 | 0;
     $29 = $28 << 24 >> 24 == 37;
     if (!$29) {
      $$0249$lcssa = $$0249306;
      $39 = $27;
      break L12;
     }
     $30 = $$0249306 + 1 | 0;
     $31 = $27 + 2 | 0;
     SAFE_HEAP_STORE($5 | 0, $31 | 0, 4);
     $32 = SAFE_HEAP_LOAD($31 >> 0 | 0, 1, 0) | 0 | 0;
     $33 = $32 << 24 >> 24 == 37;
     if ($33) {
      $$0249306 = $30;
      $27 = $31;
      label = 9;
     } else {
      $$0249$lcssa = $30;
      $39 = $31;
      break;
     }
    }
   }
  } while (0);
  $34 = $$0249$lcssa;
  $35 = $21;
  $36 = $34 - $35 | 0;
  if ($10) {
   _out($0, $21, $36);
  }
  $37 = ($36 | 0) == 0;
  if (!$37) {
   $$0269$phi = $$0269;
   $$0243 = $36;
   $$0247 = $$1248;
   $21 = $39;
   $$0269 = $$0269$phi;
   continue;
  }
  $38 = $39 + 1 | 0;
  $40 = SAFE_HEAP_LOAD($38 >> 0 | 0, 1, 0) | 0 | 0;
  $41 = $40 << 24 >> 24;
  $isdigittmp = $41 + -48 | 0;
  $isdigit = $isdigittmp >>> 0 < 10;
  if ($isdigit) {
   $42 = $39 + 2 | 0;
   $43 = SAFE_HEAP_LOAD($42 >> 0 | 0, 1, 0) | 0 | 0;
   $44 = $43 << 24 >> 24 == 36;
   $45 = $39 + 3 | 0;
   $$377 = $44 ? $45 : $38;
   $$$0269 = $44 ? 1 : $$0269;
   $isdigittmp$ = $44 ? $isdigittmp : -1;
   $$0253 = $isdigittmp$;
   $$1270 = $$$0269;
   $storemerge = $$377;
  } else {
   $$0253 = -1;
   $$1270 = $$0269;
   $storemerge = $38;
  }
  SAFE_HEAP_STORE($5 | 0, $storemerge | 0, 4);
  $46 = SAFE_HEAP_LOAD($storemerge >> 0 | 0, 1, 0) | 0 | 0;
  $47 = $46 << 24 >> 24;
  $48 = $47 + -32 | 0;
  $49 = $48 >>> 0 < 32;
  L24 : do {
   if ($49) {
    $$0262311 = 0;
    $329 = $46;
    $51 = $48;
    $storemerge273310 = $storemerge;
    while (1) {
     $50 = 1 << $51;
     $52 = $50 & 75913;
     $53 = ($52 | 0) == 0;
     if ($53) {
      $$0262$lcssa = $$0262311;
      $$lcssa295 = $329;
      $62 = $storemerge273310;
      break L24;
     }
     $54 = $50 | $$0262311;
     $55 = $storemerge273310 + 1 | 0;
     SAFE_HEAP_STORE($5 | 0, $55 | 0, 4);
     $56 = SAFE_HEAP_LOAD($55 >> 0 | 0, 1, 0) | 0 | 0;
     $57 = $56 << 24 >> 24;
     $58 = $57 + -32 | 0;
     $59 = $58 >>> 0 < 32;
     if ($59) {
      $$0262311 = $54;
      $329 = $56;
      $51 = $58;
      $storemerge273310 = $55;
     } else {
      $$0262$lcssa = $54;
      $$lcssa295 = $56;
      $62 = $55;
      break;
     }
    }
   } else {
    $$0262$lcssa = 0;
    $$lcssa295 = $46;
    $62 = $storemerge;
   }
  } while (0);
  $60 = $$lcssa295 << 24 >> 24 == 42;
  if ($60) {
   $61 = $62 + 1 | 0;
   $63 = SAFE_HEAP_LOAD($61 >> 0 | 0, 1, 0) | 0 | 0;
   $64 = $63 << 24 >> 24;
   $isdigittmp276 = $64 + -48 | 0;
   $isdigit277 = $isdigittmp276 >>> 0 < 10;
   if ($isdigit277) {
    $65 = $62 + 2 | 0;
    $66 = SAFE_HEAP_LOAD($65 >> 0 | 0, 1, 0) | 0 | 0;
    $67 = $66 << 24 >> 24 == 36;
    if ($67) {
     $68 = $4 + ($isdigittmp276 << 2) | 0;
     SAFE_HEAP_STORE($68 | 0, 10 | 0, 4);
     $69 = SAFE_HEAP_LOAD($61 >> 0 | 0, 1, 0) | 0 | 0;
     $70 = $69 << 24 >> 24;
     $71 = $70 + -48 | 0;
     $72 = $3 + ($71 << 3) | 0;
     $73 = $72;
     $74 = $73;
     $75 = SAFE_HEAP_LOAD($74 | 0, 4, 0) | 0 | 0;
     $76 = $73 + 4 | 0;
     $77 = $76;
     $78 = SAFE_HEAP_LOAD($77 | 0, 4, 0) | 0 | 0;
     $79 = $62 + 3 | 0;
     $$0259 = $75;
     $$2271 = 1;
     $storemerge278 = $79;
    } else {
     label = 23;
    }
   } else {
    label = 23;
   }
   if ((label | 0) == 23) {
    label = 0;
    $80 = ($$1270 | 0) == 0;
    if (!$80) {
     $$0 = -1;
     break;
    }
    if ($10) {
     $arglist_current = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
     $81 = $arglist_current;
     $82 = 0 + 4 | 0;
     $expanded4 = $82;
     $expanded = $expanded4 - 1 | 0;
     $83 = $81 + $expanded | 0;
     $84 = 0 + 4 | 0;
     $expanded8 = $84;
     $expanded7 = $expanded8 - 1 | 0;
     $expanded6 = $expanded7 ^ -1;
     $85 = $83 & $expanded6;
     $86 = $85;
     $87 = SAFE_HEAP_LOAD($86 | 0, 4, 0) | 0 | 0;
     $arglist_next = $86 + 4 | 0;
     SAFE_HEAP_STORE($2 | 0, $arglist_next | 0, 4);
     $$0259 = $87;
     $$2271 = 0;
     $storemerge278 = $61;
    } else {
     $$0259 = 0;
     $$2271 = 0;
     $storemerge278 = $61;
    }
   }
   SAFE_HEAP_STORE($5 | 0, $storemerge278 | 0, 4);
   $88 = ($$0259 | 0) < 0;
   $89 = $$0262$lcssa | 8192;
   $90 = 0 - $$0259 | 0;
   $$$0262 = $88 ? $89 : $$0262$lcssa;
   $$$0259 = $88 ? $90 : $$0259;
   $$1260 = $$$0259;
   $$1263 = $$$0262;
   $$3272 = $$2271;
   $94 = $storemerge278;
  } else {
   $91 = _getint($5) | 0;
   $92 = ($91 | 0) < 0;
   if ($92) {
    $$0 = -1;
    break;
   }
   $$pre346 = SAFE_HEAP_LOAD($5 | 0, 4, 0) | 0 | 0;
   $$1260 = $91;
   $$1263 = $$0262$lcssa;
   $$3272 = $$1270;
   $94 = $$pre346;
  }
  $93 = SAFE_HEAP_LOAD($94 >> 0 | 0, 1, 0) | 0 | 0;
  $95 = $93 << 24 >> 24 == 46;
  do {
   if ($95) {
    $96 = $94 + 1 | 0;
    $97 = SAFE_HEAP_LOAD($96 >> 0 | 0, 1, 0) | 0 | 0;
    $98 = $97 << 24 >> 24 == 42;
    if (!$98) {
     $125 = $94 + 1 | 0;
     SAFE_HEAP_STORE($5 | 0, $125 | 0, 4);
     $126 = _getint($5) | 0;
     $$pre347$pre = SAFE_HEAP_LOAD($5 | 0, 4, 0) | 0 | 0;
     $$0254 = $126;
     $$pre347 = $$pre347$pre;
     break;
    }
    $99 = $94 + 2 | 0;
    $100 = SAFE_HEAP_LOAD($99 >> 0 | 0, 1, 0) | 0 | 0;
    $101 = $100 << 24 >> 24;
    $isdigittmp274 = $101 + -48 | 0;
    $isdigit275 = $isdigittmp274 >>> 0 < 10;
    if ($isdigit275) {
     $102 = $94 + 3 | 0;
     $103 = SAFE_HEAP_LOAD($102 >> 0 | 0, 1, 0) | 0 | 0;
     $104 = $103 << 24 >> 24 == 36;
     if ($104) {
      $105 = $4 + ($isdigittmp274 << 2) | 0;
      SAFE_HEAP_STORE($105 | 0, 10 | 0, 4);
      $106 = SAFE_HEAP_LOAD($99 >> 0 | 0, 1, 0) | 0 | 0;
      $107 = $106 << 24 >> 24;
      $108 = $107 + -48 | 0;
      $109 = $3 + ($108 << 3) | 0;
      $110 = $109;
      $111 = $110;
      $112 = SAFE_HEAP_LOAD($111 | 0, 4, 0) | 0 | 0;
      $113 = $110 + 4 | 0;
      $114 = $113;
      $115 = SAFE_HEAP_LOAD($114 | 0, 4, 0) | 0 | 0;
      $116 = $94 + 4 | 0;
      SAFE_HEAP_STORE($5 | 0, $116 | 0, 4);
      $$0254 = $112;
      $$pre347 = $116;
      break;
     }
    }
    $117 = ($$3272 | 0) == 0;
    if (!$117) {
     $$0 = -1;
     break L1;
    }
    if ($10) {
     $arglist_current2 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
     $118 = $arglist_current2;
     $119 = 0 + 4 | 0;
     $expanded11 = $119;
     $expanded10 = $expanded11 - 1 | 0;
     $120 = $118 + $expanded10 | 0;
     $121 = 0 + 4 | 0;
     $expanded15 = $121;
     $expanded14 = $expanded15 - 1 | 0;
     $expanded13 = $expanded14 ^ -1;
     $122 = $120 & $expanded13;
     $123 = $122;
     $124 = SAFE_HEAP_LOAD($123 | 0, 4, 0) | 0 | 0;
     $arglist_next3 = $123 + 4 | 0;
     SAFE_HEAP_STORE($2 | 0, $arglist_next3 | 0, 4);
     $330 = $124;
    } else {
     $330 = 0;
    }
    SAFE_HEAP_STORE($5 | 0, $99 | 0, 4);
    $$0254 = $330;
    $$pre347 = $99;
   } else {
    $$0254 = -1;
    $$pre347 = $94;
   }
  } while (0);
  $$0252 = 0;
  $128 = $$pre347;
  while (1) {
   $127 = SAFE_HEAP_LOAD($128 >> 0 | 0, 1, 0) | 0 | 0;
   $129 = $127 << 24 >> 24;
   $130 = $129 + -65 | 0;
   $131 = $130 >>> 0 > 57;
   if ($131) {
    $$0 = -1;
    break L1;
   }
   $132 = $128 + 1 | 0;
   SAFE_HEAP_STORE($5 | 0, $132 | 0, 4);
   $133 = SAFE_HEAP_LOAD($128 >> 0 | 0, 1, 0) | 0 | 0;
   $134 = $133 << 24 >> 24;
   $135 = $134 + -65 | 0;
   $136 = (2579 + ($$0252 * 58 | 0) | 0) + $135 | 0;
   $137 = SAFE_HEAP_LOAD($136 >> 0 | 0, 1, 0) | 0 | 0;
   $138 = $137 & 255;
   $139 = $138 + -1 | 0;
   $140 = $139 >>> 0 < 8;
   if ($140) {
    $$0252 = $138;
    $128 = $132;
   } else {
    break;
   }
  }
  $141 = $137 << 24 >> 24 == 0;
  if ($141) {
   $$0 = -1;
   break;
  }
  $142 = $137 << 24 >> 24 == 19;
  $143 = ($$0253 | 0) > -1;
  do {
   if ($142) {
    if ($143) {
     $$0 = -1;
     break L1;
    } else {
     label = 49;
    }
   } else {
    if ($143) {
     $144 = $4 + ($$0253 << 2) | 0;
     SAFE_HEAP_STORE($144 | 0, $138 | 0, 4);
     $145 = $3 + ($$0253 << 3) | 0;
     $146 = $145;
     $147 = $146;
     $148 = SAFE_HEAP_LOAD($147 | 0, 4, 0) | 0 | 0;
     $149 = $146 + 4 | 0;
     $150 = $149;
     $151 = SAFE_HEAP_LOAD($150 | 0, 4, 0) | 0 | 0;
     $152 = $6;
     $153 = $152;
     SAFE_HEAP_STORE($153 | 0, $148 | 0, 4);
     $154 = $152 + 4 | 0;
     $155 = $154;
     SAFE_HEAP_STORE($155 | 0, $151 | 0, 4);
     label = 49;
     break;
    }
    if (!$10) {
     $$0 = 0;
     break L1;
    }
    _pop_arg($6, $138, $2);
   }
  } while (0);
  if ((label | 0) == 49) {
   label = 0;
   if (!$10) {
    $$0243 = 0;
    $$0247 = $$1248;
    $$0269 = $$3272;
    $21 = $132;
    continue;
   }
  }
  $156 = SAFE_HEAP_LOAD($128 >> 0 | 0, 1, 0) | 0 | 0;
  $157 = $156 << 24 >> 24;
  $158 = ($$0252 | 0) != 0;
  $159 = $157 & 15;
  $160 = ($159 | 0) == 3;
  $or$cond281 = $158 & $160;
  $161 = $157 & -33;
  $$0235 = $or$cond281 ? $161 : $157;
  $162 = $$1263 & 8192;
  $163 = ($162 | 0) == 0;
  $164 = $$1263 & -65537;
  $$1263$ = $163 ? $$1263 : $164;
  L71 : do {
   switch ($$0235 | 0) {
   case 110:
    {
     $trunc = $$0252 & 255;
     switch ($trunc << 24 >> 24) {
     case 0:
      {
       $171 = SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0;
       SAFE_HEAP_STORE($171 | 0, $$1248 | 0, 4);
       $$0243 = 0;
       $$0247 = $$1248;
       $$0269 = $$3272;
       $21 = $132;
       continue L1;
       break;
      }
     case 1:
      {
       $172 = SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0;
       SAFE_HEAP_STORE($172 | 0, $$1248 | 0, 4);
       $$0243 = 0;
       $$0247 = $$1248;
       $$0269 = $$3272;
       $21 = $132;
       continue L1;
       break;
      }
     case 2:
      {
       $173 = ($$1248 | 0) < 0;
       $174 = $173 << 31 >> 31;
       $175 = SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0;
       $176 = $175;
       $177 = $176;
       SAFE_HEAP_STORE($177 | 0, $$1248 | 0, 4);
       $178 = $176 + 4 | 0;
       $179 = $178;
       SAFE_HEAP_STORE($179 | 0, $174 | 0, 4);
       $$0243 = 0;
       $$0247 = $$1248;
       $$0269 = $$3272;
       $21 = $132;
       continue L1;
       break;
      }
     case 3:
      {
       $180 = $$1248 & 65535;
       $181 = SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0;
       SAFE_HEAP_STORE($181 | 0, $180 | 0, 2);
       $$0243 = 0;
       $$0247 = $$1248;
       $$0269 = $$3272;
       $21 = $132;
       continue L1;
       break;
      }
     case 4:
      {
       $182 = $$1248 & 255;
       $183 = SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0;
       SAFE_HEAP_STORE($183 >> 0 | 0, $182 | 0, 1);
       $$0243 = 0;
       $$0247 = $$1248;
       $$0269 = $$3272;
       $21 = $132;
       continue L1;
       break;
      }
     case 6:
      {
       $184 = SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0;
       SAFE_HEAP_STORE($184 | 0, $$1248 | 0, 4);
       $$0243 = 0;
       $$0247 = $$1248;
       $$0269 = $$3272;
       $21 = $132;
       continue L1;
       break;
      }
     case 7:
      {
       $185 = ($$1248 | 0) < 0;
       $186 = $185 << 31 >> 31;
       $187 = SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0;
       $188 = $187;
       $189 = $188;
       SAFE_HEAP_STORE($189 | 0, $$1248 | 0, 4);
       $190 = $188 + 4 | 0;
       $191 = $190;
       SAFE_HEAP_STORE($191 | 0, $186 | 0, 4);
       $$0243 = 0;
       $$0247 = $$1248;
       $$0269 = $$3272;
       $21 = $132;
       continue L1;
       break;
      }
     default:
      {
       $$0243 = 0;
       $$0247 = $$1248;
       $$0269 = $$3272;
       $21 = $132;
       continue L1;
      }
     }
     break;
    }
   case 112:
    {
     $192 = $$0254 >>> 0 > 8;
     $193 = $192 ? $$0254 : 8;
     $194 = $$1263$ | 8;
     $$1236 = 120;
     $$1255 = $193;
     $$3265 = $194;
     label = 61;
     break;
    }
   case 88:
   case 120:
    {
     $$1236 = $$0235;
     $$1255 = $$0254;
     $$3265 = $$1263$;
     label = 61;
     break;
    }
   case 111:
    {
     $210 = $6;
     $211 = $210;
     $212 = SAFE_HEAP_LOAD($211 | 0, 4, 0) | 0 | 0;
     $213 = $210 + 4 | 0;
     $214 = $213;
     $215 = SAFE_HEAP_LOAD($214 | 0, 4, 0) | 0 | 0;
     $216 = _fmt_o($212, $215, $11) | 0;
     $217 = $$1263$ & 8;
     $218 = ($217 | 0) == 0;
     $219 = $216;
     $220 = $12 - $219 | 0;
     $221 = ($$0254 | 0) > ($220 | 0);
     $222 = $220 + 1 | 0;
     $223 = $218 | $221;
     $$0254$$0254$ = $223 ? $$0254 : $222;
     $$0228 = $216;
     $$1233 = 0;
     $$1238 = 3043;
     $$2256 = $$0254$$0254$;
     $$4266 = $$1263$;
     $248 = $212;
     $250 = $215;
     label = 67;
     break;
    }
   case 105:
   case 100:
    {
     $224 = $6;
     $225 = $224;
     $226 = SAFE_HEAP_LOAD($225 | 0, 4, 0) | 0 | 0;
     $227 = $224 + 4 | 0;
     $228 = $227;
     $229 = SAFE_HEAP_LOAD($228 | 0, 4, 0) | 0 | 0;
     $230 = ($229 | 0) < 0;
     if ($230) {
      $231 = _i64Subtract(0, 0, $226 | 0, $229 | 0) | 0;
      $232 = tempRet0;
      $233 = $6;
      $234 = $233;
      SAFE_HEAP_STORE($234 | 0, $231 | 0, 4);
      $235 = $233 + 4 | 0;
      $236 = $235;
      SAFE_HEAP_STORE($236 | 0, $232 | 0, 4);
      $$0232 = 1;
      $$0237 = 3043;
      $242 = $231;
      $243 = $232;
      label = 66;
      break L71;
     } else {
      $237 = $$1263$ & 2048;
      $238 = ($237 | 0) == 0;
      $239 = $$1263$ & 1;
      $240 = ($239 | 0) == 0;
      $$ = $240 ? 3043 : 3045;
      $$$ = $238 ? $$ : 3044;
      $241 = $$1263$ & 2049;
      $narrow = ($241 | 0) != 0;
      $$284$ = $narrow & 1;
      $$0232 = $$284$;
      $$0237 = $$$;
      $242 = $226;
      $243 = $229;
      label = 66;
      break L71;
     }
     break;
    }
   case 117:
    {
     $165 = $6;
     $166 = $165;
     $167 = SAFE_HEAP_LOAD($166 | 0, 4, 0) | 0 | 0;
     $168 = $165 + 4 | 0;
     $169 = $168;
     $170 = SAFE_HEAP_LOAD($169 | 0, 4, 0) | 0 | 0;
     $$0232 = 0;
     $$0237 = 3043;
     $242 = $167;
     $243 = $170;
     label = 66;
     break;
    }
   case 99:
    {
     $259 = $6;
     $260 = $259;
     $261 = SAFE_HEAP_LOAD($260 | 0, 4, 0) | 0 | 0;
     $262 = $259 + 4 | 0;
     $263 = $262;
     $264 = SAFE_HEAP_LOAD($263 | 0, 4, 0) | 0 | 0;
     $265 = $261 & 255;
     SAFE_HEAP_STORE($13 >> 0 | 0, $265 | 0, 1);
     $$2 = $13;
     $$2234 = 0;
     $$2239 = 3043;
     $$2251 = $11;
     $$5 = 1;
     $$6268 = $164;
     break;
    }
   case 109:
    {
     $266 = ___errno_location() | 0;
     $267 = SAFE_HEAP_LOAD($266 | 0, 4, 0) | 0 | 0;
     $268 = _strerror($267) | 0;
     $$1 = $268;
     label = 71;
     break;
    }
   case 115:
    {
     $269 = SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0;
     $270 = ($269 | 0) != (0 | 0);
     $271 = $270 ? $269 : 3053;
     $$1 = $271;
     label = 71;
     break;
    }
   case 67:
    {
     $278 = $6;
     $279 = $278;
     $280 = SAFE_HEAP_LOAD($279 | 0, 4, 0) | 0 | 0;
     $281 = $278 + 4 | 0;
     $282 = $281;
     $283 = SAFE_HEAP_LOAD($282 | 0, 4, 0) | 0 | 0;
     SAFE_HEAP_STORE($8 | 0, $280 | 0, 4);
     SAFE_HEAP_STORE($14 | 0, 0 | 0, 4);
     SAFE_HEAP_STORE($6 | 0, $8 | 0, 4);
     $$4258355 = -1;
     $331 = $8;
     label = 75;
     break;
    }
   case 83:
    {
     $$pre349 = SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0;
     $284 = ($$0254 | 0) == 0;
     if ($284) {
      _pad_674($0, 32, $$1260, 0, $$1263$);
      $$0240$lcssa357 = 0;
      label = 84;
     } else {
      $$4258355 = $$0254;
      $331 = $$pre349;
      label = 75;
     }
     break;
    }
   case 65:
   case 71:
   case 70:
   case 69:
   case 97:
   case 103:
   case 102:
   case 101:
    {
     $306 = +(+SAFE_HEAP_LOAD_D($6 | 0, 8));
     $307 = _fmt_fp($0, $306, $$1260, $$0254, $$1263$, $$0235) | 0;
     $$0243 = $307;
     $$0247 = $$1248;
     $$0269 = $$3272;
     $21 = $132;
     continue L1;
     break;
    }
   default:
    {
     $$2 = $21;
     $$2234 = 0;
     $$2239 = 3043;
     $$2251 = $11;
     $$5 = $$0254;
     $$6268 = $$1263$;
    }
   }
  } while (0);
  L95 : do {
   if ((label | 0) == 61) {
    label = 0;
    $195 = $6;
    $196 = $195;
    $197 = SAFE_HEAP_LOAD($196 | 0, 4, 0) | 0 | 0;
    $198 = $195 + 4 | 0;
    $199 = $198;
    $200 = SAFE_HEAP_LOAD($199 | 0, 4, 0) | 0 | 0;
    $201 = $$1236 & 32;
    $202 = _fmt_x($197, $200, $11, $201) | 0;
    $203 = ($197 | 0) == 0;
    $204 = ($200 | 0) == 0;
    $205 = $203 & $204;
    $206 = $$3265 & 8;
    $207 = ($206 | 0) == 0;
    $or$cond283 = $207 | $205;
    $208 = $$1236 >> 4;
    $209 = 3043 + $208 | 0;
    $$289 = $or$cond283 ? 3043 : $209;
    $$290 = $or$cond283 ? 0 : 2;
    $$0228 = $202;
    $$1233 = $$290;
    $$1238 = $$289;
    $$2256 = $$1255;
    $$4266 = $$3265;
    $248 = $197;
    $250 = $200;
    label = 67;
   } else if ((label | 0) == 66) {
    label = 0;
    $244 = _fmt_u($242, $243, $11) | 0;
    $$0228 = $244;
    $$1233 = $$0232;
    $$1238 = $$0237;
    $$2256 = $$0254;
    $$4266 = $$1263$;
    $248 = $242;
    $250 = $243;
    label = 67;
   } else if ((label | 0) == 71) {
    label = 0;
    $272 = _memchr($$1, 0, $$0254) | 0;
    $273 = ($272 | 0) == (0 | 0);
    $274 = $272;
    $275 = $$1;
    $276 = $274 - $275 | 0;
    $277 = $$1 + $$0254 | 0;
    $$3257 = $273 ? $$0254 : $276;
    $$1250 = $273 ? $277 : $272;
    $$2 = $$1;
    $$2234 = 0;
    $$2239 = 3043;
    $$2251 = $$1250;
    $$5 = $$3257;
    $$6268 = $164;
   } else if ((label | 0) == 75) {
    label = 0;
    $$0229322 = $331;
    $$0240321 = 0;
    $$1244320 = 0;
    while (1) {
     $285 = SAFE_HEAP_LOAD($$0229322 | 0, 4, 0) | 0 | 0;
     $286 = ($285 | 0) == 0;
     if ($286) {
      $$0240$lcssa = $$0240321;
      $$2245 = $$1244320;
      break;
     }
     $287 = _wctomb($9, $285) | 0;
     $288 = ($287 | 0) < 0;
     $289 = $$4258355 - $$0240321 | 0;
     $290 = $287 >>> 0 > $289 >>> 0;
     $or$cond286 = $288 | $290;
     if ($or$cond286) {
      $$0240$lcssa = $$0240321;
      $$2245 = $287;
      break;
     }
     $291 = $$0229322 + 4 | 0;
     $292 = $287 + $$0240321 | 0;
     $293 = $$4258355 >>> 0 > $292 >>> 0;
     if ($293) {
      $$0229322 = $291;
      $$0240321 = $292;
      $$1244320 = $287;
     } else {
      $$0240$lcssa = $292;
      $$2245 = $287;
      break;
     }
    }
    $294 = ($$2245 | 0) < 0;
    if ($294) {
     $$0 = -1;
     break L1;
    }
    _pad_674($0, 32, $$1260, $$0240$lcssa, $$1263$);
    $295 = ($$0240$lcssa | 0) == 0;
    if ($295) {
     $$0240$lcssa357 = 0;
     label = 84;
    } else {
     $$1230333 = $331;
     $$1241332 = 0;
     while (1) {
      $296 = SAFE_HEAP_LOAD($$1230333 | 0, 4, 0) | 0 | 0;
      $297 = ($296 | 0) == 0;
      if ($297) {
       $$0240$lcssa357 = $$0240$lcssa;
       label = 84;
       break L95;
      }
      $298 = _wctomb($9, $296) | 0;
      $299 = $298 + $$1241332 | 0;
      $300 = ($299 | 0) > ($$0240$lcssa | 0);
      if ($300) {
       $$0240$lcssa357 = $$0240$lcssa;
       label = 84;
       break L95;
      }
      $301 = $$1230333 + 4 | 0;
      _out($0, $9, $298);
      $302 = $299 >>> 0 < $$0240$lcssa >>> 0;
      if ($302) {
       $$1230333 = $301;
       $$1241332 = $299;
      } else {
       $$0240$lcssa357 = $$0240$lcssa;
       label = 84;
       break;
      }
     }
    }
   }
  } while (0);
  if ((label | 0) == 67) {
   label = 0;
   $245 = ($$2256 | 0) > -1;
   $246 = $$4266 & -65537;
   $$$4266 = $245 ? $246 : $$4266;
   $247 = ($248 | 0) != 0;
   $249 = ($250 | 0) != 0;
   $251 = $247 | $249;
   $252 = ($$2256 | 0) != 0;
   $or$cond = $252 | $251;
   $253 = $$0228;
   $254 = $12 - $253 | 0;
   $255 = $251 ^ 1;
   $256 = $255 & 1;
   $257 = $256 + $254 | 0;
   $258 = ($$2256 | 0) > ($257 | 0);
   $$2256$ = $258 ? $$2256 : $257;
   $$2256$$$2256 = $or$cond ? $$2256$ : $$2256;
   $$0228$ = $or$cond ? $$0228 : $11;
   $$2 = $$0228$;
   $$2234 = $$1233;
   $$2239 = $$1238;
   $$2251 = $11;
   $$5 = $$2256$$$2256;
   $$6268 = $$$4266;
  } else if ((label | 0) == 84) {
   label = 0;
   $303 = $$1263$ ^ 8192;
   _pad_674($0, 32, $$1260, $$0240$lcssa357, $303);
   $304 = ($$1260 | 0) > ($$0240$lcssa357 | 0);
   $305 = $304 ? $$1260 : $$0240$lcssa357;
   $$0243 = $305;
   $$0247 = $$1248;
   $$0269 = $$3272;
   $21 = $132;
   continue;
  }
  $308 = $$2251;
  $309 = $$2;
  $310 = $308 - $309 | 0;
  $311 = ($$5 | 0) < ($310 | 0);
  $$$5 = $311 ? $310 : $$5;
  $312 = $$$5 + $$2234 | 0;
  $313 = ($$1260 | 0) < ($312 | 0);
  $$2261 = $313 ? $312 : $$1260;
  _pad_674($0, 32, $$2261, $312, $$6268);
  _out($0, $$2239, $$2234);
  $314 = $$6268 ^ 65536;
  _pad_674($0, 48, $$2261, $312, $314);
  _pad_674($0, 48, $$$5, $310, 0);
  _out($0, $$2, $310);
  $315 = $$6268 ^ 8192;
  _pad_674($0, 32, $$2261, $312, $315);
  $$0243 = $$2261;
  $$0247 = $$1248;
  $$0269 = $$3272;
  $21 = $132;
 }
 L114 : do {
  if ((label | 0) == 87) {
   $316 = ($0 | 0) == (0 | 0);
   if ($316) {
    $317 = ($$0269 | 0) == 0;
    if ($317) {
     $$0 = 0;
    } else {
     $$2242305 = 1;
     while (1) {
      $318 = $4 + ($$2242305 << 2) | 0;
      $319 = SAFE_HEAP_LOAD($318 | 0, 4, 0) | 0 | 0;
      $320 = ($319 | 0) == 0;
      if ($320) {
       $$3303 = $$2242305;
       break;
      }
      $321 = $3 + ($$2242305 << 3) | 0;
      _pop_arg($321, $319, $2);
      $322 = $$2242305 + 1 | 0;
      $323 = ($322 | 0) < 10;
      if ($323) {
       $$2242305 = $322;
      } else {
       $$0 = 1;
       break L114;
      }
     }
     while (1) {
      $326 = $4 + ($$3303 << 2) | 0;
      $327 = SAFE_HEAP_LOAD($326 | 0, 4, 0) | 0 | 0;
      $328 = ($327 | 0) == 0;
      $325 = $$3303 + 1 | 0;
      if (!$328) {
       $$0 = -1;
       break L114;
      }
      $324 = ($325 | 0) < 10;
      if ($324) {
       $$3303 = $325;
      } else {
       $$0 = 1;
       break;
      }
     }
    }
   } else {
    $$0 = $$1248;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _free($0) {
 $0 = $0 | 0;
 var $$0212$i = 0, $$0212$in$i = 0, $$0383 = 0, $$0384 = 0, $$0396 = 0, $$0403 = 0, $$1 = 0, $$1382 = 0, $$1387 = 0, $$1390 = 0, $$1398 = 0, $$1402 = 0, $$2 = 0, $$3 = 0, $$3400 = 0, $$pre = 0, $$pre$phi443Z2D = 0, $$pre$phi445Z2D = 0, $$pre$phiZ2D = 0, $$pre442 = 0;
 var $$pre444 = 0, $$sink3 = 0, $$sink5 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $cond421 = 0, $cond422 = 0, $not$ = 0, $not$405 = 0, $not$437 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0 | 0) == (0 | 0);
 if ($1) {
  return;
 }
 $2 = $0 + -8 | 0;
 $3 = SAFE_HEAP_LOAD(5724 | 0, 4, 0) | 0 | 0;
 $4 = $2 >>> 0 < $3 >>> 0;
 if ($4) {
  _abort();
 }
 $5 = $0 + -4 | 0;
 $6 = SAFE_HEAP_LOAD($5 | 0, 4, 0) | 0 | 0;
 $7 = $6 & 3;
 $8 = ($7 | 0) == 1;
 if ($8) {
  _abort();
 }
 $9 = $6 & -8;
 $10 = $2 + $9 | 0;
 $11 = $6 & 1;
 $12 = ($11 | 0) == 0;
 L10 : do {
  if ($12) {
   $13 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
   $14 = ($7 | 0) == 0;
   if ($14) {
    return;
   }
   $15 = 0 - $13 | 0;
   $16 = $2 + $15 | 0;
   $17 = $13 + $9 | 0;
   $18 = $16 >>> 0 < $3 >>> 0;
   if ($18) {
    _abort();
   }
   $19 = SAFE_HEAP_LOAD(5728 | 0, 4, 0) | 0 | 0;
   $20 = ($16 | 0) == ($19 | 0);
   if ($20) {
    $104 = $10 + 4 | 0;
    $105 = SAFE_HEAP_LOAD($104 | 0, 4, 0) | 0 | 0;
    $106 = $105 & 3;
    $107 = ($106 | 0) == 3;
    if (!$107) {
     $$1 = $16;
     $$1382 = $17;
     $113 = $16;
     break;
    }
    $108 = $16 + $17 | 0;
    $109 = $16 + 4 | 0;
    $110 = $17 | 1;
    $111 = $105 & -2;
    SAFE_HEAP_STORE(5716 | 0, $17 | 0, 4);
    SAFE_HEAP_STORE($104 | 0, $111 | 0, 4);
    SAFE_HEAP_STORE($109 | 0, $110 | 0, 4);
    SAFE_HEAP_STORE($108 | 0, $17 | 0, 4);
    return;
   }
   $21 = $13 >>> 3;
   $22 = $13 >>> 0 < 256;
   if ($22) {
    $23 = $16 + 8 | 0;
    $24 = SAFE_HEAP_LOAD($23 | 0, 4, 0) | 0 | 0;
    $25 = $16 + 12 | 0;
    $26 = SAFE_HEAP_LOAD($25 | 0, 4, 0) | 0 | 0;
    $27 = $21 << 1;
    $28 = 5748 + ($27 << 2) | 0;
    $29 = ($24 | 0) == ($28 | 0);
    if (!$29) {
     $30 = $24 >>> 0 < $3 >>> 0;
     if ($30) {
      _abort();
     }
     $31 = $24 + 12 | 0;
     $32 = SAFE_HEAP_LOAD($31 | 0, 4, 0) | 0 | 0;
     $33 = ($32 | 0) == ($16 | 0);
     if (!$33) {
      _abort();
     }
    }
    $34 = ($26 | 0) == ($24 | 0);
    if ($34) {
     $35 = 1 << $21;
     $36 = $35 ^ -1;
     $37 = SAFE_HEAP_LOAD(1427 * 4 | 0, 4, 0) | 0 | 0;
     $38 = $37 & $36;
     SAFE_HEAP_STORE(1427 * 4 | 0, $38 | 0, 4);
     $$1 = $16;
     $$1382 = $17;
     $113 = $16;
     break;
    }
    $39 = ($26 | 0) == ($28 | 0);
    if ($39) {
     $$pre444 = $26 + 8 | 0;
     $$pre$phi445Z2D = $$pre444;
    } else {
     $40 = $26 >>> 0 < $3 >>> 0;
     if ($40) {
      _abort();
     }
     $41 = $26 + 8 | 0;
     $42 = SAFE_HEAP_LOAD($41 | 0, 4, 0) | 0 | 0;
     $43 = ($42 | 0) == ($16 | 0);
     if ($43) {
      $$pre$phi445Z2D = $41;
     } else {
      _abort();
     }
    }
    $44 = $24 + 12 | 0;
    SAFE_HEAP_STORE($44 | 0, $26 | 0, 4);
    SAFE_HEAP_STORE($$pre$phi445Z2D | 0, $24 | 0, 4);
    $$1 = $16;
    $$1382 = $17;
    $113 = $16;
    break;
   }
   $45 = $16 + 24 | 0;
   $46 = SAFE_HEAP_LOAD($45 | 0, 4, 0) | 0 | 0;
   $47 = $16 + 12 | 0;
   $48 = SAFE_HEAP_LOAD($47 | 0, 4, 0) | 0 | 0;
   $49 = ($48 | 0) == ($16 | 0);
   do {
    if ($49) {
     $59 = $16 + 16 | 0;
     $60 = $59 + 4 | 0;
     $61 = SAFE_HEAP_LOAD($60 | 0, 4, 0) | 0 | 0;
     $62 = ($61 | 0) == (0 | 0);
     if ($62) {
      $63 = SAFE_HEAP_LOAD($59 | 0, 4, 0) | 0 | 0;
      $64 = ($63 | 0) == (0 | 0);
      if ($64) {
       $$3 = 0;
       break;
      } else {
       $$1387 = $63;
       $$1390 = $59;
      }
     } else {
      $$1387 = $61;
      $$1390 = $60;
     }
     while (1) {
      $65 = $$1387 + 20 | 0;
      $66 = SAFE_HEAP_LOAD($65 | 0, 4, 0) | 0 | 0;
      $67 = ($66 | 0) == (0 | 0);
      if (!$67) {
       $$1387 = $66;
       $$1390 = $65;
       continue;
      }
      $68 = $$1387 + 16 | 0;
      $69 = SAFE_HEAP_LOAD($68 | 0, 4, 0) | 0 | 0;
      $70 = ($69 | 0) == (0 | 0);
      if ($70) {
       break;
      } else {
       $$1387 = $69;
       $$1390 = $68;
      }
     }
     $71 = $$1390 >>> 0 < $3 >>> 0;
     if ($71) {
      _abort();
     } else {
      SAFE_HEAP_STORE($$1390 | 0, 0 | 0, 4);
      $$3 = $$1387;
      break;
     }
    } else {
     $50 = $16 + 8 | 0;
     $51 = SAFE_HEAP_LOAD($50 | 0, 4, 0) | 0 | 0;
     $52 = $51 >>> 0 < $3 >>> 0;
     if ($52) {
      _abort();
     }
     $53 = $51 + 12 | 0;
     $54 = SAFE_HEAP_LOAD($53 | 0, 4, 0) | 0 | 0;
     $55 = ($54 | 0) == ($16 | 0);
     if (!$55) {
      _abort();
     }
     $56 = $48 + 8 | 0;
     $57 = SAFE_HEAP_LOAD($56 | 0, 4, 0) | 0 | 0;
     $58 = ($57 | 0) == ($16 | 0);
     if ($58) {
      SAFE_HEAP_STORE($53 | 0, $48 | 0, 4);
      SAFE_HEAP_STORE($56 | 0, $51 | 0, 4);
      $$3 = $48;
      break;
     } else {
      _abort();
     }
    }
   } while (0);
   $72 = ($46 | 0) == (0 | 0);
   if ($72) {
    $$1 = $16;
    $$1382 = $17;
    $113 = $16;
   } else {
    $73 = $16 + 28 | 0;
    $74 = SAFE_HEAP_LOAD($73 | 0, 4, 0) | 0 | 0;
    $75 = 6012 + ($74 << 2) | 0;
    $76 = SAFE_HEAP_LOAD($75 | 0, 4, 0) | 0 | 0;
    $77 = ($16 | 0) == ($76 | 0);
    do {
     if ($77) {
      SAFE_HEAP_STORE($75 | 0, $$3 | 0, 4);
      $cond421 = ($$3 | 0) == (0 | 0);
      if ($cond421) {
       $78 = 1 << $74;
       $79 = $78 ^ -1;
       $80 = SAFE_HEAP_LOAD(5712 | 0, 4, 0) | 0 | 0;
       $81 = $80 & $79;
       SAFE_HEAP_STORE(5712 | 0, $81 | 0, 4);
       $$1 = $16;
       $$1382 = $17;
       $113 = $16;
       break L10;
      }
     } else {
      $82 = SAFE_HEAP_LOAD(5724 | 0, 4, 0) | 0 | 0;
      $83 = $46 >>> 0 < $82 >>> 0;
      if ($83) {
       _abort();
      } else {
       $84 = $46 + 16 | 0;
       $85 = SAFE_HEAP_LOAD($84 | 0, 4, 0) | 0 | 0;
       $not$405 = ($85 | 0) != ($16 | 0);
       $$sink3 = $not$405 & 1;
       $86 = ($46 + 16 | 0) + ($$sink3 << 2) | 0;
       SAFE_HEAP_STORE($86 | 0, $$3 | 0, 4);
       $87 = ($$3 | 0) == (0 | 0);
       if ($87) {
        $$1 = $16;
        $$1382 = $17;
        $113 = $16;
        break L10;
       } else {
        break;
       }
      }
     }
    } while (0);
    $88 = SAFE_HEAP_LOAD(5724 | 0, 4, 0) | 0 | 0;
    $89 = $$3 >>> 0 < $88 >>> 0;
    if ($89) {
     _abort();
    }
    $90 = $$3 + 24 | 0;
    SAFE_HEAP_STORE($90 | 0, $46 | 0, 4);
    $91 = $16 + 16 | 0;
    $92 = SAFE_HEAP_LOAD($91 | 0, 4, 0) | 0 | 0;
    $93 = ($92 | 0) == (0 | 0);
    do {
     if (!$93) {
      $94 = $92 >>> 0 < $88 >>> 0;
      if ($94) {
       _abort();
      } else {
       $95 = $$3 + 16 | 0;
       SAFE_HEAP_STORE($95 | 0, $92 | 0, 4);
       $96 = $92 + 24 | 0;
       SAFE_HEAP_STORE($96 | 0, $$3 | 0, 4);
       break;
      }
     }
    } while (0);
    $97 = $91 + 4 | 0;
    $98 = SAFE_HEAP_LOAD($97 | 0, 4, 0) | 0 | 0;
    $99 = ($98 | 0) == (0 | 0);
    if ($99) {
     $$1 = $16;
     $$1382 = $17;
     $113 = $16;
    } else {
     $100 = SAFE_HEAP_LOAD(5724 | 0, 4, 0) | 0 | 0;
     $101 = $98 >>> 0 < $100 >>> 0;
     if ($101) {
      _abort();
     } else {
      $102 = $$3 + 20 | 0;
      SAFE_HEAP_STORE($102 | 0, $98 | 0, 4);
      $103 = $98 + 24 | 0;
      SAFE_HEAP_STORE($103 | 0, $$3 | 0, 4);
      $$1 = $16;
      $$1382 = $17;
      $113 = $16;
      break;
     }
    }
   }
  } else {
   $$1 = $2;
   $$1382 = $9;
   $113 = $2;
  }
 } while (0);
 $112 = $113 >>> 0 < $10 >>> 0;
 if (!$112) {
  _abort();
 }
 $114 = $10 + 4 | 0;
 $115 = SAFE_HEAP_LOAD($114 | 0, 4, 0) | 0 | 0;
 $116 = $115 & 1;
 $117 = ($116 | 0) == 0;
 if ($117) {
  _abort();
 }
 $118 = $115 & 2;
 $119 = ($118 | 0) == 0;
 if ($119) {
  $120 = SAFE_HEAP_LOAD(5732 | 0, 4, 0) | 0 | 0;
  $121 = ($10 | 0) == ($120 | 0);
  $122 = SAFE_HEAP_LOAD(5728 | 0, 4, 0) | 0 | 0;
  if ($121) {
   $123 = SAFE_HEAP_LOAD(5720 | 0, 4, 0) | 0 | 0;
   $124 = $123 + $$1382 | 0;
   SAFE_HEAP_STORE(5720 | 0, $124 | 0, 4);
   SAFE_HEAP_STORE(5732 | 0, $$1 | 0, 4);
   $125 = $124 | 1;
   $126 = $$1 + 4 | 0;
   SAFE_HEAP_STORE($126 | 0, $125 | 0, 4);
   $127 = ($$1 | 0) == ($122 | 0);
   if (!$127) {
    return;
   }
   SAFE_HEAP_STORE(5728 | 0, 0 | 0, 4);
   SAFE_HEAP_STORE(5716 | 0, 0 | 0, 4);
   return;
  }
  $128 = ($10 | 0) == ($122 | 0);
  if ($128) {
   $129 = SAFE_HEAP_LOAD(5716 | 0, 4, 0) | 0 | 0;
   $130 = $129 + $$1382 | 0;
   SAFE_HEAP_STORE(5716 | 0, $130 | 0, 4);
   SAFE_HEAP_STORE(5728 | 0, $113 | 0, 4);
   $131 = $130 | 1;
   $132 = $$1 + 4 | 0;
   SAFE_HEAP_STORE($132 | 0, $131 | 0, 4);
   $133 = $113 + $130 | 0;
   SAFE_HEAP_STORE($133 | 0, $130 | 0, 4);
   return;
  }
  $134 = $115 & -8;
  $135 = $134 + $$1382 | 0;
  $136 = $115 >>> 3;
  $137 = $115 >>> 0 < 256;
  L108 : do {
   if ($137) {
    $138 = $10 + 8 | 0;
    $139 = SAFE_HEAP_LOAD($138 | 0, 4, 0) | 0 | 0;
    $140 = $10 + 12 | 0;
    $141 = SAFE_HEAP_LOAD($140 | 0, 4, 0) | 0 | 0;
    $142 = $136 << 1;
    $143 = 5748 + ($142 << 2) | 0;
    $144 = ($139 | 0) == ($143 | 0);
    if (!$144) {
     $145 = SAFE_HEAP_LOAD(5724 | 0, 4, 0) | 0 | 0;
     $146 = $139 >>> 0 < $145 >>> 0;
     if ($146) {
      _abort();
     }
     $147 = $139 + 12 | 0;
     $148 = SAFE_HEAP_LOAD($147 | 0, 4, 0) | 0 | 0;
     $149 = ($148 | 0) == ($10 | 0);
     if (!$149) {
      _abort();
     }
    }
    $150 = ($141 | 0) == ($139 | 0);
    if ($150) {
     $151 = 1 << $136;
     $152 = $151 ^ -1;
     $153 = SAFE_HEAP_LOAD(1427 * 4 | 0, 4, 0) | 0 | 0;
     $154 = $153 & $152;
     SAFE_HEAP_STORE(1427 * 4 | 0, $154 | 0, 4);
     break;
    }
    $155 = ($141 | 0) == ($143 | 0);
    if ($155) {
     $$pre442 = $141 + 8 | 0;
     $$pre$phi443Z2D = $$pre442;
    } else {
     $156 = SAFE_HEAP_LOAD(5724 | 0, 4, 0) | 0 | 0;
     $157 = $141 >>> 0 < $156 >>> 0;
     if ($157) {
      _abort();
     }
     $158 = $141 + 8 | 0;
     $159 = SAFE_HEAP_LOAD($158 | 0, 4, 0) | 0 | 0;
     $160 = ($159 | 0) == ($10 | 0);
     if ($160) {
      $$pre$phi443Z2D = $158;
     } else {
      _abort();
     }
    }
    $161 = $139 + 12 | 0;
    SAFE_HEAP_STORE($161 | 0, $141 | 0, 4);
    SAFE_HEAP_STORE($$pre$phi443Z2D | 0, $139 | 0, 4);
   } else {
    $162 = $10 + 24 | 0;
    $163 = SAFE_HEAP_LOAD($162 | 0, 4, 0) | 0 | 0;
    $164 = $10 + 12 | 0;
    $165 = SAFE_HEAP_LOAD($164 | 0, 4, 0) | 0 | 0;
    $166 = ($165 | 0) == ($10 | 0);
    do {
     if ($166) {
      $177 = $10 + 16 | 0;
      $178 = $177 + 4 | 0;
      $179 = SAFE_HEAP_LOAD($178 | 0, 4, 0) | 0 | 0;
      $180 = ($179 | 0) == (0 | 0);
      if ($180) {
       $181 = SAFE_HEAP_LOAD($177 | 0, 4, 0) | 0 | 0;
       $182 = ($181 | 0) == (0 | 0);
       if ($182) {
        $$3400 = 0;
        break;
       } else {
        $$1398 = $181;
        $$1402 = $177;
       }
      } else {
       $$1398 = $179;
       $$1402 = $178;
      }
      while (1) {
       $183 = $$1398 + 20 | 0;
       $184 = SAFE_HEAP_LOAD($183 | 0, 4, 0) | 0 | 0;
       $185 = ($184 | 0) == (0 | 0);
       if (!$185) {
        $$1398 = $184;
        $$1402 = $183;
        continue;
       }
       $186 = $$1398 + 16 | 0;
       $187 = SAFE_HEAP_LOAD($186 | 0, 4, 0) | 0 | 0;
       $188 = ($187 | 0) == (0 | 0);
       if ($188) {
        break;
       } else {
        $$1398 = $187;
        $$1402 = $186;
       }
      }
      $189 = SAFE_HEAP_LOAD(5724 | 0, 4, 0) | 0 | 0;
      $190 = $$1402 >>> 0 < $189 >>> 0;
      if ($190) {
       _abort();
      } else {
       SAFE_HEAP_STORE($$1402 | 0, 0 | 0, 4);
       $$3400 = $$1398;
       break;
      }
     } else {
      $167 = $10 + 8 | 0;
      $168 = SAFE_HEAP_LOAD($167 | 0, 4, 0) | 0 | 0;
      $169 = SAFE_HEAP_LOAD(5724 | 0, 4, 0) | 0 | 0;
      $170 = $168 >>> 0 < $169 >>> 0;
      if ($170) {
       _abort();
      }
      $171 = $168 + 12 | 0;
      $172 = SAFE_HEAP_LOAD($171 | 0, 4, 0) | 0 | 0;
      $173 = ($172 | 0) == ($10 | 0);
      if (!$173) {
       _abort();
      }
      $174 = $165 + 8 | 0;
      $175 = SAFE_HEAP_LOAD($174 | 0, 4, 0) | 0 | 0;
      $176 = ($175 | 0) == ($10 | 0);
      if ($176) {
       SAFE_HEAP_STORE($171 | 0, $165 | 0, 4);
       SAFE_HEAP_STORE($174 | 0, $168 | 0, 4);
       $$3400 = $165;
       break;
      } else {
       _abort();
      }
     }
    } while (0);
    $191 = ($163 | 0) == (0 | 0);
    if (!$191) {
     $192 = $10 + 28 | 0;
     $193 = SAFE_HEAP_LOAD($192 | 0, 4, 0) | 0 | 0;
     $194 = 6012 + ($193 << 2) | 0;
     $195 = SAFE_HEAP_LOAD($194 | 0, 4, 0) | 0 | 0;
     $196 = ($10 | 0) == ($195 | 0);
     do {
      if ($196) {
       SAFE_HEAP_STORE($194 | 0, $$3400 | 0, 4);
       $cond422 = ($$3400 | 0) == (0 | 0);
       if ($cond422) {
        $197 = 1 << $193;
        $198 = $197 ^ -1;
        $199 = SAFE_HEAP_LOAD(5712 | 0, 4, 0) | 0 | 0;
        $200 = $199 & $198;
        SAFE_HEAP_STORE(5712 | 0, $200 | 0, 4);
        break L108;
       }
      } else {
       $201 = SAFE_HEAP_LOAD(5724 | 0, 4, 0) | 0 | 0;
       $202 = $163 >>> 0 < $201 >>> 0;
       if ($202) {
        _abort();
       } else {
        $203 = $163 + 16 | 0;
        $204 = SAFE_HEAP_LOAD($203 | 0, 4, 0) | 0 | 0;
        $not$ = ($204 | 0) != ($10 | 0);
        $$sink5 = $not$ & 1;
        $205 = ($163 + 16 | 0) + ($$sink5 << 2) | 0;
        SAFE_HEAP_STORE($205 | 0, $$3400 | 0, 4);
        $206 = ($$3400 | 0) == (0 | 0);
        if ($206) {
         break L108;
        } else {
         break;
        }
       }
      }
     } while (0);
     $207 = SAFE_HEAP_LOAD(5724 | 0, 4, 0) | 0 | 0;
     $208 = $$3400 >>> 0 < $207 >>> 0;
     if ($208) {
      _abort();
     }
     $209 = $$3400 + 24 | 0;
     SAFE_HEAP_STORE($209 | 0, $163 | 0, 4);
     $210 = $10 + 16 | 0;
     $211 = SAFE_HEAP_LOAD($210 | 0, 4, 0) | 0 | 0;
     $212 = ($211 | 0) == (0 | 0);
     do {
      if (!$212) {
       $213 = $211 >>> 0 < $207 >>> 0;
       if ($213) {
        _abort();
       } else {
        $214 = $$3400 + 16 | 0;
        SAFE_HEAP_STORE($214 | 0, $211 | 0, 4);
        $215 = $211 + 24 | 0;
        SAFE_HEAP_STORE($215 | 0, $$3400 | 0, 4);
        break;
       }
      }
     } while (0);
     $216 = $210 + 4 | 0;
     $217 = SAFE_HEAP_LOAD($216 | 0, 4, 0) | 0 | 0;
     $218 = ($217 | 0) == (0 | 0);
     if (!$218) {
      $219 = SAFE_HEAP_LOAD(5724 | 0, 4, 0) | 0 | 0;
      $220 = $217 >>> 0 < $219 >>> 0;
      if ($220) {
       _abort();
      } else {
       $221 = $$3400 + 20 | 0;
       SAFE_HEAP_STORE($221 | 0, $217 | 0, 4);
       $222 = $217 + 24 | 0;
       SAFE_HEAP_STORE($222 | 0, $$3400 | 0, 4);
       break;
      }
     }
    }
   }
  } while (0);
  $223 = $135 | 1;
  $224 = $$1 + 4 | 0;
  SAFE_HEAP_STORE($224 | 0, $223 | 0, 4);
  $225 = $113 + $135 | 0;
  SAFE_HEAP_STORE($225 | 0, $135 | 0, 4);
  $226 = SAFE_HEAP_LOAD(5728 | 0, 4, 0) | 0 | 0;
  $227 = ($$1 | 0) == ($226 | 0);
  if ($227) {
   SAFE_HEAP_STORE(5716 | 0, $135 | 0, 4);
   return;
  } else {
   $$2 = $135;
  }
 } else {
  $228 = $115 & -2;
  SAFE_HEAP_STORE($114 | 0, $228 | 0, 4);
  $229 = $$1382 | 1;
  $230 = $$1 + 4 | 0;
  SAFE_HEAP_STORE($230 | 0, $229 | 0, 4);
  $231 = $113 + $$1382 | 0;
  SAFE_HEAP_STORE($231 | 0, $$1382 | 0, 4);
  $$2 = $$1382;
 }
 $232 = $$2 >>> 3;
 $233 = $$2 >>> 0 < 256;
 if ($233) {
  $234 = $232 << 1;
  $235 = 5748 + ($234 << 2) | 0;
  $236 = SAFE_HEAP_LOAD(1427 * 4 | 0, 4, 0) | 0 | 0;
  $237 = 1 << $232;
  $238 = $236 & $237;
  $239 = ($238 | 0) == 0;
  if ($239) {
   $240 = $236 | $237;
   SAFE_HEAP_STORE(1427 * 4 | 0, $240 | 0, 4);
   $$pre = $235 + 8 | 0;
   $$0403 = $235;
   $$pre$phiZ2D = $$pre;
  } else {
   $241 = $235 + 8 | 0;
   $242 = SAFE_HEAP_LOAD($241 | 0, 4, 0) | 0 | 0;
   $243 = SAFE_HEAP_LOAD(5724 | 0, 4, 0) | 0 | 0;
   $244 = $242 >>> 0 < $243 >>> 0;
   if ($244) {
    _abort();
   } else {
    $$0403 = $242;
    $$pre$phiZ2D = $241;
   }
  }
  SAFE_HEAP_STORE($$pre$phiZ2D | 0, $$1 | 0, 4);
  $245 = $$0403 + 12 | 0;
  SAFE_HEAP_STORE($245 | 0, $$1 | 0, 4);
  $246 = $$1 + 8 | 0;
  SAFE_HEAP_STORE($246 | 0, $$0403 | 0, 4);
  $247 = $$1 + 12 | 0;
  SAFE_HEAP_STORE($247 | 0, $235 | 0, 4);
  return;
 }
 $248 = $$2 >>> 8;
 $249 = ($248 | 0) == 0;
 if ($249) {
  $$0396 = 0;
 } else {
  $250 = $$2 >>> 0 > 16777215;
  if ($250) {
   $$0396 = 31;
  } else {
   $251 = $248 + 1048320 | 0;
   $252 = $251 >>> 16;
   $253 = $252 & 8;
   $254 = $248 << $253;
   $255 = $254 + 520192 | 0;
   $256 = $255 >>> 16;
   $257 = $256 & 4;
   $258 = $257 | $253;
   $259 = $254 << $257;
   $260 = $259 + 245760 | 0;
   $261 = $260 >>> 16;
   $262 = $261 & 2;
   $263 = $258 | $262;
   $264 = 14 - $263 | 0;
   $265 = $259 << $262;
   $266 = $265 >>> 15;
   $267 = $264 + $266 | 0;
   $268 = $267 << 1;
   $269 = $267 + 7 | 0;
   $270 = $$2 >>> $269;
   $271 = $270 & 1;
   $272 = $271 | $268;
   $$0396 = $272;
  }
 }
 $273 = 6012 + ($$0396 << 2) | 0;
 $274 = $$1 + 28 | 0;
 SAFE_HEAP_STORE($274 | 0, $$0396 | 0, 4);
 $275 = $$1 + 16 | 0;
 $276 = $$1 + 20 | 0;
 SAFE_HEAP_STORE($276 | 0, 0 | 0, 4);
 SAFE_HEAP_STORE($275 | 0, 0 | 0, 4);
 $277 = SAFE_HEAP_LOAD(5712 | 0, 4, 0) | 0 | 0;
 $278 = 1 << $$0396;
 $279 = $277 & $278;
 $280 = ($279 | 0) == 0;
 do {
  if ($280) {
   $281 = $277 | $278;
   SAFE_HEAP_STORE(5712 | 0, $281 | 0, 4);
   SAFE_HEAP_STORE($273 | 0, $$1 | 0, 4);
   $282 = $$1 + 24 | 0;
   SAFE_HEAP_STORE($282 | 0, $273 | 0, 4);
   $283 = $$1 + 12 | 0;
   SAFE_HEAP_STORE($283 | 0, $$1 | 0, 4);
   $284 = $$1 + 8 | 0;
   SAFE_HEAP_STORE($284 | 0, $$1 | 0, 4);
  } else {
   $285 = SAFE_HEAP_LOAD($273 | 0, 4, 0) | 0 | 0;
   $286 = ($$0396 | 0) == 31;
   $287 = $$0396 >>> 1;
   $288 = 25 - $287 | 0;
   $289 = $286 ? 0 : $288;
   $290 = $$2 << $289;
   $$0383 = $290;
   $$0384 = $285;
   while (1) {
    $291 = $$0384 + 4 | 0;
    $292 = SAFE_HEAP_LOAD($291 | 0, 4, 0) | 0 | 0;
    $293 = $292 & -8;
    $294 = ($293 | 0) == ($$2 | 0);
    if ($294) {
     label = 124;
     break;
    }
    $295 = $$0383 >>> 31;
    $296 = ($$0384 + 16 | 0) + ($295 << 2) | 0;
    $297 = $$0383 << 1;
    $298 = SAFE_HEAP_LOAD($296 | 0, 4, 0) | 0 | 0;
    $299 = ($298 | 0) == (0 | 0);
    if ($299) {
     label = 121;
     break;
    } else {
     $$0383 = $297;
     $$0384 = $298;
    }
   }
   if ((label | 0) == 121) {
    $300 = SAFE_HEAP_LOAD(5724 | 0, 4, 0) | 0 | 0;
    $301 = $296 >>> 0 < $300 >>> 0;
    if ($301) {
     _abort();
    } else {
     SAFE_HEAP_STORE($296 | 0, $$1 | 0, 4);
     $302 = $$1 + 24 | 0;
     SAFE_HEAP_STORE($302 | 0, $$0384 | 0, 4);
     $303 = $$1 + 12 | 0;
     SAFE_HEAP_STORE($303 | 0, $$1 | 0, 4);
     $304 = $$1 + 8 | 0;
     SAFE_HEAP_STORE($304 | 0, $$1 | 0, 4);
     break;
    }
   } else if ((label | 0) == 124) {
    $305 = $$0384 + 8 | 0;
    $306 = SAFE_HEAP_LOAD($305 | 0, 4, 0) | 0 | 0;
    $307 = SAFE_HEAP_LOAD(5724 | 0, 4, 0) | 0 | 0;
    $308 = $306 >>> 0 >= $307 >>> 0;
    $not$437 = $$0384 >>> 0 >= $307 >>> 0;
    $309 = $308 & $not$437;
    if ($309) {
     $310 = $306 + 12 | 0;
     SAFE_HEAP_STORE($310 | 0, $$1 | 0, 4);
     SAFE_HEAP_STORE($305 | 0, $$1 | 0, 4);
     $311 = $$1 + 8 | 0;
     SAFE_HEAP_STORE($311 | 0, $306 | 0, 4);
     $312 = $$1 + 12 | 0;
     SAFE_HEAP_STORE($312 | 0, $$0384 | 0, 4);
     $313 = $$1 + 24 | 0;
     SAFE_HEAP_STORE($313 | 0, 0 | 0, 4);
     break;
    } else {
     _abort();
    }
   }
  }
 } while (0);
 $314 = SAFE_HEAP_LOAD(5740 | 0, 4, 0) | 0 | 0;
 $315 = $314 + -1 | 0;
 SAFE_HEAP_STORE(5740 | 0, $315 | 0, 4);
 $316 = ($315 | 0) == 0;
 if ($316) {
  $$0212$in$i = 6164;
 } else {
  return;
 }
 while (1) {
  $$0212$i = SAFE_HEAP_LOAD($$0212$in$i | 0, 4, 0) | 0 | 0;
  $317 = ($$0212$i | 0) == (0 | 0);
  $318 = $$0212$i + 8 | 0;
  if ($317) {
   break;
  } else {
   $$0212$in$i = $318;
  }
 }
 SAFE_HEAP_STORE(5740 | 0, -1 | 0, 4);
 return;
}

function _pop_arg($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$mask = 0, $$mask31 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0;
 var $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next6 = 0, $arglist_next9 = 0, $expanded = 0, $expanded28 = 0, $expanded30 = 0, $expanded31 = 0;
 var $expanded32 = 0, $expanded34 = 0, $expanded35 = 0, $expanded37 = 0, $expanded38 = 0, $expanded39 = 0, $expanded41 = 0, $expanded42 = 0, $expanded44 = 0, $expanded45 = 0, $expanded46 = 0, $expanded48 = 0, $expanded49 = 0, $expanded51 = 0, $expanded52 = 0, $expanded53 = 0, $expanded55 = 0, $expanded56 = 0, $expanded58 = 0, $expanded59 = 0;
 var $expanded60 = 0, $expanded62 = 0, $expanded63 = 0, $expanded65 = 0, $expanded66 = 0, $expanded67 = 0, $expanded69 = 0, $expanded70 = 0, $expanded72 = 0, $expanded73 = 0, $expanded74 = 0, $expanded76 = 0, $expanded77 = 0, $expanded79 = 0, $expanded80 = 0, $expanded81 = 0, $expanded83 = 0, $expanded84 = 0, $expanded86 = 0, $expanded87 = 0;
 var $expanded88 = 0, $expanded90 = 0, $expanded91 = 0, $expanded93 = 0, $expanded94 = 0, $expanded95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1 >>> 0 > 20;
 L1 : do {
  if (!$3) {
   do {
    switch ($1 | 0) {
    case 9:
     {
      $arglist_current = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
      $4 = $arglist_current;
      $5 = 0 + 4 | 0;
      $expanded28 = $5;
      $expanded = $expanded28 - 1 | 0;
      $6 = $4 + $expanded | 0;
      $7 = 0 + 4 | 0;
      $expanded32 = $7;
      $expanded31 = $expanded32 - 1 | 0;
      $expanded30 = $expanded31 ^ -1;
      $8 = $6 & $expanded30;
      $9 = $8;
      $10 = SAFE_HEAP_LOAD($9 | 0, 4, 0) | 0 | 0;
      $arglist_next = $9 + 4 | 0;
      SAFE_HEAP_STORE($2 | 0, $arglist_next | 0, 4);
      SAFE_HEAP_STORE($0 | 0, $10 | 0, 4);
      break L1;
      break;
     }
    case 10:
     {
      $arglist_current2 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
      $11 = $arglist_current2;
      $12 = 0 + 4 | 0;
      $expanded35 = $12;
      $expanded34 = $expanded35 - 1 | 0;
      $13 = $11 + $expanded34 | 0;
      $14 = 0 + 4 | 0;
      $expanded39 = $14;
      $expanded38 = $expanded39 - 1 | 0;
      $expanded37 = $expanded38 ^ -1;
      $15 = $13 & $expanded37;
      $16 = $15;
      $17 = SAFE_HEAP_LOAD($16 | 0, 4, 0) | 0 | 0;
      $arglist_next3 = $16 + 4 | 0;
      SAFE_HEAP_STORE($2 | 0, $arglist_next3 | 0, 4);
      $18 = ($17 | 0) < 0;
      $19 = $18 << 31 >> 31;
      $20 = $0;
      $21 = $20;
      SAFE_HEAP_STORE($21 | 0, $17 | 0, 4);
      $22 = $20 + 4 | 0;
      $23 = $22;
      SAFE_HEAP_STORE($23 | 0, $19 | 0, 4);
      break L1;
      break;
     }
    case 11:
     {
      $arglist_current5 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
      $24 = $arglist_current5;
      $25 = 0 + 4 | 0;
      $expanded42 = $25;
      $expanded41 = $expanded42 - 1 | 0;
      $26 = $24 + $expanded41 | 0;
      $27 = 0 + 4 | 0;
      $expanded46 = $27;
      $expanded45 = $expanded46 - 1 | 0;
      $expanded44 = $expanded45 ^ -1;
      $28 = $26 & $expanded44;
      $29 = $28;
      $30 = SAFE_HEAP_LOAD($29 | 0, 4, 0) | 0 | 0;
      $arglist_next6 = $29 + 4 | 0;
      SAFE_HEAP_STORE($2 | 0, $arglist_next6 | 0, 4);
      $31 = $0;
      $32 = $31;
      SAFE_HEAP_STORE($32 | 0, $30 | 0, 4);
      $33 = $31 + 4 | 0;
      $34 = $33;
      SAFE_HEAP_STORE($34 | 0, 0 | 0, 4);
      break L1;
      break;
     }
    case 12:
     {
      $arglist_current8 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
      $35 = $arglist_current8;
      $36 = 0 + 8 | 0;
      $expanded49 = $36;
      $expanded48 = $expanded49 - 1 | 0;
      $37 = $35 + $expanded48 | 0;
      $38 = 0 + 8 | 0;
      $expanded53 = $38;
      $expanded52 = $expanded53 - 1 | 0;
      $expanded51 = $expanded52 ^ -1;
      $39 = $37 & $expanded51;
      $40 = $39;
      $41 = $40;
      $42 = $41;
      $43 = SAFE_HEAP_LOAD($42 | 0, 4, 0) | 0 | 0;
      $44 = $41 + 4 | 0;
      $45 = $44;
      $46 = SAFE_HEAP_LOAD($45 | 0, 4, 0) | 0 | 0;
      $arglist_next9 = $40 + 8 | 0;
      SAFE_HEAP_STORE($2 | 0, $arglist_next9 | 0, 4);
      $47 = $0;
      $48 = $47;
      SAFE_HEAP_STORE($48 | 0, $43 | 0, 4);
      $49 = $47 + 4 | 0;
      $50 = $49;
      SAFE_HEAP_STORE($50 | 0, $46 | 0, 4);
      break L1;
      break;
     }
    case 13:
     {
      $arglist_current11 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
      $51 = $arglist_current11;
      $52 = 0 + 4 | 0;
      $expanded56 = $52;
      $expanded55 = $expanded56 - 1 | 0;
      $53 = $51 + $expanded55 | 0;
      $54 = 0 + 4 | 0;
      $expanded60 = $54;
      $expanded59 = $expanded60 - 1 | 0;
      $expanded58 = $expanded59 ^ -1;
      $55 = $53 & $expanded58;
      $56 = $55;
      $57 = SAFE_HEAP_LOAD($56 | 0, 4, 0) | 0 | 0;
      $arglist_next12 = $56 + 4 | 0;
      SAFE_HEAP_STORE($2 | 0, $arglist_next12 | 0, 4);
      $58 = $57 & 65535;
      $59 = $58 << 16 >> 16;
      $60 = ($59 | 0) < 0;
      $61 = $60 << 31 >> 31;
      $62 = $0;
      $63 = $62;
      SAFE_HEAP_STORE($63 | 0, $59 | 0, 4);
      $64 = $62 + 4 | 0;
      $65 = $64;
      SAFE_HEAP_STORE($65 | 0, $61 | 0, 4);
      break L1;
      break;
     }
    case 14:
     {
      $arglist_current14 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
      $66 = $arglist_current14;
      $67 = 0 + 4 | 0;
      $expanded63 = $67;
      $expanded62 = $expanded63 - 1 | 0;
      $68 = $66 + $expanded62 | 0;
      $69 = 0 + 4 | 0;
      $expanded67 = $69;
      $expanded66 = $expanded67 - 1 | 0;
      $expanded65 = $expanded66 ^ -1;
      $70 = $68 & $expanded65;
      $71 = $70;
      $72 = SAFE_HEAP_LOAD($71 | 0, 4, 0) | 0 | 0;
      $arglist_next15 = $71 + 4 | 0;
      SAFE_HEAP_STORE($2 | 0, $arglist_next15 | 0, 4);
      $$mask31 = $72 & 65535;
      $73 = $0;
      $74 = $73;
      SAFE_HEAP_STORE($74 | 0, $$mask31 | 0, 4);
      $75 = $73 + 4 | 0;
      $76 = $75;
      SAFE_HEAP_STORE($76 | 0, 0 | 0, 4);
      break L1;
      break;
     }
    case 15:
     {
      $arglist_current17 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
      $77 = $arglist_current17;
      $78 = 0 + 4 | 0;
      $expanded70 = $78;
      $expanded69 = $expanded70 - 1 | 0;
      $79 = $77 + $expanded69 | 0;
      $80 = 0 + 4 | 0;
      $expanded74 = $80;
      $expanded73 = $expanded74 - 1 | 0;
      $expanded72 = $expanded73 ^ -1;
      $81 = $79 & $expanded72;
      $82 = $81;
      $83 = SAFE_HEAP_LOAD($82 | 0, 4, 0) | 0 | 0;
      $arglist_next18 = $82 + 4 | 0;
      SAFE_HEAP_STORE($2 | 0, $arglist_next18 | 0, 4);
      $84 = $83 & 255;
      $85 = $84 << 24 >> 24;
      $86 = ($85 | 0) < 0;
      $87 = $86 << 31 >> 31;
      $88 = $0;
      $89 = $88;
      SAFE_HEAP_STORE($89 | 0, $85 | 0, 4);
      $90 = $88 + 4 | 0;
      $91 = $90;
      SAFE_HEAP_STORE($91 | 0, $87 | 0, 4);
      break L1;
      break;
     }
    case 16:
     {
      $arglist_current20 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
      $92 = $arglist_current20;
      $93 = 0 + 4 | 0;
      $expanded77 = $93;
      $expanded76 = $expanded77 - 1 | 0;
      $94 = $92 + $expanded76 | 0;
      $95 = 0 + 4 | 0;
      $expanded81 = $95;
      $expanded80 = $expanded81 - 1 | 0;
      $expanded79 = $expanded80 ^ -1;
      $96 = $94 & $expanded79;
      $97 = $96;
      $98 = SAFE_HEAP_LOAD($97 | 0, 4, 0) | 0 | 0;
      $arglist_next21 = $97 + 4 | 0;
      SAFE_HEAP_STORE($2 | 0, $arglist_next21 | 0, 4);
      $$mask = $98 & 255;
      $99 = $0;
      $100 = $99;
      SAFE_HEAP_STORE($100 | 0, $$mask | 0, 4);
      $101 = $99 + 4 | 0;
      $102 = $101;
      SAFE_HEAP_STORE($102 | 0, 0 | 0, 4);
      break L1;
      break;
     }
    case 17:
     {
      $arglist_current23 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
      $103 = $arglist_current23;
      $104 = 0 + 8 | 0;
      $expanded84 = $104;
      $expanded83 = $expanded84 - 1 | 0;
      $105 = $103 + $expanded83 | 0;
      $106 = 0 + 8 | 0;
      $expanded88 = $106;
      $expanded87 = $expanded88 - 1 | 0;
      $expanded86 = $expanded87 ^ -1;
      $107 = $105 & $expanded86;
      $108 = $107;
      $109 = +(+SAFE_HEAP_LOAD_D($108 | 0, 8));
      $arglist_next24 = $108 + 8 | 0;
      SAFE_HEAP_STORE($2 | 0, $arglist_next24 | 0, 4);
      SAFE_HEAP_STORE_D($0 | 0, +$109, 8);
      break L1;
      break;
     }
    case 18:
     {
      $arglist_current26 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
      $110 = $arglist_current26;
      $111 = 0 + 8 | 0;
      $expanded91 = $111;
      $expanded90 = $expanded91 - 1 | 0;
      $112 = $110 + $expanded90 | 0;
      $113 = 0 + 8 | 0;
      $expanded95 = $113;
      $expanded94 = $expanded95 - 1 | 0;
      $expanded93 = $expanded94 ^ -1;
      $114 = $112 & $expanded93;
      $115 = $114;
      $116 = +(+SAFE_HEAP_LOAD_D($115 | 0, 8));
      $arglist_next27 = $115 + 8 | 0;
      SAFE_HEAP_STORE($2 | 0, $arglist_next27 | 0, 4);
      SAFE_HEAP_STORE_D($0 | 0, +$116, 8);
      break L1;
      break;
     }
    default:
     {
      break L1;
     }
    }
   } while (0);
  }
 } while (0);
 return;
}

function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 $rem = $rem | 0;
 var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
 $n_sroa_0_0_extract_trunc = $a$0;
 $n_sroa_1_4_extract_shift$0 = $a$1;
 $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
 $d_sroa_0_0_extract_trunc = $b$0;
 $d_sroa_1_4_extract_shift$0 = $b$1;
 $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
 if (($n_sroa_1_4_extract_trunc | 0) == 0) {
  $4 = ($rem | 0) != 0;
  if (($d_sroa_1_4_extract_trunc | 0) == 0) {
   if ($4) {
    SAFE_HEAP_STORE($rem | 0, ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0) | 0, 4);
    SAFE_HEAP_STORE($rem + 4 | 0, 0 | 0, 4);
   }
   $_0$1 = 0;
   $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  } else {
   if (!$4) {
    $_0$1 = 0;
    $_0$0 = 0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
   }
   SAFE_HEAP_STORE($rem | 0, $a$0 & -1 | 0, 4);
   SAFE_HEAP_STORE($rem + 4 | 0, $a$1 & 0 | 0, 4);
   $_0$1 = 0;
   $_0$0 = 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
 }
 $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
 do {
  if (($d_sroa_0_0_extract_trunc | 0) == 0) {
   if ($17) {
    if (($rem | 0) != 0) {
     SAFE_HEAP_STORE($rem | 0, ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0) | 0, 4);
     SAFE_HEAP_STORE($rem + 4 | 0, 0 | 0, 4);
    }
    $_0$1 = 0;
    $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
   }
   if (($n_sroa_0_0_extract_trunc | 0) == 0) {
    if (($rem | 0) != 0) {
     SAFE_HEAP_STORE($rem | 0, 0 | 0, 4);
     SAFE_HEAP_STORE($rem + 4 | 0, ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0) | 0, 4);
    }
    $_0$1 = 0;
    $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
   }
   $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
   if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
    if (($rem | 0) != 0) {
     SAFE_HEAP_STORE($rem | 0, 0 | $a$0 & -1 | 0, 4);
     SAFE_HEAP_STORE($rem + 4 | 0, $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0 | 0, 4);
    }
    $_0$1 = 0;
    $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
    return (tempRet0 = $_0$1, $_0$0) | 0;
   }
   $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
   $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
   if ($51 >>> 0 <= 30) {
    $57 = $51 + 1 | 0;
    $58 = 31 - $51 | 0;
    $sr_1_ph = $57;
    $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
    $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
    $q_sroa_0_1_ph = 0;
    $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
    break;
   }
   if (($rem | 0) == 0) {
    $_0$1 = 0;
    $_0$0 = 0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
   }
   SAFE_HEAP_STORE($rem | 0, 0 | $a$0 & -1 | 0, 4);
   SAFE_HEAP_STORE($rem + 4 | 0, $n_sroa_1_4_extract_shift$0 | $a$1 & 0 | 0, 4);
   $_0$1 = 0;
   $_0$0 = 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  } else {
   if (!$17) {
    $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
    $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
    if ($119 >>> 0 <= 31) {
     $125 = $119 + 1 | 0;
     $126 = 31 - $119 | 0;
     $130 = $119 - 31 >> 31;
     $sr_1_ph = $125;
     $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
     $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
     $q_sroa_0_1_ph = 0;
     $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
     break;
    }
    if (($rem | 0) == 0) {
     $_0$1 = 0;
     $_0$0 = 0;
     return (tempRet0 = $_0$1, $_0$0) | 0;
    }
    SAFE_HEAP_STORE($rem | 0, 0 | $a$0 & -1 | 0, 4);
    SAFE_HEAP_STORE($rem + 4 | 0, $n_sroa_1_4_extract_shift$0 | $a$1 & 0 | 0, 4);
    $_0$1 = 0;
    $_0$0 = 0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
   }
   $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
   if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
    $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
    $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
    $89 = 64 - $88 | 0;
    $91 = 32 - $88 | 0;
    $92 = $91 >> 31;
    $95 = $88 - 32 | 0;
    $105 = $95 >> 31;
    $sr_1_ph = $88;
    $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
    $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
    $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
    $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
    break;
   }
   if (($rem | 0) != 0) {
    SAFE_HEAP_STORE($rem | 0, $66 & $n_sroa_0_0_extract_trunc | 0, 4);
    SAFE_HEAP_STORE($rem + 4 | 0, 0 | 0, 4);
   }
   if (($d_sroa_0_0_extract_trunc | 0) == 1) {
    $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
    $_0$0 = 0 | $a$0 & -1;
    return (tempRet0 = $_0$1, $_0$0) | 0;
   } else {
    $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
    $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
    $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
   }
  }
 } while (0);
 if (($sr_1_ph | 0) == 0) {
  $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
  $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
  $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
  $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
  $carry_0_lcssa$1 = 0;
  $carry_0_lcssa$0 = 0;
 } else {
  $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
  $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
  $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
  $137$1 = tempRet0;
  $q_sroa_1_1198 = $q_sroa_1_1_ph;
  $q_sroa_0_1199 = $q_sroa_0_1_ph;
  $r_sroa_1_1200 = $r_sroa_1_1_ph;
  $r_sroa_0_1201 = $r_sroa_0_1_ph;
  $sr_1202 = $sr_1_ph;
  $carry_0203 = 0;
  while (1) {
   $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
   $149 = $carry_0203 | $q_sroa_0_1199 << 1;
   $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
   $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
   _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0;
   $150$1 = tempRet0;
   $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
   $152 = $151$0 & 1;
   $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0;
   $r_sroa_0_0_extract_trunc = $154$0;
   $r_sroa_1_4_extract_trunc = tempRet0;
   $155 = $sr_1202 - 1 | 0;
   if (($155 | 0) == 0) {
    break;
   } else {
    $q_sroa_1_1198 = $147;
    $q_sroa_0_1199 = $149;
    $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
    $sr_1202 = $155;
    $carry_0203 = $152;
   }
  }
  $q_sroa_1_1_lcssa = $147;
  $q_sroa_0_1_lcssa = $149;
  $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
  $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
  $carry_0_lcssa$1 = 0;
  $carry_0_lcssa$0 = $152;
 }
 $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
 $q_sroa_0_0_insert_ext75$1 = 0;
 $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
 if (($rem | 0) != 0) {
  SAFE_HEAP_STORE($rem | 0, 0 | $r_sroa_0_1_lcssa | 0, 4);
  SAFE_HEAP_STORE($rem + 4 | 0, $r_sroa_1_1_lcssa | 0 | 0, 4);
 }
 $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
 $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
 return (tempRet0 = $_0$1, $_0$0) | 0;
}

function __ZNSt3__26vectorIN5Eigen5ArrayIjLi3ELi1ELi0ELi3ELi1EEENS_9allocatorIS3_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(416 | 0);
 $15 = sp;
 $20 = sp + 404 | 0;
 $31 = sp + 292 | 0;
 $37 = sp + 268 | 0;
 $49 = sp + 220 | 0;
 $102 = $0;
 $103 = $1;
 $104 = $102;
 $101 = $104;
 $105 = $101;
 $100 = $105;
 $106 = $100;
 $107 = SAFE_HEAP_LOAD($106 | 0, 4, 0) | 0 | 0;
 $99 = $107;
 $108 = $99;
 $78 = $105;
 $109 = $78;
 $110 = SAFE_HEAP_LOAD($109 | 0, 4, 0) | 0 | 0;
 $77 = $110;
 $111 = $77;
 $83 = $105;
 $112 = $83;
 $82 = $112;
 $113 = $82;
 $81 = $113;
 $114 = $81;
 $115 = $114 + 8 | 0;
 $80 = $115;
 $116 = $80;
 $79 = $116;
 $117 = $79;
 $118 = SAFE_HEAP_LOAD($117 | 0, 4, 0) | 0 | 0;
 $119 = SAFE_HEAP_LOAD($113 | 0, 4, 0) | 0 | 0;
 $120 = $118;
 $121 = $119;
 $122 = $120 - $121 | 0;
 $123 = ($122 | 0) / 12 & -1;
 $124 = $111 + ($123 * 12 | 0) | 0;
 $85 = $105;
 $125 = $85;
 $126 = SAFE_HEAP_LOAD($125 | 0, 4, 0) | 0 | 0;
 $84 = $126;
 $127 = $84;
 $86 = $105;
 $128 = $86;
 $129 = $128 + 4 | 0;
 $130 = SAFE_HEAP_LOAD($129 | 0, 4, 0) | 0 | 0;
 $131 = SAFE_HEAP_LOAD($128 | 0, 4, 0) | 0 | 0;
 $132 = $130;
 $133 = $131;
 $134 = $132 - $133 | 0;
 $135 = ($134 | 0) / 12 & -1;
 $136 = $127 + ($135 * 12 | 0) | 0;
 $88 = $105;
 $137 = $88;
 $138 = SAFE_HEAP_LOAD($137 | 0, 4, 0) | 0 | 0;
 $87 = $138;
 $139 = $87;
 $93 = $105;
 $140 = $93;
 $92 = $140;
 $141 = $92;
 $91 = $141;
 $142 = $91;
 $143 = $142 + 8 | 0;
 $90 = $143;
 $144 = $90;
 $89 = $144;
 $145 = $89;
 $146 = SAFE_HEAP_LOAD($145 | 0, 4, 0) | 0 | 0;
 $147 = SAFE_HEAP_LOAD($141 | 0, 4, 0) | 0 | 0;
 $148 = $146;
 $149 = $147;
 $150 = $148 - $149 | 0;
 $151 = ($150 | 0) / 12 & -1;
 $152 = $139 + ($151 * 12 | 0) | 0;
 $94 = $105;
 $95 = $108;
 $96 = $124;
 $97 = $136;
 $98 = $152;
 $4 = $104;
 $153 = $4;
 $154 = $153 + 8 | 0;
 $3 = $154;
 $155 = $3;
 $2 = $155;
 $156 = $2;
 $157 = SAFE_HEAP_LOAD($104 | 0, 4, 0) | 0 | 0;
 $158 = $104 + 4 | 0;
 $159 = SAFE_HEAP_LOAD($158 | 0, 4, 0) | 0 | 0;
 $160 = $103;
 $161 = $160 + 4 | 0;
 $22 = $156;
 $23 = $157;
 $24 = $159;
 $25 = $161;
 while (1) {
  $162 = $24;
  $163 = $23;
  $164 = ($162 | 0) != ($163 | 0);
  if (!$164) {
   break;
  }
  $165 = $22;
  $166 = $25;
  $167 = SAFE_HEAP_LOAD($166 | 0, 4, 0) | 0 | 0;
  $168 = $167 + -12 | 0;
  $21 = $168;
  $169 = $21;
  $170 = $24;
  $171 = $170 + -12 | 0;
  $24 = $171;
  $6 = $171;
  $172 = $6;
  $5 = $172;
  $173 = $5;
  $17 = $165;
  $18 = $169;
  $19 = $173;
  $174 = $17;
  $175 = $18;
  $176 = $19;
  $16 = $176;
  $177 = $16;
  {}
  SAFE_HEAP_STORE($15 >> 0 | 0, SAFE_HEAP_LOAD($20 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
  $12 = $174;
  $13 = $175;
  $14 = $177;
  $178 = $12;
  $179 = $13;
  $180 = $14;
  $11 = $180;
  $181 = $11;
  $8 = $178;
  $9 = $179;
  $10 = $181;
  $182 = $9;
  $183 = $10;
  $7 = $183;
  $184 = $7;
  __ZN5Eigen5ArrayIjLi3ELi1ELi0ELi3ELi1EEC2EOS1_($182, $184);
  $185 = $25;
  $186 = SAFE_HEAP_LOAD($185 | 0, 4, 0) | 0 | 0;
  $187 = $186 + -12 | 0;
  SAFE_HEAP_STORE($185 | 0, $187 | 0, 4);
 }
 $188 = $103;
 $189 = $188 + 4 | 0;
 $29 = $104;
 $30 = $189;
 $190 = $29;
 $28 = $190;
 $191 = $28;
 $192 = SAFE_HEAP_LOAD($191 | 0, 4, 0) | 0 | 0;
 SAFE_HEAP_STORE($31 | 0, $192 | 0, 4);
 $193 = $30;
 $26 = $193;
 $194 = $26;
 $195 = SAFE_HEAP_LOAD($194 | 0, 4, 0) | 0 | 0;
 $196 = $29;
 SAFE_HEAP_STORE($196 | 0, $195 | 0, 4);
 $27 = $31;
 $197 = $27;
 $198 = SAFE_HEAP_LOAD($197 | 0, 4, 0) | 0 | 0;
 $199 = $30;
 SAFE_HEAP_STORE($199 | 0, $198 | 0, 4);
 $200 = $104 + 4 | 0;
 $201 = $103;
 $202 = $201 + 8 | 0;
 $35 = $200;
 $36 = $202;
 $203 = $35;
 $34 = $203;
 $204 = $34;
 $205 = SAFE_HEAP_LOAD($204 | 0, 4, 0) | 0 | 0;
 SAFE_HEAP_STORE($37 | 0, $205 | 0, 4);
 $206 = $36;
 $32 = $206;
 $207 = $32;
 $208 = SAFE_HEAP_LOAD($207 | 0, 4, 0) | 0 | 0;
 $209 = $35;
 SAFE_HEAP_STORE($209 | 0, $208 | 0, 4);
 $33 = $37;
 $210 = $33;
 $211 = SAFE_HEAP_LOAD($210 | 0, 4, 0) | 0 | 0;
 $212 = $36;
 SAFE_HEAP_STORE($212 | 0, $211 | 0, 4);
 $40 = $104;
 $213 = $40;
 $214 = $213 + 8 | 0;
 $39 = $214;
 $215 = $39;
 $38 = $215;
 $216 = $38;
 $217 = $103;
 $43 = $217;
 $218 = $43;
 $219 = $218 + 12 | 0;
 $42 = $219;
 $220 = $42;
 $41 = $220;
 $221 = $41;
 $47 = $216;
 $48 = $221;
 $222 = $47;
 $46 = $222;
 $223 = $46;
 $224 = SAFE_HEAP_LOAD($223 | 0, 4, 0) | 0 | 0;
 SAFE_HEAP_STORE($49 | 0, $224 | 0, 4);
 $225 = $48;
 $44 = $225;
 $226 = $44;
 $227 = SAFE_HEAP_LOAD($226 | 0, 4, 0) | 0 | 0;
 $228 = $47;
 SAFE_HEAP_STORE($228 | 0, $227 | 0, 4);
 $45 = $49;
 $229 = $45;
 $230 = SAFE_HEAP_LOAD($229 | 0, 4, 0) | 0 | 0;
 $231 = $48;
 SAFE_HEAP_STORE($231 | 0, $230 | 0, 4);
 $232 = $103;
 $233 = $232 + 4 | 0;
 $234 = SAFE_HEAP_LOAD($233 | 0, 4, 0) | 0 | 0;
 $235 = $103;
 SAFE_HEAP_STORE($235 | 0, $234 | 0, 4);
 $50 = $104;
 $236 = $50;
 $237 = $236 + 4 | 0;
 $238 = SAFE_HEAP_LOAD($237 | 0, 4, 0) | 0 | 0;
 $239 = SAFE_HEAP_LOAD($236 | 0, 4, 0) | 0 | 0;
 $240 = $238;
 $241 = $239;
 $242 = $240 - $241 | 0;
 $243 = ($242 | 0) / 12 & -1;
 $74 = $104;
 $75 = $243;
 $244 = $74;
 $73 = $244;
 $245 = $73;
 $246 = SAFE_HEAP_LOAD($245 | 0, 4, 0) | 0 | 0;
 $72 = $246;
 $247 = $72;
 $52 = $244;
 $248 = $52;
 $249 = SAFE_HEAP_LOAD($248 | 0, 4, 0) | 0 | 0;
 $51 = $249;
 $250 = $51;
 $57 = $244;
 $251 = $57;
 $56 = $251;
 $252 = $56;
 $55 = $252;
 $253 = $55;
 $254 = $253 + 8 | 0;
 $54 = $254;
 $255 = $54;
 $53 = $255;
 $256 = $53;
 $257 = SAFE_HEAP_LOAD($256 | 0, 4, 0) | 0 | 0;
 $258 = SAFE_HEAP_LOAD($252 | 0, 4, 0) | 0 | 0;
 $259 = $257;
 $260 = $258;
 $261 = $259 - $260 | 0;
 $262 = ($261 | 0) / 12 & -1;
 $263 = $250 + ($262 * 12 | 0) | 0;
 $59 = $244;
 $264 = $59;
 $265 = SAFE_HEAP_LOAD($264 | 0, 4, 0) | 0 | 0;
 $58 = $265;
 $266 = $58;
 $64 = $244;
 $267 = $64;
 $63 = $267;
 $268 = $63;
 $62 = $268;
 $269 = $62;
 $270 = $269 + 8 | 0;
 $61 = $270;
 $271 = $61;
 $60 = $271;
 $272 = $60;
 $273 = SAFE_HEAP_LOAD($272 | 0, 4, 0) | 0 | 0;
 $274 = SAFE_HEAP_LOAD($268 | 0, 4, 0) | 0 | 0;
 $275 = $273;
 $276 = $274;
 $277 = $275 - $276 | 0;
 $278 = ($277 | 0) / 12 & -1;
 $279 = $266 + ($278 * 12 | 0) | 0;
 $66 = $244;
 $280 = $66;
 $281 = SAFE_HEAP_LOAD($280 | 0, 4, 0) | 0 | 0;
 $65 = $281;
 $282 = $65;
 $283 = $75;
 $284 = $282 + ($283 * 12 | 0) | 0;
 $67 = $244;
 $68 = $247;
 $69 = $263;
 $70 = $279;
 $71 = $284;
 $76 = $104;
 STACKTOP = sp;
 return;
}

function __ZNSt3__26vectorIN5Eigen5ArrayIfLi3ELi1ELi0ELi3ELi1EEENS_9allocatorIS3_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(416 | 0);
 $15 = sp;
 $20 = sp + 404 | 0;
 $31 = sp + 292 | 0;
 $37 = sp + 268 | 0;
 $49 = sp + 220 | 0;
 $102 = $0;
 $103 = $1;
 $104 = $102;
 $101 = $104;
 $105 = $101;
 $100 = $105;
 $106 = $100;
 $107 = SAFE_HEAP_LOAD($106 | 0, 4, 0) | 0 | 0;
 $99 = $107;
 $108 = $99;
 $78 = $105;
 $109 = $78;
 $110 = SAFE_HEAP_LOAD($109 | 0, 4, 0) | 0 | 0;
 $77 = $110;
 $111 = $77;
 $83 = $105;
 $112 = $83;
 $82 = $112;
 $113 = $82;
 $81 = $113;
 $114 = $81;
 $115 = $114 + 8 | 0;
 $80 = $115;
 $116 = $80;
 $79 = $116;
 $117 = $79;
 $118 = SAFE_HEAP_LOAD($117 | 0, 4, 0) | 0 | 0;
 $119 = SAFE_HEAP_LOAD($113 | 0, 4, 0) | 0 | 0;
 $120 = $118;
 $121 = $119;
 $122 = $120 - $121 | 0;
 $123 = ($122 | 0) / 12 & -1;
 $124 = $111 + ($123 * 12 | 0) | 0;
 $85 = $105;
 $125 = $85;
 $126 = SAFE_HEAP_LOAD($125 | 0, 4, 0) | 0 | 0;
 $84 = $126;
 $127 = $84;
 $86 = $105;
 $128 = $86;
 $129 = $128 + 4 | 0;
 $130 = SAFE_HEAP_LOAD($129 | 0, 4, 0) | 0 | 0;
 $131 = SAFE_HEAP_LOAD($128 | 0, 4, 0) | 0 | 0;
 $132 = $130;
 $133 = $131;
 $134 = $132 - $133 | 0;
 $135 = ($134 | 0) / 12 & -1;
 $136 = $127 + ($135 * 12 | 0) | 0;
 $88 = $105;
 $137 = $88;
 $138 = SAFE_HEAP_LOAD($137 | 0, 4, 0) | 0 | 0;
 $87 = $138;
 $139 = $87;
 $93 = $105;
 $140 = $93;
 $92 = $140;
 $141 = $92;
 $91 = $141;
 $142 = $91;
 $143 = $142 + 8 | 0;
 $90 = $143;
 $144 = $90;
 $89 = $144;
 $145 = $89;
 $146 = SAFE_HEAP_LOAD($145 | 0, 4, 0) | 0 | 0;
 $147 = SAFE_HEAP_LOAD($141 | 0, 4, 0) | 0 | 0;
 $148 = $146;
 $149 = $147;
 $150 = $148 - $149 | 0;
 $151 = ($150 | 0) / 12 & -1;
 $152 = $139 + ($151 * 12 | 0) | 0;
 $94 = $105;
 $95 = $108;
 $96 = $124;
 $97 = $136;
 $98 = $152;
 $4 = $104;
 $153 = $4;
 $154 = $153 + 8 | 0;
 $3 = $154;
 $155 = $3;
 $2 = $155;
 $156 = $2;
 $157 = SAFE_HEAP_LOAD($104 | 0, 4, 0) | 0 | 0;
 $158 = $104 + 4 | 0;
 $159 = SAFE_HEAP_LOAD($158 | 0, 4, 0) | 0 | 0;
 $160 = $103;
 $161 = $160 + 4 | 0;
 $22 = $156;
 $23 = $157;
 $24 = $159;
 $25 = $161;
 while (1) {
  $162 = $24;
  $163 = $23;
  $164 = ($162 | 0) != ($163 | 0);
  if (!$164) {
   break;
  }
  $165 = $22;
  $166 = $25;
  $167 = SAFE_HEAP_LOAD($166 | 0, 4, 0) | 0 | 0;
  $168 = $167 + -12 | 0;
  $21 = $168;
  $169 = $21;
  $170 = $24;
  $171 = $170 + -12 | 0;
  $24 = $171;
  $6 = $171;
  $172 = $6;
  $5 = $172;
  $173 = $5;
  $17 = $165;
  $18 = $169;
  $19 = $173;
  $174 = $17;
  $175 = $18;
  $176 = $19;
  $16 = $176;
  $177 = $16;
  {}
  SAFE_HEAP_STORE($15 >> 0 | 0, SAFE_HEAP_LOAD($20 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
  $12 = $174;
  $13 = $175;
  $14 = $177;
  $178 = $12;
  $179 = $13;
  $180 = $14;
  $11 = $180;
  $181 = $11;
  $8 = $178;
  $9 = $179;
  $10 = $181;
  $182 = $9;
  $183 = $10;
  $7 = $183;
  $184 = $7;
  __ZN5Eigen5ArrayIfLi3ELi1ELi0ELi3ELi1EEC2EOS1_($182, $184);
  $185 = $25;
  $186 = SAFE_HEAP_LOAD($185 | 0, 4, 0) | 0 | 0;
  $187 = $186 + -12 | 0;
  SAFE_HEAP_STORE($185 | 0, $187 | 0, 4);
 }
 $188 = $103;
 $189 = $188 + 4 | 0;
 $29 = $104;
 $30 = $189;
 $190 = $29;
 $28 = $190;
 $191 = $28;
 $192 = SAFE_HEAP_LOAD($191 | 0, 4, 0) | 0 | 0;
 SAFE_HEAP_STORE($31 | 0, $192 | 0, 4);
 $193 = $30;
 $26 = $193;
 $194 = $26;
 $195 = SAFE_HEAP_LOAD($194 | 0, 4, 0) | 0 | 0;
 $196 = $29;
 SAFE_HEAP_STORE($196 | 0, $195 | 0, 4);
 $27 = $31;
 $197 = $27;
 $198 = SAFE_HEAP_LOAD($197 | 0, 4, 0) | 0 | 0;
 $199 = $30;
 SAFE_HEAP_STORE($199 | 0, $198 | 0, 4);
 $200 = $104 + 4 | 0;
 $201 = $103;
 $202 = $201 + 8 | 0;
 $35 = $200;
 $36 = $202;
 $203 = $35;
 $34 = $203;
 $204 = $34;
 $205 = SAFE_HEAP_LOAD($204 | 0, 4, 0) | 0 | 0;
 SAFE_HEAP_STORE($37 | 0, $205 | 0, 4);
 $206 = $36;
 $32 = $206;
 $207 = $32;
 $208 = SAFE_HEAP_LOAD($207 | 0, 4, 0) | 0 | 0;
 $209 = $35;
 SAFE_HEAP_STORE($209 | 0, $208 | 0, 4);
 $33 = $37;
 $210 = $33;
 $211 = SAFE_HEAP_LOAD($210 | 0, 4, 0) | 0 | 0;
 $212 = $36;
 SAFE_HEAP_STORE($212 | 0, $211 | 0, 4);
 $40 = $104;
 $213 = $40;
 $214 = $213 + 8 | 0;
 $39 = $214;
 $215 = $39;
 $38 = $215;
 $216 = $38;
 $217 = $103;
 $43 = $217;
 $218 = $43;
 $219 = $218 + 12 | 0;
 $42 = $219;
 $220 = $42;
 $41 = $220;
 $221 = $41;
 $47 = $216;
 $48 = $221;
 $222 = $47;
 $46 = $222;
 $223 = $46;
 $224 = SAFE_HEAP_LOAD($223 | 0, 4, 0) | 0 | 0;
 SAFE_HEAP_STORE($49 | 0, $224 | 0, 4);
 $225 = $48;
 $44 = $225;
 $226 = $44;
 $227 = SAFE_HEAP_LOAD($226 | 0, 4, 0) | 0 | 0;
 $228 = $47;
 SAFE_HEAP_STORE($228 | 0, $227 | 0, 4);
 $45 = $49;
 $229 = $45;
 $230 = SAFE_HEAP_LOAD($229 | 0, 4, 0) | 0 | 0;
 $231 = $48;
 SAFE_HEAP_STORE($231 | 0, $230 | 0, 4);
 $232 = $103;
 $233 = $232 + 4 | 0;
 $234 = SAFE_HEAP_LOAD($233 | 0, 4, 0) | 0 | 0;
 $235 = $103;
 SAFE_HEAP_STORE($235 | 0, $234 | 0, 4);
 $50 = $104;
 $236 = $50;
 $237 = $236 + 4 | 0;
 $238 = SAFE_HEAP_LOAD($237 | 0, 4, 0) | 0 | 0;
 $239 = SAFE_HEAP_LOAD($236 | 0, 4, 0) | 0 | 0;
 $240 = $238;
 $241 = $239;
 $242 = $240 - $241 | 0;
 $243 = ($242 | 0) / 12 & -1;
 $74 = $104;
 $75 = $243;
 $244 = $74;
 $73 = $244;
 $245 = $73;
 $246 = SAFE_HEAP_LOAD($245 | 0, 4, 0) | 0 | 0;
 $72 = $246;
 $247 = $72;
 $52 = $244;
 $248 = $52;
 $249 = SAFE_HEAP_LOAD($248 | 0, 4, 0) | 0 | 0;
 $51 = $249;
 $250 = $51;
 $57 = $244;
 $251 = $57;
 $56 = $251;
 $252 = $56;
 $55 = $252;
 $253 = $55;
 $254 = $253 + 8 | 0;
 $54 = $254;
 $255 = $54;
 $53 = $255;
 $256 = $53;
 $257 = SAFE_HEAP_LOAD($256 | 0, 4, 0) | 0 | 0;
 $258 = SAFE_HEAP_LOAD($252 | 0, 4, 0) | 0 | 0;
 $259 = $257;
 $260 = $258;
 $261 = $259 - $260 | 0;
 $262 = ($261 | 0) / 12 & -1;
 $263 = $250 + ($262 * 12 | 0) | 0;
 $59 = $244;
 $264 = $59;
 $265 = SAFE_HEAP_LOAD($264 | 0, 4, 0) | 0 | 0;
 $58 = $265;
 $266 = $58;
 $64 = $244;
 $267 = $64;
 $63 = $267;
 $268 = $63;
 $62 = $268;
 $269 = $62;
 $270 = $269 + 8 | 0;
 $61 = $270;
 $271 = $61;
 $60 = $271;
 $272 = $60;
 $273 = SAFE_HEAP_LOAD($272 | 0, 4, 0) | 0 | 0;
 $274 = SAFE_HEAP_LOAD($268 | 0, 4, 0) | 0 | 0;
 $275 = $273;
 $276 = $274;
 $277 = $275 - $276 | 0;
 $278 = ($277 | 0) / 12 & -1;
 $279 = $266 + ($278 * 12 | 0) | 0;
 $66 = $244;
 $280 = $66;
 $281 = SAFE_HEAP_LOAD($280 | 0, 4, 0) | 0 | 0;
 $65 = $281;
 $282 = $65;
 $283 = $75;
 $284 = $282 + ($283 * 12 | 0) | 0;
 $67 = $244;
 $68 = $247;
 $69 = $263;
 $70 = $279;
 $71 = $284;
 $76 = $104;
 STACKTOP = sp;
 return;
}

function __ZNSt3__26vectorIN5Eigen5ArrayIjLi3ELi1ELi0ELi3ELi1EEENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJjjjEEEvDpOT_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(272 | 0);
 $24 = sp + 8 | 0;
 $31 = sp + 265 | 0;
 $40 = sp;
 $43 = sp + 264 | 0;
 $51 = sp + 88 | 0;
 $54 = sp + 76 | 0;
 $64 = sp + 20 | 0;
 $59 = $0;
 $60 = $1;
 $61 = $2;
 $62 = $3;
 $67 = $59;
 $58 = $67;
 $68 = $58;
 $69 = $68 + 8 | 0;
 $57 = $69;
 $70 = $57;
 $56 = $70;
 $71 = $56;
 $63 = $71;
 $55 = $67;
 $72 = $55;
 $73 = $72 + 4 | 0;
 $74 = SAFE_HEAP_LOAD($73 | 0, 4, 0) | 0 | 0;
 $75 = SAFE_HEAP_LOAD($72 | 0, 4, 0) | 0 | 0;
 $76 = $74;
 $77 = $75;
 $78 = $76 - $77 | 0;
 $79 = ($78 | 0) / 12 & -1;
 $80 = $79 + 1 | 0;
 $50 = $67;
 SAFE_HEAP_STORE($51 | 0, $80 | 0, 4);
 $81 = $50;
 $82 = __ZNKSt3__26vectorIN5Eigen5ArrayIjLi3ELi1ELi0ELi3ELi1EEENS_9allocatorIS3_EEE8max_sizeEv($81) | 0;
 $52 = $82;
 $83 = SAFE_HEAP_LOAD($51 | 0, 4, 0) | 0 | 0;
 $84 = $52;
 $85 = $83 >>> 0 > $84 >>> 0;
 if ($85) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($81);
 }
 $48 = $81;
 $86 = $48;
 $47 = $86;
 $87 = $47;
 $46 = $87;
 $88 = $46;
 $89 = $88 + 8 | 0;
 $45 = $89;
 $90 = $45;
 $44 = $90;
 $91 = $44;
 $92 = SAFE_HEAP_LOAD($91 | 0, 4, 0) | 0 | 0;
 $93 = SAFE_HEAP_LOAD($87 | 0, 4, 0) | 0 | 0;
 $94 = $92;
 $95 = $93;
 $96 = $94 - $95 | 0;
 $97 = ($96 | 0) / 12 & -1;
 $53 = $97;
 $98 = $53;
 $99 = $52;
 $100 = ($99 >>> 0) / 2 & -1;
 $101 = $98 >>> 0 >= $100 >>> 0;
 if ($101) {
  $102 = $52;
  $49 = $102;
 } else {
  $103 = $53;
  $104 = $103 << 1;
  SAFE_HEAP_STORE($54 | 0, $104 | 0, 4);
  $41 = $54;
  $42 = $51;
  $105 = $41;
  $106 = $42;
  {}
  SAFE_HEAP_STORE($40 >> 0 | 0, SAFE_HEAP_LOAD($43 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
  $38 = $105;
  $39 = $106;
  $107 = $38;
  $108 = $39;
  $35 = $40;
  $36 = $107;
  $37 = $108;
  $109 = $36;
  $110 = SAFE_HEAP_LOAD($109 | 0, 4, 0) | 0 | 0;
  $111 = $37;
  $112 = SAFE_HEAP_LOAD($111 | 0, 4, 0) | 0 | 0;
  $113 = $110 >>> 0 < $112 >>> 0;
  $114 = $39;
  $115 = $38;
  $116 = $113 ? $114 : $115;
  $117 = SAFE_HEAP_LOAD($116 | 0, 4, 0) | 0 | 0;
  $49 = $117;
 }
 $118 = $49;
 $34 = $67;
 $119 = $34;
 $120 = $119 + 4 | 0;
 $121 = SAFE_HEAP_LOAD($120 | 0, 4, 0) | 0 | 0;
 $122 = SAFE_HEAP_LOAD($119 | 0, 4, 0) | 0 | 0;
 $123 = $121;
 $124 = $122;
 $125 = $123 - $124 | 0;
 $126 = ($125 | 0) / 12 & -1;
 $127 = $63;
 __ZNSt3__214__split_bufferIN5Eigen5ArrayIjLi3ELi1ELi0ELi3ELi1EEERNS_9allocatorIS3_EEEC2EjjS6_($64, $118, $126, $127);
 $128 = $63;
 $129 = $64 + 8 | 0;
 $130 = SAFE_HEAP_LOAD($129 | 0, 4, 0) | 0 | 0;
 $33 = $130;
 $131 = $33;
 $132 = $60;
 $32 = $132;
 $133 = $32;
 $134 = $61;
 $5 = $134;
 $135 = $5;
 $136 = $62;
 $4 = $136;
 $137 = $4;
 $26 = $128;
 $27 = $131;
 $28 = $133;
 $29 = $135;
 $30 = $137;
 $138 = $26;
 $139 = $27;
 $140 = $28;
 $25 = $140;
 $141 = $25;
 $142 = $29;
 $7 = $142;
 $143 = $7;
 $144 = $30;
 $6 = $144;
 $145 = $6;
 {}
 SAFE_HEAP_STORE($24 >> 0 | 0, SAFE_HEAP_LOAD($31 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
 $19 = $138;
 $20 = $139;
 $21 = $141;
 $22 = $143;
 $23 = $145;
 $146 = $19;
 $147 = $20;
 $148 = $21;
 $18 = $148;
 $149 = $18;
 $150 = $22;
 $9 = $150;
 $151 = $9;
 $152 = $23;
 $8 = $152;
 $153 = $8;
 $13 = $146;
 $14 = $147;
 $15 = $149;
 $16 = $151;
 $17 = $153;
 $154 = $14;
 $155 = $15;
 $12 = $155;
 $156 = $12;
 $157 = $16;
 $11 = $157;
 $158 = $11;
 $159 = $17;
 $10 = $159;
 $160 = $10;
 __THREW__ = 0;
 invoke_viiii(28, $154 | 0, $156 | 0, $158 | 0, $160 | 0);
 $161 = __THREW__;
 __THREW__ = 0;
 $162 = $161 & 1;
 if ($162) {
  $168 = ___cxa_find_matching_catch_2() | 0;
  $169 = tempRet0;
  $65 = $168;
  $66 = $169;
  __ZNSt3__214__split_bufferIN5Eigen5ArrayIjLi3ELi1ELi0ELi3ELi1EEERNS_9allocatorIS3_EEED2Ev($64);
  $170 = $65;
  $171 = $66;
  ___resumeException($170 | 0);
 }
 $163 = $64 + 8 | 0;
 $164 = SAFE_HEAP_LOAD($163 | 0, 4, 0) | 0 | 0;
 $165 = $164 + 12 | 0;
 SAFE_HEAP_STORE($163 | 0, $165 | 0, 4);
 __THREW__ = 0;
 invoke_vii(53, $67 | 0, $64 | 0);
 $166 = __THREW__;
 __THREW__ = 0;
 $167 = $166 & 1;
 if ($167) {
  $168 = ___cxa_find_matching_catch_2() | 0;
  $169 = tempRet0;
  $65 = $168;
  $66 = $169;
  __ZNSt3__214__split_bufferIN5Eigen5ArrayIjLi3ELi1ELi0ELi3ELi1EEERNS_9allocatorIS3_EEED2Ev($64);
  $170 = $65;
  $171 = $66;
  ___resumeException($170 | 0);
 } else {
  __ZNSt3__214__split_bufferIN5Eigen5ArrayIjLi3ELi1ELi0ELi3ELi1EEERNS_9allocatorIS3_EEED2Ev($64);
  STACKTOP = sp;
  return;
 }
}

function __ZNSt3__26vectorIN5Eigen5ArrayIfLi3ELi1ELi0ELi3ELi1EEENS_9allocatorIS3_EEE21__push_back_slow_pathIRKS3_EEvOT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(208 | 0);
 $10 = sp + 8 | 0;
 $15 = sp + 201 | 0;
 $24 = sp;
 $27 = sp + 200 | 0;
 $35 = sp + 80 | 0;
 $38 = sp + 68 | 0;
 $46 = sp + 20 | 0;
 $43 = $0;
 $44 = $1;
 $49 = $43;
 $42 = $49;
 $50 = $42;
 $51 = $50 + 8 | 0;
 $41 = $51;
 $52 = $41;
 $40 = $52;
 $53 = $40;
 $45 = $53;
 $39 = $49;
 $54 = $39;
 $55 = $54 + 4 | 0;
 $56 = SAFE_HEAP_LOAD($55 | 0, 4, 0) | 0 | 0;
 $57 = SAFE_HEAP_LOAD($54 | 0, 4, 0) | 0 | 0;
 $58 = $56;
 $59 = $57;
 $60 = $58 - $59 | 0;
 $61 = ($60 | 0) / 12 & -1;
 $62 = $61 + 1 | 0;
 $34 = $49;
 SAFE_HEAP_STORE($35 | 0, $62 | 0, 4);
 $63 = $34;
 $64 = __ZNKSt3__26vectorIN5Eigen5ArrayIfLi3ELi1ELi0ELi3ELi1EEENS_9allocatorIS3_EEE8max_sizeEv($63) | 0;
 $36 = $64;
 $65 = SAFE_HEAP_LOAD($35 | 0, 4, 0) | 0 | 0;
 $66 = $36;
 $67 = $65 >>> 0 > $66 >>> 0;
 if ($67) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($63);
 }
 $32 = $63;
 $68 = $32;
 $31 = $68;
 $69 = $31;
 $30 = $69;
 $70 = $30;
 $71 = $70 + 8 | 0;
 $29 = $71;
 $72 = $29;
 $28 = $72;
 $73 = $28;
 $74 = SAFE_HEAP_LOAD($73 | 0, 4, 0) | 0 | 0;
 $75 = SAFE_HEAP_LOAD($69 | 0, 4, 0) | 0 | 0;
 $76 = $74;
 $77 = $75;
 $78 = $76 - $77 | 0;
 $79 = ($78 | 0) / 12 & -1;
 $37 = $79;
 $80 = $37;
 $81 = $36;
 $82 = ($81 >>> 0) / 2 & -1;
 $83 = $80 >>> 0 >= $82 >>> 0;
 if ($83) {
  $84 = $36;
  $33 = $84;
 } else {
  $85 = $37;
  $86 = $85 << 1;
  SAFE_HEAP_STORE($38 | 0, $86 | 0, 4);
  $25 = $38;
  $26 = $35;
  $87 = $25;
  $88 = $26;
  {}
  SAFE_HEAP_STORE($24 >> 0 | 0, SAFE_HEAP_LOAD($27 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
  $22 = $87;
  $23 = $88;
  $89 = $22;
  $90 = $23;
  $19 = $24;
  $20 = $89;
  $21 = $90;
  $91 = $20;
  $92 = SAFE_HEAP_LOAD($91 | 0, 4, 0) | 0 | 0;
  $93 = $21;
  $94 = SAFE_HEAP_LOAD($93 | 0, 4, 0) | 0 | 0;
  $95 = $92 >>> 0 < $94 >>> 0;
  $96 = $23;
  $97 = $22;
  $98 = $95 ? $96 : $97;
  $99 = SAFE_HEAP_LOAD($98 | 0, 4, 0) | 0 | 0;
  $33 = $99;
 }
 $100 = $33;
 $18 = $49;
 $101 = $18;
 $102 = $101 + 4 | 0;
 $103 = SAFE_HEAP_LOAD($102 | 0, 4, 0) | 0 | 0;
 $104 = SAFE_HEAP_LOAD($101 | 0, 4, 0) | 0 | 0;
 $105 = $103;
 $106 = $104;
 $107 = $105 - $106 | 0;
 $108 = ($107 | 0) / 12 & -1;
 $109 = $45;
 __ZNSt3__214__split_bufferIN5Eigen5ArrayIfLi3ELi1ELi0ELi3ELi1EEERNS_9allocatorIS3_EEEC2EjjS6_($46, $100, $108, $109);
 $110 = $45;
 $111 = $46 + 8 | 0;
 $112 = SAFE_HEAP_LOAD($111 | 0, 4, 0) | 0 | 0;
 $17 = $112;
 $113 = $17;
 $114 = $44;
 $16 = $114;
 $115 = $16;
 $12 = $110;
 $13 = $113;
 $14 = $115;
 $116 = $12;
 $117 = $13;
 $118 = $14;
 $11 = $118;
 $119 = $11;
 {}
 SAFE_HEAP_STORE($10 >> 0 | 0, SAFE_HEAP_LOAD($15 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
 $7 = $116;
 $8 = $117;
 $9 = $119;
 $120 = $7;
 $121 = $8;
 $122 = $9;
 $6 = $122;
 $123 = $6;
 $3 = $120;
 $4 = $121;
 $5 = $123;
 $124 = $4;
 $125 = $5;
 $2 = $125;
 $126 = $2;
 __THREW__ = 0;
 invoke_vii(35, $124 | 0, $126 | 0);
 $127 = __THREW__;
 __THREW__ = 0;
 $128 = $127 & 1;
 if ($128) {
  $134 = ___cxa_find_matching_catch_2() | 0;
  $135 = tempRet0;
  $47 = $134;
  $48 = $135;
  __ZNSt3__214__split_bufferIN5Eigen5ArrayIfLi3ELi1ELi0ELi3ELi1EEERNS_9allocatorIS3_EEED2Ev($46);
  $136 = $47;
  $137 = $48;
  ___resumeException($136 | 0);
 }
 $129 = $46 + 8 | 0;
 $130 = SAFE_HEAP_LOAD($129 | 0, 4, 0) | 0 | 0;
 $131 = $130 + 12 | 0;
 SAFE_HEAP_STORE($129 | 0, $131 | 0, 4);
 __THREW__ = 0;
 invoke_vii(54, $49 | 0, $46 | 0);
 $132 = __THREW__;
 __THREW__ = 0;
 $133 = $132 & 1;
 if ($133) {
  $134 = ___cxa_find_matching_catch_2() | 0;
  $135 = tempRet0;
  $47 = $134;
  $48 = $135;
  __ZNSt3__214__split_bufferIN5Eigen5ArrayIfLi3ELi1ELi0ELi3ELi1EEERNS_9allocatorIS3_EEED2Ev($46);
  $136 = $47;
  $137 = $48;
  ___resumeException($136 | 0);
 } else {
  __ZNSt3__214__split_bufferIN5Eigen5ArrayIfLi3ELi1ELi0ELi3ELi1EEERNS_9allocatorIS3_EEED2Ev($46);
  STACKTOP = sp;
  return;
 }
}

function __ZNSt3__26vectorIN5Eigen5ArrayIfLi3ELi1ELi0ELi3ELi1EEENS_9allocatorIS3_EEE21__push_back_slow_pathIS3_EEvOT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(208 | 0);
 $10 = sp + 8 | 0;
 $15 = sp + 201 | 0;
 $24 = sp;
 $27 = sp + 200 | 0;
 $35 = sp + 80 | 0;
 $38 = sp + 68 | 0;
 $46 = sp + 20 | 0;
 $43 = $0;
 $44 = $1;
 $49 = $43;
 $42 = $49;
 $50 = $42;
 $51 = $50 + 8 | 0;
 $41 = $51;
 $52 = $41;
 $40 = $52;
 $53 = $40;
 $45 = $53;
 $39 = $49;
 $54 = $39;
 $55 = $54 + 4 | 0;
 $56 = SAFE_HEAP_LOAD($55 | 0, 4, 0) | 0 | 0;
 $57 = SAFE_HEAP_LOAD($54 | 0, 4, 0) | 0 | 0;
 $58 = $56;
 $59 = $57;
 $60 = $58 - $59 | 0;
 $61 = ($60 | 0) / 12 & -1;
 $62 = $61 + 1 | 0;
 $34 = $49;
 SAFE_HEAP_STORE($35 | 0, $62 | 0, 4);
 $63 = $34;
 $64 = __ZNKSt3__26vectorIN5Eigen5ArrayIfLi3ELi1ELi0ELi3ELi1EEENS_9allocatorIS3_EEE8max_sizeEv($63) | 0;
 $36 = $64;
 $65 = SAFE_HEAP_LOAD($35 | 0, 4, 0) | 0 | 0;
 $66 = $36;
 $67 = $65 >>> 0 > $66 >>> 0;
 if ($67) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($63);
 }
 $32 = $63;
 $68 = $32;
 $31 = $68;
 $69 = $31;
 $30 = $69;
 $70 = $30;
 $71 = $70 + 8 | 0;
 $29 = $71;
 $72 = $29;
 $28 = $72;
 $73 = $28;
 $74 = SAFE_HEAP_LOAD($73 | 0, 4, 0) | 0 | 0;
 $75 = SAFE_HEAP_LOAD($69 | 0, 4, 0) | 0 | 0;
 $76 = $74;
 $77 = $75;
 $78 = $76 - $77 | 0;
 $79 = ($78 | 0) / 12 & -1;
 $37 = $79;
 $80 = $37;
 $81 = $36;
 $82 = ($81 >>> 0) / 2 & -1;
 $83 = $80 >>> 0 >= $82 >>> 0;
 if ($83) {
  $84 = $36;
  $33 = $84;
 } else {
  $85 = $37;
  $86 = $85 << 1;
  SAFE_HEAP_STORE($38 | 0, $86 | 0, 4);
  $25 = $38;
  $26 = $35;
  $87 = $25;
  $88 = $26;
  {}
  SAFE_HEAP_STORE($24 >> 0 | 0, SAFE_HEAP_LOAD($27 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
  $22 = $87;
  $23 = $88;
  $89 = $22;
  $90 = $23;
  $19 = $24;
  $20 = $89;
  $21 = $90;
  $91 = $20;
  $92 = SAFE_HEAP_LOAD($91 | 0, 4, 0) | 0 | 0;
  $93 = $21;
  $94 = SAFE_HEAP_LOAD($93 | 0, 4, 0) | 0 | 0;
  $95 = $92 >>> 0 < $94 >>> 0;
  $96 = $23;
  $97 = $22;
  $98 = $95 ? $96 : $97;
  $99 = SAFE_HEAP_LOAD($98 | 0, 4, 0) | 0 | 0;
  $33 = $99;
 }
 $100 = $33;
 $18 = $49;
 $101 = $18;
 $102 = $101 + 4 | 0;
 $103 = SAFE_HEAP_LOAD($102 | 0, 4, 0) | 0 | 0;
 $104 = SAFE_HEAP_LOAD($101 | 0, 4, 0) | 0 | 0;
 $105 = $103;
 $106 = $104;
 $107 = $105 - $106 | 0;
 $108 = ($107 | 0) / 12 & -1;
 $109 = $45;
 __ZNSt3__214__split_bufferIN5Eigen5ArrayIfLi3ELi1ELi0ELi3ELi1EEERNS_9allocatorIS3_EEEC2EjjS6_($46, $100, $108, $109);
 $110 = $45;
 $111 = $46 + 8 | 0;
 $112 = SAFE_HEAP_LOAD($111 | 0, 4, 0) | 0 | 0;
 $17 = $112;
 $113 = $17;
 $114 = $44;
 $16 = $114;
 $115 = $16;
 $12 = $110;
 $13 = $113;
 $14 = $115;
 $116 = $12;
 $117 = $13;
 $118 = $14;
 $11 = $118;
 $119 = $11;
 {}
 SAFE_HEAP_STORE($10 >> 0 | 0, SAFE_HEAP_LOAD($15 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
 $7 = $116;
 $8 = $117;
 $9 = $119;
 $120 = $7;
 $121 = $8;
 $122 = $9;
 $6 = $122;
 $123 = $6;
 $3 = $120;
 $4 = $121;
 $5 = $123;
 $124 = $4;
 $125 = $5;
 $2 = $125;
 $126 = $2;
 __ZN5Eigen5ArrayIfLi3ELi1ELi0ELi3ELi1EEC2EOS1_($124, $126);
 $127 = $46 + 8 | 0;
 $128 = SAFE_HEAP_LOAD($127 | 0, 4, 0) | 0 | 0;
 $129 = $128 + 12 | 0;
 SAFE_HEAP_STORE($127 | 0, $129 | 0, 4);
 __THREW__ = 0;
 invoke_vii(54, $49 | 0, $46 | 0);
 $130 = __THREW__;
 __THREW__ = 0;
 $131 = $130 & 1;
 if ($131) {
  $132 = ___cxa_find_matching_catch_2() | 0;
  $133 = tempRet0;
  $47 = $132;
  $48 = $133;
  __ZNSt3__214__split_bufferIN5Eigen5ArrayIfLi3ELi1ELi0ELi3ELi1EEERNS_9allocatorIS3_EEED2Ev($46);
  $134 = $47;
  $135 = $48;
  ___resumeException($134 | 0);
 } else {
  __ZNSt3__214__split_bufferIN5Eigen5ArrayIfLi3ELi1ELi0ELi3ELi1EEERNS_9allocatorIS3_EEED2Ev($46);
  STACKTOP = sp;
  return;
 }
}

function __ZNSt3__26vectorIN5Eigen5ArrayIjLi3ELi1ELi0ELi3ELi1EEENS_9allocatorIS3_EEE10deallocateEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(240 | 0);
 $45 = sp;
 $48 = sp + 232 | 0;
 $59 = $0;
 $60 = $59;
 $61 = SAFE_HEAP_LOAD($60 | 0, 4, 0) | 0 | 0;
 $62 = ($61 | 0) != (0 | 0);
 if (!$62) {
  STACKTOP = sp;
  return;
 }
 $57 = $60;
 $63 = $57;
 $56 = $63;
 $64 = $56;
 $65 = $64 + 4 | 0;
 $66 = SAFE_HEAP_LOAD($65 | 0, 4, 0) | 0 | 0;
 $67 = SAFE_HEAP_LOAD($64 | 0, 4, 0) | 0 | 0;
 $68 = $66;
 $69 = $67;
 $70 = $68 - $69 | 0;
 $71 = ($70 | 0) / 12 & -1;
 $58 = $71;
 $55 = $63;
 $72 = $55;
 $73 = SAFE_HEAP_LOAD($72 | 0, 4, 0) | 0 | 0;
 $53 = $72;
 $54 = $73;
 $74 = $53;
 while (1) {
  $75 = $54;
  $76 = $74 + 4 | 0;
  $77 = SAFE_HEAP_LOAD($76 | 0, 4, 0) | 0 | 0;
  $78 = ($75 | 0) != ($77 | 0);
  if (!$78) {
   break;
  }
  $52 = $74;
  $79 = $52;
  $80 = $79 + 8 | 0;
  $51 = $80;
  $81 = $51;
  $50 = $81;
  $82 = $50;
  $83 = $74 + 4 | 0;
  $84 = SAFE_HEAP_LOAD($83 | 0, 4, 0) | 0 | 0;
  $85 = $84 + -12 | 0;
  SAFE_HEAP_STORE($83 | 0, $85 | 0, 4);
  $49 = $85;
  $86 = $49;
  $46 = $82;
  $47 = $86;
  $87 = $46;
  $88 = $47;
  {}
  SAFE_HEAP_STORE($45 >> 0 | 0, SAFE_HEAP_LOAD($48 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
  $43 = $87;
  $44 = $88;
  $89 = $43;
  $90 = $44;
  $41 = $89;
  $42 = $90;
 }
 $91 = $58;
 $38 = $63;
 $39 = $91;
 $92 = $38;
 $37 = $92;
 $93 = $37;
 $94 = SAFE_HEAP_LOAD($93 | 0, 4, 0) | 0 | 0;
 $36 = $94;
 $95 = $36;
 $20 = $92;
 $96 = $20;
 $97 = SAFE_HEAP_LOAD($96 | 0, 4, 0) | 0 | 0;
 $19 = $97;
 $98 = $19;
 $25 = $92;
 $99 = $25;
 $24 = $99;
 $100 = $24;
 $23 = $100;
 $101 = $23;
 $102 = $101 + 8 | 0;
 $22 = $102;
 $103 = $22;
 $21 = $103;
 $104 = $21;
 $105 = SAFE_HEAP_LOAD($104 | 0, 4, 0) | 0 | 0;
 $106 = SAFE_HEAP_LOAD($100 | 0, 4, 0) | 0 | 0;
 $107 = $105;
 $108 = $106;
 $109 = $107 - $108 | 0;
 $110 = ($109 | 0) / 12 & -1;
 $111 = $98 + ($110 * 12 | 0) | 0;
 $27 = $92;
 $112 = $27;
 $113 = SAFE_HEAP_LOAD($112 | 0, 4, 0) | 0 | 0;
 $26 = $113;
 $114 = $26;
 $115 = $39;
 $116 = $114 + ($115 * 12 | 0) | 0;
 $29 = $92;
 $117 = $29;
 $118 = SAFE_HEAP_LOAD($117 | 0, 4, 0) | 0 | 0;
 $28 = $118;
 $119 = $28;
 $30 = $92;
 $120 = $30;
 $121 = $120 + 4 | 0;
 $122 = SAFE_HEAP_LOAD($121 | 0, 4, 0) | 0 | 0;
 $123 = SAFE_HEAP_LOAD($120 | 0, 4, 0) | 0 | 0;
 $124 = $122;
 $125 = $123;
 $126 = $124 - $125 | 0;
 $127 = ($126 | 0) / 12 & -1;
 $128 = $119 + ($127 * 12 | 0) | 0;
 $31 = $92;
 $32 = $95;
 $33 = $111;
 $34 = $116;
 $35 = $128;
 $40 = $63;
 $8 = $60;
 $129 = $8;
 $130 = $129 + 8 | 0;
 $7 = $130;
 $131 = $7;
 $6 = $131;
 $132 = $6;
 $133 = SAFE_HEAP_LOAD($60 | 0, 4, 0) | 0 | 0;
 $5 = $60;
 $134 = $5;
 $4 = $134;
 $135 = $4;
 $3 = $135;
 $136 = $3;
 $137 = $136 + 8 | 0;
 $2 = $137;
 $138 = $2;
 $1 = $138;
 $139 = $1;
 $140 = SAFE_HEAP_LOAD($139 | 0, 4, 0) | 0 | 0;
 $141 = SAFE_HEAP_LOAD($135 | 0, 4, 0) | 0 | 0;
 $142 = $140;
 $143 = $141;
 $144 = $142 - $143 | 0;
 $145 = ($144 | 0) / 12 & -1;
 $13 = $132;
 $14 = $133;
 $15 = $145;
 $146 = $13;
 $147 = $14;
 $148 = $15;
 $10 = $146;
 $11 = $147;
 $12 = $148;
 $149 = $11;
 $9 = $149;
 $150 = $9;
 __ZdlPv($150);
 $18 = $60;
 $151 = $18;
 $152 = $151 + 8 | 0;
 $17 = $152;
 $153 = $17;
 $16 = $153;
 $154 = $16;
 SAFE_HEAP_STORE($154 | 0, 0 | 0, 4);
 $155 = $60 + 4 | 0;
 SAFE_HEAP_STORE($155 | 0, 0 | 0, 4);
 SAFE_HEAP_STORE($60 | 0, 0 | 0, 4);
 STACKTOP = sp;
 return;
}

function __ZNSt3__26vectorIN5Eigen5ArrayIfLi3ELi1ELi0ELi3ELi1EEENS_9allocatorIS3_EEE10deallocateEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(240 | 0);
 $45 = sp;
 $48 = sp + 232 | 0;
 $59 = $0;
 $60 = $59;
 $61 = SAFE_HEAP_LOAD($60 | 0, 4, 0) | 0 | 0;
 $62 = ($61 | 0) != (0 | 0);
 if (!$62) {
  STACKTOP = sp;
  return;
 }
 $57 = $60;
 $63 = $57;
 $56 = $63;
 $64 = $56;
 $65 = $64 + 4 | 0;
 $66 = SAFE_HEAP_LOAD($65 | 0, 4, 0) | 0 | 0;
 $67 = SAFE_HEAP_LOAD($64 | 0, 4, 0) | 0 | 0;
 $68 = $66;
 $69 = $67;
 $70 = $68 - $69 | 0;
 $71 = ($70 | 0) / 12 & -1;
 $58 = $71;
 $55 = $63;
 $72 = $55;
 $73 = SAFE_HEAP_LOAD($72 | 0, 4, 0) | 0 | 0;
 $53 = $72;
 $54 = $73;
 $74 = $53;
 while (1) {
  $75 = $54;
  $76 = $74 + 4 | 0;
  $77 = SAFE_HEAP_LOAD($76 | 0, 4, 0) | 0 | 0;
  $78 = ($75 | 0) != ($77 | 0);
  if (!$78) {
   break;
  }
  $52 = $74;
  $79 = $52;
  $80 = $79 + 8 | 0;
  $51 = $80;
  $81 = $51;
  $50 = $81;
  $82 = $50;
  $83 = $74 + 4 | 0;
  $84 = SAFE_HEAP_LOAD($83 | 0, 4, 0) | 0 | 0;
  $85 = $84 + -12 | 0;
  SAFE_HEAP_STORE($83 | 0, $85 | 0, 4);
  $49 = $85;
  $86 = $49;
  $46 = $82;
  $47 = $86;
  $87 = $46;
  $88 = $47;
  {}
  SAFE_HEAP_STORE($45 >> 0 | 0, SAFE_HEAP_LOAD($48 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
  $43 = $87;
  $44 = $88;
  $89 = $43;
  $90 = $44;
  $41 = $89;
  $42 = $90;
 }
 $91 = $58;
 $38 = $63;
 $39 = $91;
 $92 = $38;
 $37 = $92;
 $93 = $37;
 $94 = SAFE_HEAP_LOAD($93 | 0, 4, 0) | 0 | 0;
 $36 = $94;
 $95 = $36;
 $20 = $92;
 $96 = $20;
 $97 = SAFE_HEAP_LOAD($96 | 0, 4, 0) | 0 | 0;
 $19 = $97;
 $98 = $19;
 $25 = $92;
 $99 = $25;
 $24 = $99;
 $100 = $24;
 $23 = $100;
 $101 = $23;
 $102 = $101 + 8 | 0;
 $22 = $102;
 $103 = $22;
 $21 = $103;
 $104 = $21;
 $105 = SAFE_HEAP_LOAD($104 | 0, 4, 0) | 0 | 0;
 $106 = SAFE_HEAP_LOAD($100 | 0, 4, 0) | 0 | 0;
 $107 = $105;
 $108 = $106;
 $109 = $107 - $108 | 0;
 $110 = ($109 | 0) / 12 & -1;
 $111 = $98 + ($110 * 12 | 0) | 0;
 $27 = $92;
 $112 = $27;
 $113 = SAFE_HEAP_LOAD($112 | 0, 4, 0) | 0 | 0;
 $26 = $113;
 $114 = $26;
 $115 = $39;
 $116 = $114 + ($115 * 12 | 0) | 0;
 $29 = $92;
 $117 = $29;
 $118 = SAFE_HEAP_LOAD($117 | 0, 4, 0) | 0 | 0;
 $28 = $118;
 $119 = $28;
 $30 = $92;
 $120 = $30;
 $121 = $120 + 4 | 0;
 $122 = SAFE_HEAP_LOAD($121 | 0, 4, 0) | 0 | 0;
 $123 = SAFE_HEAP_LOAD($120 | 0, 4, 0) | 0 | 0;
 $124 = $122;
 $125 = $123;
 $126 = $124 - $125 | 0;
 $127 = ($126 | 0) / 12 & -1;
 $128 = $119 + ($127 * 12 | 0) | 0;
 $31 = $92;
 $32 = $95;
 $33 = $111;
 $34 = $116;
 $35 = $128;
 $40 = $63;
 $8 = $60;
 $129 = $8;
 $130 = $129 + 8 | 0;
 $7 = $130;
 $131 = $7;
 $6 = $131;
 $132 = $6;
 $133 = SAFE_HEAP_LOAD($60 | 0, 4, 0) | 0 | 0;
 $5 = $60;
 $134 = $5;
 $4 = $134;
 $135 = $4;
 $3 = $135;
 $136 = $3;
 $137 = $136 + 8 | 0;
 $2 = $137;
 $138 = $2;
 $1 = $138;
 $139 = $1;
 $140 = SAFE_HEAP_LOAD($139 | 0, 4, 0) | 0 | 0;
 $141 = SAFE_HEAP_LOAD($135 | 0, 4, 0) | 0 | 0;
 $142 = $140;
 $143 = $141;
 $144 = $142 - $143 | 0;
 $145 = ($144 | 0) / 12 & -1;
 $13 = $132;
 $14 = $133;
 $15 = $145;
 $146 = $13;
 $147 = $14;
 $148 = $15;
 $10 = $146;
 $11 = $147;
 $12 = $148;
 $149 = $11;
 $9 = $149;
 $150 = $9;
 __ZdlPv($150);
 $18 = $60;
 $151 = $18;
 $152 = $151 + 8 | 0;
 $17 = $152;
 $153 = $17;
 $16 = $153;
 $154 = $16;
 SAFE_HEAP_STORE($154 | 0, 0 | 0, 4);
 $155 = $60 + 4 | 0;
 SAFE_HEAP_STORE($155 | 0, 0 | 0, 4);
 SAFE_HEAP_STORE($60 | 0, 0 | 0, 4);
 STACKTOP = sp;
 return;
}

function __ZNSt3__26vectorIN5Eigen5ArrayIjLi3ELi1ELi0ELi3ELi1EEENS_9allocatorIS3_EEE8allocateEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(192 | 0);
 $45 = $0;
 $46 = $1;
 $47 = $45;
 $48 = $46;
 $49 = __ZNKSt3__26vectorIN5Eigen5ArrayIjLi3ELi1ELi0ELi3ELi1EEENS_9allocatorIS3_EEE8max_sizeEv($47) | 0;
 $50 = $48 >>> 0 > $49 >>> 0;
 if ($50) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($47);
 }
 $44 = $47;
 $51 = $44;
 $52 = $51 + 8 | 0;
 $43 = $52;
 $53 = $43;
 $42 = $53;
 $54 = $42;
 $55 = $46;
 $12 = $54;
 $13 = $55;
 $56 = $12;
 $57 = $13;
 $9 = $56;
 $10 = $57;
 $11 = 0;
 $58 = $9;
 $59 = $10;
 $8 = $58;
 $60 = $59 >>> 0 > 357913941;
 if (!$60) {
  $71 = $10;
  $72 = $71 * 12 | 0;
  $7 = $72;
  $73 = $7;
  $74 = __Znwj($73) | 0;
  $75 = $47 + 4 | 0;
  SAFE_HEAP_STORE($75 | 0, $74 | 0, 4);
  SAFE_HEAP_STORE($47 | 0, $74 | 0, 4);
  $76 = SAFE_HEAP_LOAD($47 | 0, 4, 0) | 0 | 0;
  $77 = $46;
  $78 = $76 + ($77 * 12 | 0) | 0;
  $16 = $47;
  $79 = $16;
  $80 = $79 + 8 | 0;
  $15 = $80;
  $81 = $15;
  $14 = $81;
  $82 = $14;
  SAFE_HEAP_STORE($82 | 0, $78 | 0, 4);
  $40 = $47;
  $41 = 0;
  $83 = $40;
  $39 = $83;
  $84 = $39;
  $85 = SAFE_HEAP_LOAD($84 | 0, 4, 0) | 0 | 0;
  $38 = $85;
  $86 = $38;
  $18 = $83;
  $87 = $18;
  $88 = SAFE_HEAP_LOAD($87 | 0, 4, 0) | 0 | 0;
  $17 = $88;
  $89 = $17;
  $23 = $83;
  $90 = $23;
  $22 = $90;
  $91 = $22;
  $21 = $91;
  $92 = $21;
  $93 = $92 + 8 | 0;
  $20 = $93;
  $94 = $20;
  $19 = $94;
  $95 = $19;
  $96 = SAFE_HEAP_LOAD($95 | 0, 4, 0) | 0 | 0;
  $97 = SAFE_HEAP_LOAD($91 | 0, 4, 0) | 0 | 0;
  $98 = $96;
  $99 = $97;
  $100 = $98 - $99 | 0;
  $101 = ($100 | 0) / 12 & -1;
  $102 = $89 + ($101 * 12 | 0) | 0;
  $25 = $83;
  $103 = $25;
  $104 = SAFE_HEAP_LOAD($103 | 0, 4, 0) | 0 | 0;
  $24 = $104;
  $105 = $24;
  $30 = $83;
  $106 = $30;
  $29 = $106;
  $107 = $29;
  $28 = $107;
  $108 = $28;
  $109 = $108 + 8 | 0;
  $27 = $109;
  $110 = $27;
  $26 = $110;
  $111 = $26;
  $112 = SAFE_HEAP_LOAD($111 | 0, 4, 0) | 0 | 0;
  $113 = SAFE_HEAP_LOAD($107 | 0, 4, 0) | 0 | 0;
  $114 = $112;
  $115 = $113;
  $116 = $114 - $115 | 0;
  $117 = ($116 | 0) / 12 & -1;
  $118 = $105 + ($117 * 12 | 0) | 0;
  $32 = $83;
  $119 = $32;
  $120 = SAFE_HEAP_LOAD($119 | 0, 4, 0) | 0 | 0;
  $31 = $120;
  $121 = $31;
  $122 = $41;
  $123 = $121 + ($122 * 12 | 0) | 0;
  $33 = $83;
  $34 = $86;
  $35 = $102;
  $36 = $118;
  $37 = $123;
  STACKTOP = sp;
  return;
 }
 $4 = 879;
 $61 = ___cxa_allocate_exception(8) | 0;
 $62 = $4;
 $2 = $61;
 $3 = $62;
 $63 = $2;
 $64 = $3;
 __THREW__ = 0;
 invoke_vii(56, $63 | 0, $64 | 0);
 $65 = __THREW__;
 __THREW__ = 0;
 $66 = $65 & 1;
 if ($66) {
  $67 = ___cxa_find_matching_catch_2() | 0;
  $68 = tempRet0;
  $5 = $67;
  $6 = $68;
  ___cxa_free_exception($61 | 0);
  $69 = $5;
  $70 = $6;
  ___resumeException($69 | 0);
 } else {
  SAFE_HEAP_STORE($63 | 0, 796 | 0, 4);
  ___cxa_throw($61 | 0, 104 | 0, 21 | 0);
 }
}

function __ZNSt3__26vectorIN5Eigen5ArrayIfLi3ELi1ELi0ELi3ELi1EEENS_9allocatorIS3_EEE8allocateEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(192 | 0);
 $45 = $0;
 $46 = $1;
 $47 = $45;
 $48 = $46;
 $49 = __ZNKSt3__26vectorIN5Eigen5ArrayIfLi3ELi1ELi0ELi3ELi1EEENS_9allocatorIS3_EEE8max_sizeEv($47) | 0;
 $50 = $48 >>> 0 > $49 >>> 0;
 if ($50) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($47);
 }
 $44 = $47;
 $51 = $44;
 $52 = $51 + 8 | 0;
 $43 = $52;
 $53 = $43;
 $42 = $53;
 $54 = $42;
 $55 = $46;
 $12 = $54;
 $13 = $55;
 $56 = $12;
 $57 = $13;
 $9 = $56;
 $10 = $57;
 $11 = 0;
 $58 = $9;
 $59 = $10;
 $8 = $58;
 $60 = $59 >>> 0 > 357913941;
 if (!$60) {
  $71 = $10;
  $72 = $71 * 12 | 0;
  $7 = $72;
  $73 = $7;
  $74 = __Znwj($73) | 0;
  $75 = $47 + 4 | 0;
  SAFE_HEAP_STORE($75 | 0, $74 | 0, 4);
  SAFE_HEAP_STORE($47 | 0, $74 | 0, 4);
  $76 = SAFE_HEAP_LOAD($47 | 0, 4, 0) | 0 | 0;
  $77 = $46;
  $78 = $76 + ($77 * 12 | 0) | 0;
  $16 = $47;
  $79 = $16;
  $80 = $79 + 8 | 0;
  $15 = $80;
  $81 = $15;
  $14 = $81;
  $82 = $14;
  SAFE_HEAP_STORE($82 | 0, $78 | 0, 4);
  $40 = $47;
  $41 = 0;
  $83 = $40;
  $39 = $83;
  $84 = $39;
  $85 = SAFE_HEAP_LOAD($84 | 0, 4, 0) | 0 | 0;
  $38 = $85;
  $86 = $38;
  $18 = $83;
  $87 = $18;
  $88 = SAFE_HEAP_LOAD($87 | 0, 4, 0) | 0 | 0;
  $17 = $88;
  $89 = $17;
  $23 = $83;
  $90 = $23;
  $22 = $90;
  $91 = $22;
  $21 = $91;
  $92 = $21;
  $93 = $92 + 8 | 0;
  $20 = $93;
  $94 = $20;
  $19 = $94;
  $95 = $19;
  $96 = SAFE_HEAP_LOAD($95 | 0, 4, 0) | 0 | 0;
  $97 = SAFE_HEAP_LOAD($91 | 0, 4, 0) | 0 | 0;
  $98 = $96;
  $99 = $97;
  $100 = $98 - $99 | 0;
  $101 = ($100 | 0) / 12 & -1;
  $102 = $89 + ($101 * 12 | 0) | 0;
  $25 = $83;
  $103 = $25;
  $104 = SAFE_HEAP_LOAD($103 | 0, 4, 0) | 0 | 0;
  $24 = $104;
  $105 = $24;
  $30 = $83;
  $106 = $30;
  $29 = $106;
  $107 = $29;
  $28 = $107;
  $108 = $28;
  $109 = $108 + 8 | 0;
  $27 = $109;
  $110 = $27;
  $26 = $110;
  $111 = $26;
  $112 = SAFE_HEAP_LOAD($111 | 0, 4, 0) | 0 | 0;
  $113 = SAFE_HEAP_LOAD($107 | 0, 4, 0) | 0 | 0;
  $114 = $112;
  $115 = $113;
  $116 = $114 - $115 | 0;
  $117 = ($116 | 0) / 12 & -1;
  $118 = $105 + ($117 * 12 | 0) | 0;
  $32 = $83;
  $119 = $32;
  $120 = SAFE_HEAP_LOAD($119 | 0, 4, 0) | 0 | 0;
  $31 = $120;
  $121 = $31;
  $122 = $41;
  $123 = $121 + ($122 * 12 | 0) | 0;
  $33 = $83;
  $34 = $86;
  $35 = $102;
  $36 = $118;
  $37 = $123;
  STACKTOP = sp;
  return;
 }
 $4 = 879;
 $61 = ___cxa_allocate_exception(8) | 0;
 $62 = $4;
 $2 = $61;
 $3 = $62;
 $63 = $2;
 $64 = $3;
 __THREW__ = 0;
 invoke_vii(56, $63 | 0, $64 | 0);
 $65 = __THREW__;
 __THREW__ = 0;
 $66 = $65 & 1;
 if ($66) {
  $67 = ___cxa_find_matching_catch_2() | 0;
  $68 = tempRet0;
  $5 = $67;
  $6 = $68;
  ___cxa_free_exception($61 | 0);
  $69 = $5;
  $70 = $6;
  ___resumeException($69 | 0);
 } else {
  SAFE_HEAP_STORE($63 | 0, 796 | 0, 4);
  ___cxa_throw($61 | 0, 104 | 0, 21 | 0);
 }
}

function ___stdio_write($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$04756 = 0, $$04855 = 0, $$04954 = 0, $$051 = 0, $$1 = 0, $$150 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0;
 var $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48 | 0);
 $vararg_buffer3 = sp + 16 | 0;
 $vararg_buffer = sp;
 $3 = sp + 32 | 0;
 $4 = $0 + 28 | 0;
 $5 = SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0;
 SAFE_HEAP_STORE($3 | 0, $5 | 0, 4);
 $6 = $3 + 4 | 0;
 $7 = $0 + 20 | 0;
 $8 = SAFE_HEAP_LOAD($7 | 0, 4, 0) | 0 | 0;
 $9 = $8 - $5 | 0;
 SAFE_HEAP_STORE($6 | 0, $9 | 0, 4);
 $10 = $3 + 8 | 0;
 SAFE_HEAP_STORE($10 | 0, $1 | 0, 4);
 $11 = $3 + 12 | 0;
 SAFE_HEAP_STORE($11 | 0, $2 | 0, 4);
 $12 = $9 + $2 | 0;
 $13 = $0 + 60 | 0;
 $14 = SAFE_HEAP_LOAD($13 | 0, 4, 0) | 0 | 0;
 $15 = $3;
 SAFE_HEAP_STORE($vararg_buffer | 0, $14 | 0, 4);
 $vararg_ptr1 = $vararg_buffer + 4 | 0;
 SAFE_HEAP_STORE($vararg_ptr1 | 0, $15 | 0, 4);
 $vararg_ptr2 = $vararg_buffer + 8 | 0;
 SAFE_HEAP_STORE($vararg_ptr2 | 0, 2 | 0, 4);
 $16 = ___syscall146(146, $vararg_buffer | 0) | 0;
 $17 = ___syscall_ret($16) | 0;
 $18 = ($12 | 0) == ($17 | 0);
 L1 : do {
  if ($18) {
   label = 3;
  } else {
   $$04756 = 2;
   $$04855 = $12;
   $$04954 = $3;
   $26 = $17;
   while (1) {
    $25 = ($26 | 0) < 0;
    if ($25) {
     break;
    }
    $34 = $$04855 - $26 | 0;
    $35 = $$04954 + 4 | 0;
    $36 = SAFE_HEAP_LOAD($35 | 0, 4, 0) | 0 | 0;
    $37 = $26 >>> 0 > $36 >>> 0;
    $38 = $$04954 + 8 | 0;
    $$150 = $37 ? $38 : $$04954;
    $39 = $37 << 31 >> 31;
    $$1 = $39 + $$04756 | 0;
    $40 = $37 ? $36 : 0;
    $$0 = $26 - $40 | 0;
    $41 = SAFE_HEAP_LOAD($$150 | 0, 4, 0) | 0 | 0;
    $42 = $41 + $$0 | 0;
    SAFE_HEAP_STORE($$150 | 0, $42 | 0, 4);
    $43 = $$150 + 4 | 0;
    $44 = SAFE_HEAP_LOAD($43 | 0, 4, 0) | 0 | 0;
    $45 = $44 - $$0 | 0;
    SAFE_HEAP_STORE($43 | 0, $45 | 0, 4);
    $46 = SAFE_HEAP_LOAD($13 | 0, 4, 0) | 0 | 0;
    $47 = $$150;
    SAFE_HEAP_STORE($vararg_buffer3 | 0, $46 | 0, 4);
    $vararg_ptr6 = $vararg_buffer3 + 4 | 0;
    SAFE_HEAP_STORE($vararg_ptr6 | 0, $47 | 0, 4);
    $vararg_ptr7 = $vararg_buffer3 + 8 | 0;
    SAFE_HEAP_STORE($vararg_ptr7 | 0, $$1 | 0, 4);
    $48 = ___syscall146(146, $vararg_buffer3 | 0) | 0;
    $49 = ___syscall_ret($48) | 0;
    $50 = ($34 | 0) == ($49 | 0);
    if ($50) {
     label = 3;
     break L1;
    } else {
     $$04756 = $$1;
     $$04855 = $34;
     $$04954 = $$150;
     $26 = $49;
    }
   }
   $27 = $0 + 16 | 0;
   SAFE_HEAP_STORE($27 | 0, 0 | 0, 4);
   SAFE_HEAP_STORE($4 | 0, 0 | 0, 4);
   SAFE_HEAP_STORE($7 | 0, 0 | 0, 4);
   $28 = SAFE_HEAP_LOAD($0 | 0, 4, 0) | 0 | 0;
   $29 = $28 | 32;
   SAFE_HEAP_STORE($0 | 0, $29 | 0, 4);
   $30 = ($$04756 | 0) == 2;
   if ($30) {
    $$051 = 0;
   } else {
    $31 = $$04954 + 4 | 0;
    $32 = SAFE_HEAP_LOAD($31 | 0, 4, 0) | 0 | 0;
    $33 = $2 - $32 | 0;
    $$051 = $33;
   }
  }
 } while (0);
 if ((label | 0) == 3) {
  $19 = $0 + 44 | 0;
  $20 = SAFE_HEAP_LOAD($19 | 0, 4, 0) | 0 | 0;
  $21 = $0 + 48 | 0;
  $22 = SAFE_HEAP_LOAD($21 | 0, 4, 0) | 0 | 0;
  $23 = $20 + $22 | 0;
  $24 = $0 + 16 | 0;
  SAFE_HEAP_STORE($24 | 0, $23 | 0, 4);
  SAFE_HEAP_STORE($4 | 0, $20 | 0, 4);
  SAFE_HEAP_STORE($7 | 0, $20 | 0, 4);
  $$051 = $2;
 }
 STACKTOP = sp;
 return $$051 | 0;
}

function _memchr($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$035$lcssa = 0, $$035$lcssa65 = 0, $$03555 = 0, $$036$lcssa = 0, $$036$lcssa64 = 0, $$03654 = 0, $$046 = 0, $$137$lcssa = 0, $$13745 = 0, $$140 = 0, $$2 = 0, $$23839 = 0, $$3 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond53 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1 & 255;
 $4 = $0;
 $5 = $4 & 3;
 $6 = ($5 | 0) != 0;
 $7 = ($2 | 0) != 0;
 $or$cond53 = $7 & $6;
 L1 : do {
  if ($or$cond53) {
   $8 = $1 & 255;
   $$03555 = $0;
   $$03654 = $2;
   while (1) {
    $9 = SAFE_HEAP_LOAD($$03555 >> 0 | 0, 1, 0) | 0 | 0;
    $10 = $9 << 24 >> 24 == $8 << 24 >> 24;
    if ($10) {
     $$035$lcssa65 = $$03555;
     $$036$lcssa64 = $$03654;
     label = 6;
     break L1;
    }
    $11 = $$03555 + 1 | 0;
    $12 = $$03654 + -1 | 0;
    $13 = $11;
    $14 = $13 & 3;
    $15 = ($14 | 0) != 0;
    $16 = ($12 | 0) != 0;
    $or$cond = $16 & $15;
    if ($or$cond) {
     $$03555 = $11;
     $$03654 = $12;
    } else {
     $$035$lcssa = $11;
     $$036$lcssa = $12;
     $$lcssa = $16;
     label = 5;
     break;
    }
   }
  } else {
   $$035$lcssa = $0;
   $$036$lcssa = $2;
   $$lcssa = $7;
   label = 5;
  }
 } while (0);
 if ((label | 0) == 5) {
  if ($$lcssa) {
   $$035$lcssa65 = $$035$lcssa;
   $$036$lcssa64 = $$036$lcssa;
   label = 6;
  } else {
   $$2 = $$035$lcssa;
   $$3 = 0;
  }
 }
 L8 : do {
  if ((label | 0) == 6) {
   $17 = SAFE_HEAP_LOAD($$035$lcssa65 >> 0 | 0, 1, 0) | 0 | 0;
   $18 = $1 & 255;
   $19 = $17 << 24 >> 24 == $18 << 24 >> 24;
   if ($19) {
    $$2 = $$035$lcssa65;
    $$3 = $$036$lcssa64;
   } else {
    $20 = Math_imul($3, 16843009) | 0;
    $21 = $$036$lcssa64 >>> 0 > 3;
    L11 : do {
     if ($21) {
      $$046 = $$035$lcssa65;
      $$13745 = $$036$lcssa64;
      while (1) {
       $22 = SAFE_HEAP_LOAD($$046 | 0, 4, 0) | 0 | 0;
       $23 = $22 ^ $20;
       $24 = $23 + -16843009 | 0;
       $25 = $23 & -2139062144;
       $26 = $25 ^ -2139062144;
       $27 = $26 & $24;
       $28 = ($27 | 0) == 0;
       if (!$28) {
        break;
       }
       $29 = $$046 + 4 | 0;
       $30 = $$13745 + -4 | 0;
       $31 = $30 >>> 0 > 3;
       if ($31) {
        $$046 = $29;
        $$13745 = $30;
       } else {
        $$0$lcssa = $29;
        $$137$lcssa = $30;
        label = 11;
        break L11;
       }
      }
      $$140 = $$046;
      $$23839 = $$13745;
     } else {
      $$0$lcssa = $$035$lcssa65;
      $$137$lcssa = $$036$lcssa64;
      label = 11;
     }
    } while (0);
    if ((label | 0) == 11) {
     $32 = ($$137$lcssa | 0) == 0;
     if ($32) {
      $$2 = $$0$lcssa;
      $$3 = 0;
      break;
     } else {
      $$140 = $$0$lcssa;
      $$23839 = $$137$lcssa;
     }
    }
    while (1) {
     $33 = SAFE_HEAP_LOAD($$140 >> 0 | 0, 1, 0) | 0 | 0;
     $34 = $33 << 24 >> 24 == $18 << 24 >> 24;
     if ($34) {
      $$2 = $$140;
      $$3 = $$23839;
      break L8;
     }
     $35 = $$140 + 1 | 0;
     $36 = $$23839 + -1 | 0;
     $37 = ($36 | 0) == 0;
     if ($37) {
      $$2 = $35;
      $$3 = 0;
      break;
     } else {
      $$140 = $35;
      $$23839 = $36;
     }
    }
   }
  }
 } while (0);
 $38 = ($$3 | 0) != 0;
 $39 = $38 ? $$2 : 0;
 return $39 | 0;
}

function ___mo_lookup($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$ = 0, $$090 = 0, $$094 = 0, $$191 = 0, $$195 = 0, $$4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond102 = 0, $or$cond104 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = SAFE_HEAP_LOAD($0 | 0, 4, 0) | 0 | 0;
 $4 = $3 + 1794895138 | 0;
 $5 = $0 + 8 | 0;
 $6 = SAFE_HEAP_LOAD($5 | 0, 4, 0) | 0 | 0;
 $7 = _swapc($6, $4) | 0;
 $8 = $0 + 12 | 0;
 $9 = SAFE_HEAP_LOAD($8 | 0, 4, 0) | 0 | 0;
 $10 = _swapc($9, $4) | 0;
 $11 = $0 + 16 | 0;
 $12 = SAFE_HEAP_LOAD($11 | 0, 4, 0) | 0 | 0;
 $13 = _swapc($12, $4) | 0;
 $14 = $1 >>> 2;
 $15 = $7 >>> 0 < $14 >>> 0;
 L1 : do {
  if ($15) {
   $16 = $7 << 2;
   $17 = $1 - $16 | 0;
   $18 = $10 >>> 0 < $17 >>> 0;
   $19 = $13 >>> 0 < $17 >>> 0;
   $or$cond = $18 & $19;
   if ($or$cond) {
    $20 = $13 | $10;
    $21 = $20 & 3;
    $22 = ($21 | 0) == 0;
    if ($22) {
     $23 = $10 >>> 2;
     $24 = $13 >>> 2;
     $$090 = 0;
     $$094 = $7;
     while (1) {
      $25 = $$094 >>> 1;
      $26 = $$090 + $25 | 0;
      $27 = $26 << 1;
      $28 = $27 + $23 | 0;
      $29 = $0 + ($28 << 2) | 0;
      $30 = SAFE_HEAP_LOAD($29 | 0, 4, 0) | 0 | 0;
      $31 = _swapc($30, $4) | 0;
      $32 = $28 + 1 | 0;
      $33 = $0 + ($32 << 2) | 0;
      $34 = SAFE_HEAP_LOAD($33 | 0, 4, 0) | 0 | 0;
      $35 = _swapc($34, $4) | 0;
      $36 = $35 >>> 0 < $1 >>> 0;
      $37 = $1 - $35 | 0;
      $38 = $31 >>> 0 < $37 >>> 0;
      $or$cond102 = $36 & $38;
      if (!$or$cond102) {
       $$4 = 0;
       break L1;
      }
      $39 = $35 + $31 | 0;
      $40 = $0 + $39 | 0;
      $41 = SAFE_HEAP_LOAD($40 >> 0 | 0, 1, 0) | 0 | 0;
      $42 = $41 << 24 >> 24 == 0;
      if (!$42) {
       $$4 = 0;
       break L1;
      }
      $43 = $0 + $35 | 0;
      $44 = _strcmp($2, $43) | 0;
      $45 = ($44 | 0) == 0;
      if ($45) {
       break;
      }
      $62 = ($$094 | 0) == 1;
      $63 = ($44 | 0) < 0;
      $64 = $$094 - $25 | 0;
      $$195 = $63 ? $25 : $64;
      $$191 = $63 ? $$090 : $26;
      if ($62) {
       $$4 = 0;
       break L1;
      } else {
       $$090 = $$191;
       $$094 = $$195;
      }
     }
     $46 = $27 + $24 | 0;
     $47 = $0 + ($46 << 2) | 0;
     $48 = SAFE_HEAP_LOAD($47 | 0, 4, 0) | 0 | 0;
     $49 = _swapc($48, $4) | 0;
     $50 = $46 + 1 | 0;
     $51 = $0 + ($50 << 2) | 0;
     $52 = SAFE_HEAP_LOAD($51 | 0, 4, 0) | 0 | 0;
     $53 = _swapc($52, $4) | 0;
     $54 = $53 >>> 0 < $1 >>> 0;
     $55 = $1 - $53 | 0;
     $56 = $49 >>> 0 < $55 >>> 0;
     $or$cond104 = $54 & $56;
     if ($or$cond104) {
      $57 = $0 + $53 | 0;
      $58 = $53 + $49 | 0;
      $59 = $0 + $58 | 0;
      $60 = SAFE_HEAP_LOAD($59 >> 0 | 0, 1, 0) | 0 | 0;
      $61 = $60 << 24 >> 24 == 0;
      $$ = $61 ? $57 : 0;
      $$4 = $$;
     } else {
      $$4 = 0;
     }
    } else {
     $$4 = 0;
    }
   } else {
    $$4 = 0;
   }
  } else {
   $$4 = 0;
  }
 } while (0);
 return $$4 | 0;
}

function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$037$off038 = 0, $$037$off039 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = $1 + 8 | 0;
 $6 = SAFE_HEAP_LOAD($5 | 0, 4, 0) | 0 | 0;
 $7 = __ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, $6, $4) | 0;
 do {
  if ($7) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0, $1, $2, $3);
  } else {
   $8 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0;
   $9 = __ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, $8, $4) | 0;
   $10 = $0 + 8 | 0;
   if (!$9) {
    $41 = SAFE_HEAP_LOAD($10 | 0, 4, 0) | 0 | 0;
    $42 = SAFE_HEAP_LOAD($41 | 0, 4, 0) | 0 | 0;
    $43 = $42 + 24 | 0;
    $44 = SAFE_HEAP_LOAD($43 | 0, 4, 0) | 0 | 0;
    FUNCTION_TABLE_viiiii[(SAFE_FT_MASK($44 | 0, 127 | 0) | 0) & 127]($41, $1, $2, $3, $4);
    break;
   }
   $11 = $1 + 16 | 0;
   $12 = SAFE_HEAP_LOAD($11 | 0, 4, 0) | 0 | 0;
   $13 = ($12 | 0) == ($2 | 0);
   $14 = $1 + 32 | 0;
   if (!$13) {
    $15 = $1 + 20 | 0;
    $16 = SAFE_HEAP_LOAD($15 | 0, 4, 0) | 0 | 0;
    $17 = ($16 | 0) == ($2 | 0);
    if (!$17) {
     SAFE_HEAP_STORE($14 | 0, $3 | 0, 4);
     $19 = $1 + 44 | 0;
     $20 = SAFE_HEAP_LOAD($19 | 0, 4, 0) | 0 | 0;
     $21 = ($20 | 0) == 4;
     if ($21) {
      break;
     }
     $22 = $1 + 52 | 0;
     SAFE_HEAP_STORE($22 >> 0 | 0, 0 | 0, 1);
     $23 = $1 + 53 | 0;
     SAFE_HEAP_STORE($23 >> 0 | 0, 0 | 0, 1);
     $24 = SAFE_HEAP_LOAD($10 | 0, 4, 0) | 0 | 0;
     $25 = SAFE_HEAP_LOAD($24 | 0, 4, 0) | 0 | 0;
     $26 = $25 + 20 | 0;
     $27 = SAFE_HEAP_LOAD($26 | 0, 4, 0) | 0 | 0;
     FUNCTION_TABLE_viiiiii[(SAFE_FT_MASK($27 | 0, 15 | 0) | 0) & 15]($24, $1, $2, $2, 1, $4);
     $28 = SAFE_HEAP_LOAD($23 >> 0 | 0, 1, 0) | 0 | 0;
     $29 = $28 << 24 >> 24 == 0;
     if ($29) {
      $$037$off038 = 4;
      label = 11;
     } else {
      $30 = SAFE_HEAP_LOAD($22 >> 0 | 0, 1, 0) | 0 | 0;
      $not$ = $30 << 24 >> 24 == 0;
      if ($not$) {
       $$037$off038 = 3;
       label = 11;
      } else {
       $$037$off039 = 3;
      }
     }
     if ((label | 0) == 11) {
      SAFE_HEAP_STORE($15 | 0, $2 | 0, 4);
      $31 = $1 + 40 | 0;
      $32 = SAFE_HEAP_LOAD($31 | 0, 4, 0) | 0 | 0;
      $33 = $32 + 1 | 0;
      SAFE_HEAP_STORE($31 | 0, $33 | 0, 4);
      $34 = $1 + 36 | 0;
      $35 = SAFE_HEAP_LOAD($34 | 0, 4, 0) | 0 | 0;
      $36 = ($35 | 0) == 1;
      if ($36) {
       $37 = $1 + 24 | 0;
       $38 = SAFE_HEAP_LOAD($37 | 0, 4, 0) | 0 | 0;
       $39 = ($38 | 0) == 2;
       if ($39) {
        $40 = $1 + 54 | 0;
        SAFE_HEAP_STORE($40 >> 0 | 0, 1 | 0, 1);
        $$037$off039 = $$037$off038;
       } else {
        $$037$off039 = $$037$off038;
       }
      } else {
       $$037$off039 = $$037$off038;
      }
     }
     SAFE_HEAP_STORE($19 | 0, $$037$off039 | 0, 4);
     break;
    }
   }
   $18 = ($3 | 0) == 1;
   if ($18) {
    SAFE_HEAP_STORE($14 | 0, 1 | 0, 4);
   }
  }
 } while (0);
 return;
}

function ___dynamic_cast($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$ = 0, $$0 = 0, $$33 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond28 = 0, $or$cond30 = 0, $or$cond32 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64 | 0);
 $4 = sp;
 $5 = SAFE_HEAP_LOAD($0 | 0, 4, 0) | 0 | 0;
 $6 = $5 + -8 | 0;
 $7 = SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0;
 $8 = $0 + $7 | 0;
 $9 = $5 + -4 | 0;
 $10 = SAFE_HEAP_LOAD($9 | 0, 4, 0) | 0 | 0;
 SAFE_HEAP_STORE($4 | 0, $2 | 0, 4);
 $11 = $4 + 4 | 0;
 SAFE_HEAP_STORE($11 | 0, $0 | 0, 4);
 $12 = $4 + 8 | 0;
 SAFE_HEAP_STORE($12 | 0, $1 | 0, 4);
 $13 = $4 + 12 | 0;
 SAFE_HEAP_STORE($13 | 0, $3 | 0, 4);
 $14 = $4 + 16 | 0;
 $15 = $4 + 20 | 0;
 $16 = $4 + 24 | 0;
 $17 = $4 + 28 | 0;
 $18 = $4 + 32 | 0;
 $19 = $4 + 40 | 0;
 dest = $14;
 stop = dest + 36 | 0;
 do {
  SAFE_HEAP_STORE(dest | 0, 0 | 0 | 0, 4);
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 SAFE_HEAP_STORE($14 + 36 | 0, 0 | 0 | 0, 2);
 SAFE_HEAP_STORE($14 + 38 >> 0 | 0, 0 | 0 | 0, 1);
 $20 = __ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($10, $2, 0) | 0;
 L1 : do {
  if ($20) {
   $21 = $4 + 48 | 0;
   SAFE_HEAP_STORE($21 | 0, 1 | 0, 4);
   $22 = SAFE_HEAP_LOAD($10 | 0, 4, 0) | 0 | 0;
   $23 = $22 + 20 | 0;
   $24 = SAFE_HEAP_LOAD($23 | 0, 4, 0) | 0 | 0;
   FUNCTION_TABLE_viiiiii[(SAFE_FT_MASK($24 | 0, 15 | 0) | 0) & 15]($10, $4, $8, $8, 1, 0);
   $25 = SAFE_HEAP_LOAD($16 | 0, 4, 0) | 0 | 0;
   $26 = ($25 | 0) == 1;
   $$ = $26 ? $8 : 0;
   $$0 = $$;
  } else {
   $27 = $4 + 36 | 0;
   $28 = SAFE_HEAP_LOAD($10 | 0, 4, 0) | 0 | 0;
   $29 = $28 + 24 | 0;
   $30 = SAFE_HEAP_LOAD($29 | 0, 4, 0) | 0 | 0;
   FUNCTION_TABLE_viiiii[(SAFE_FT_MASK($30 | 0, 127 | 0) | 0) & 127]($10, $4, $8, 1, 0);
   $31 = SAFE_HEAP_LOAD($27 | 0, 4, 0) | 0 | 0;
   switch ($31 | 0) {
   case 0:
    {
     $32 = SAFE_HEAP_LOAD($19 | 0, 4, 0) | 0 | 0;
     $33 = ($32 | 0) == 1;
     $34 = SAFE_HEAP_LOAD($17 | 0, 4, 0) | 0 | 0;
     $35 = ($34 | 0) == 1;
     $or$cond = $33 & $35;
     $36 = SAFE_HEAP_LOAD($18 | 0, 4, 0) | 0 | 0;
     $37 = ($36 | 0) == 1;
     $or$cond28 = $or$cond & $37;
     $38 = SAFE_HEAP_LOAD($15 | 0, 4, 0) | 0 | 0;
     $$33 = $or$cond28 ? $38 : 0;
     $$0 = $$33;
     break L1;
     break;
    }
   case 1:
    {
     break;
    }
   default:
    {
     $$0 = 0;
     break L1;
    }
   }
   $39 = SAFE_HEAP_LOAD($16 | 0, 4, 0) | 0 | 0;
   $40 = ($39 | 0) == 1;
   if (!$40) {
    $41 = SAFE_HEAP_LOAD($19 | 0, 4, 0) | 0 | 0;
    $42 = ($41 | 0) == 0;
    $43 = SAFE_HEAP_LOAD($17 | 0, 4, 0) | 0 | 0;
    $44 = ($43 | 0) == 1;
    $or$cond30 = $42 & $44;
    $45 = SAFE_HEAP_LOAD($18 | 0, 4, 0) | 0 | 0;
    $46 = ($45 | 0) == 1;
    $or$cond32 = $or$cond30 & $46;
    if (!$or$cond32) {
     $$0 = 0;
     break;
    }
   }
   $47 = SAFE_HEAP_LOAD($14 | 0, 4, 0) | 0 | 0;
   $$0 = $47;
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZNSt3__214__split_bufferIN5Eigen5ArrayIjLi3ELi1ELi0ELi3ELi1EEERNS_9allocatorIS3_EEEC2EjjS6_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128 | 0);
 $26 = sp + 36 | 0;
 $30 = sp + 20 | 0;
 $32 = $0;
 $33 = $1;
 $34 = $2;
 $35 = $3;
 $36 = $32;
 $37 = $36 + 12 | 0;
 $38 = $35;
 $29 = $37;
 SAFE_HEAP_STORE($30 | 0, 0 | 0, 4);
 $31 = $38;
 $39 = $29;
 $28 = $30;
 $40 = $28;
 $41 = SAFE_HEAP_LOAD($40 | 0, 4, 0) | 0 | 0;
 $42 = $31;
 $22 = $42;
 $43 = $22;
 $25 = $39;
 SAFE_HEAP_STORE($26 | 0, $41 | 0, 4);
 $27 = $43;
 $44 = $25;
 $24 = $26;
 $45 = $24;
 $46 = SAFE_HEAP_LOAD($45 | 0, 4, 0) | 0 | 0;
 SAFE_HEAP_STORE($44 | 0, $46 | 0, 4);
 $47 = $44 + 4 | 0;
 $48 = $27;
 $23 = $48;
 $49 = $23;
 SAFE_HEAP_STORE($47 | 0, $49 | 0, 4);
 $50 = $33;
 $51 = ($50 | 0) != 0;
 do {
  if ($51) {
   $6 = $36;
   $52 = $6;
   $53 = $52 + 12 | 0;
   $5 = $53;
   $54 = $5;
   $4 = $54;
   $55 = $4;
   $56 = $55 + 4 | 0;
   $57 = SAFE_HEAP_LOAD($56 | 0, 4, 0) | 0 | 0;
   $58 = $33;
   $17 = $57;
   $18 = $58;
   $59 = $17;
   $60 = $18;
   $14 = $59;
   $15 = $60;
   $16 = 0;
   $61 = $14;
   $62 = $15;
   $13 = $61;
   $63 = $62 >>> 0 > 357913941;
   if (!$63) {
    $74 = $15;
    $75 = $74 * 12 | 0;
    $12 = $75;
    $76 = $12;
    $77 = __Znwj($76) | 0;
    $78 = $77;
    break;
   }
   $9 = 879;
   $64 = ___cxa_allocate_exception(8) | 0;
   $65 = $9;
   $7 = $64;
   $8 = $65;
   $66 = $7;
   $67 = $8;
   __THREW__ = 0;
   invoke_vii(56, $66 | 0, $67 | 0);
   $68 = __THREW__;
   __THREW__ = 0;
   $69 = $68 & 1;
   if ($69) {
    $70 = ___cxa_find_matching_catch_2() | 0;
    $71 = tempRet0;
    $10 = $70;
    $11 = $71;
    ___cxa_free_exception($64 | 0);
    $72 = $10;
    $73 = $11;
    ___resumeException($72 | 0);
   } else {
    SAFE_HEAP_STORE($66 | 0, 796 | 0, 4);
    ___cxa_throw($64 | 0, 104 | 0, 21 | 0);
   }
  } else {
   $78 = 0;
  }
 } while (0);
 SAFE_HEAP_STORE($36 | 0, $78 | 0, 4);
 $79 = SAFE_HEAP_LOAD($36 | 0, 4, 0) | 0 | 0;
 $80 = $34;
 $81 = $79 + ($80 * 12 | 0) | 0;
 $82 = $36 + 8 | 0;
 SAFE_HEAP_STORE($82 | 0, $81 | 0, 4);
 $83 = $36 + 4 | 0;
 SAFE_HEAP_STORE($83 | 0, $81 | 0, 4);
 $84 = SAFE_HEAP_LOAD($36 | 0, 4, 0) | 0 | 0;
 $85 = $33;
 $86 = $84 + ($85 * 12 | 0) | 0;
 $21 = $36;
 $87 = $21;
 $88 = $87 + 12 | 0;
 $20 = $88;
 $89 = $20;
 $19 = $89;
 $90 = $19;
 SAFE_HEAP_STORE($90 | 0, $86 | 0, 4);
 STACKTOP = sp;
 return;
}

function __ZNSt3__214__split_bufferIN5Eigen5ArrayIfLi3ELi1ELi0ELi3ELi1EEERNS_9allocatorIS3_EEEC2EjjS6_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128 | 0);
 $26 = sp + 36 | 0;
 $30 = sp + 20 | 0;
 $32 = $0;
 $33 = $1;
 $34 = $2;
 $35 = $3;
 $36 = $32;
 $37 = $36 + 12 | 0;
 $38 = $35;
 $29 = $37;
 SAFE_HEAP_STORE($30 | 0, 0 | 0, 4);
 $31 = $38;
 $39 = $29;
 $28 = $30;
 $40 = $28;
 $41 = SAFE_HEAP_LOAD($40 | 0, 4, 0) | 0 | 0;
 $42 = $31;
 $22 = $42;
 $43 = $22;
 $25 = $39;
 SAFE_HEAP_STORE($26 | 0, $41 | 0, 4);
 $27 = $43;
 $44 = $25;
 $24 = $26;
 $45 = $24;
 $46 = SAFE_HEAP_LOAD($45 | 0, 4, 0) | 0 | 0;
 SAFE_HEAP_STORE($44 | 0, $46 | 0, 4);
 $47 = $44 + 4 | 0;
 $48 = $27;
 $23 = $48;
 $49 = $23;
 SAFE_HEAP_STORE($47 | 0, $49 | 0, 4);
 $50 = $33;
 $51 = ($50 | 0) != 0;
 do {
  if ($51) {
   $6 = $36;
   $52 = $6;
   $53 = $52 + 12 | 0;
   $5 = $53;
   $54 = $5;
   $4 = $54;
   $55 = $4;
   $56 = $55 + 4 | 0;
   $57 = SAFE_HEAP_LOAD($56 | 0, 4, 0) | 0 | 0;
   $58 = $33;
   $17 = $57;
   $18 = $58;
   $59 = $17;
   $60 = $18;
   $14 = $59;
   $15 = $60;
   $16 = 0;
   $61 = $14;
   $62 = $15;
   $13 = $61;
   $63 = $62 >>> 0 > 357913941;
   if (!$63) {
    $74 = $15;
    $75 = $74 * 12 | 0;
    $12 = $75;
    $76 = $12;
    $77 = __Znwj($76) | 0;
    $78 = $77;
    break;
   }
   $9 = 879;
   $64 = ___cxa_allocate_exception(8) | 0;
   $65 = $9;
   $7 = $64;
   $8 = $65;
   $66 = $7;
   $67 = $8;
   __THREW__ = 0;
   invoke_vii(56, $66 | 0, $67 | 0);
   $68 = __THREW__;
   __THREW__ = 0;
   $69 = $68 & 1;
   if ($69) {
    $70 = ___cxa_find_matching_catch_2() | 0;
    $71 = tempRet0;
    $10 = $70;
    $11 = $71;
    ___cxa_free_exception($64 | 0);
    $72 = $10;
    $73 = $11;
    ___resumeException($72 | 0);
   } else {
    SAFE_HEAP_STORE($66 | 0, 796 | 0, 4);
    ___cxa_throw($64 | 0, 104 | 0, 21 | 0);
   }
  } else {
   $78 = 0;
  }
 } while (0);
 SAFE_HEAP_STORE($36 | 0, $78 | 0, 4);
 $79 = SAFE_HEAP_LOAD($36 | 0, 4, 0) | 0 | 0;
 $80 = $34;
 $81 = $79 + ($80 * 12 | 0) | 0;
 $82 = $36 + 8 | 0;
 SAFE_HEAP_STORE($82 | 0, $81 | 0, 4);
 $83 = $36 + 4 | 0;
 SAFE_HEAP_STORE($83 | 0, $81 | 0, 4);
 $84 = SAFE_HEAP_LOAD($36 | 0, 4, 0) | 0 | 0;
 $85 = $33;
 $86 = $84 + ($85 * 12 | 0) | 0;
 $21 = $36;
 $87 = $21;
 $88 = $87 + 12 | 0;
 $20 = $88;
 $89 = $20;
 $19 = $89;
 $90 = $19;
 SAFE_HEAP_STORE($90 | 0, $86 | 0, 4);
 STACKTOP = sp;
 return;
}

function __ZNSt3__26vectorIN5Eigen5ArrayIjLi3ELi1ELi0ELi3ELi1EEENS_9allocatorIS3_EEEC2ERKS6_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112 | 0);
 $7 = sp + 84 | 0;
 $8 = sp + 16 | 0;
 $11 = sp + 72 | 0;
 $12 = sp + 111 | 0;
 $13 = sp + 8 | 0;
 $17 = sp + 110 | 0;
 $19 = sp;
 $21 = sp + 109 | 0;
 $27 = sp + 108 | 0;
 $25 = $0;
 $26 = $1;
 $31 = $25;
 $32 = $26;
 $24 = $32;
 $33 = $24;
 $34 = $33 + 8 | 0;
 $23 = $34;
 $35 = $23;
 $22 = $35;
 $36 = $22;
 $20 = $36;
 $37 = $20;
 {}
 SAFE_HEAP_STORE($19 >> 0 | 0, SAFE_HEAP_LOAD($21 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
 $18 = $37;
 $15 = $31;
 $16 = $27;
 $38 = $15;
 $14 = $38;
 SAFE_HEAP_STORE($38 | 0, 0 | 0, 4);
 $39 = $38 + 4 | 0;
 SAFE_HEAP_STORE($39 | 0, 0 | 0, 4);
 $40 = $38 + 8 | 0;
 {}
 SAFE_HEAP_STORE($13 >> 0 | 0, SAFE_HEAP_LOAD($17 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
 $10 = $40;
 SAFE_HEAP_STORE($11 | 0, 0 | 0, 4);
 $41 = $10;
 $9 = $11;
 $42 = $9;
 $43 = SAFE_HEAP_LOAD($42 | 0, 4, 0) | 0 | 0;
 $3 = $13;
 {}
 SAFE_HEAP_STORE($8 >> 0 | 0, SAFE_HEAP_LOAD($12 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
 $6 = $41;
 SAFE_HEAP_STORE($7 | 0, $43 | 0, 4);
 $44 = $6;
 $5 = $8;
 $4 = $7;
 $45 = $4;
 $46 = SAFE_HEAP_LOAD($45 | 0, 4, 0) | 0 | 0;
 SAFE_HEAP_STORE($44 | 0, $46 | 0, 4);
 $47 = $26;
 $2 = $47;
 $48 = $2;
 $49 = $48 + 4 | 0;
 $50 = SAFE_HEAP_LOAD($49 | 0, 4, 0) | 0 | 0;
 $51 = SAFE_HEAP_LOAD($48 | 0, 4, 0) | 0 | 0;
 $52 = $50;
 $53 = $51;
 $54 = $52 - $53 | 0;
 $55 = ($54 | 0) / 12 & -1;
 $28 = $55;
 $56 = $28;
 $57 = $56 >>> 0 > 0;
 if (!$57) {
  STACKTOP = sp;
  return;
 }
 $58 = $28;
 __THREW__ = 0;
 invoke_vii(29, $31 | 0, $58 | 0);
 $59 = __THREW__;
 __THREW__ = 0;
 $60 = $59 & 1;
 if ($60) {
  $69 = ___cxa_find_matching_catch_2() | 0;
  $70 = tempRet0;
  $29 = $69;
  $30 = $70;
  __ZNSt3__213__vector_baseIN5Eigen5ArrayIjLi3ELi1ELi0ELi3ELi1EEENS_9allocatorIS3_EEED2Ev($31);
  $71 = $29;
  $72 = $30;
  ___resumeException($71 | 0);
 }
 $61 = $26;
 $62 = SAFE_HEAP_LOAD($61 | 0, 4, 0) | 0 | 0;
 $63 = $26;
 $64 = $63 + 4 | 0;
 $65 = SAFE_HEAP_LOAD($64 | 0, 4, 0) | 0 | 0;
 $66 = $28;
 __THREW__ = 0;
 invoke_viiii(52, $31 | 0, $62 | 0, $65 | 0, $66 | 0);
 $67 = __THREW__;
 __THREW__ = 0;
 $68 = $67 & 1;
 if ($68) {
  $69 = ___cxa_find_matching_catch_2() | 0;
  $70 = tempRet0;
  $29 = $69;
  $30 = $70;
  __ZNSt3__213__vector_baseIN5Eigen5ArrayIjLi3ELi1ELi0ELi3ELi1EEENS_9allocatorIS3_EEED2Ev($31);
  $71 = $29;
  $72 = $30;
  ___resumeException($71 | 0);
 } else {
  STACKTOP = sp;
  return;
 }
}

function __ZNSt3__26vectorIN5Eigen5ArrayIfLi3ELi1ELi0ELi3ELi1EEENS_9allocatorIS3_EEEC2ERKS6_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112 | 0);
 $7 = sp + 84 | 0;
 $8 = sp + 16 | 0;
 $11 = sp + 72 | 0;
 $12 = sp + 111 | 0;
 $13 = sp + 8 | 0;
 $17 = sp + 110 | 0;
 $19 = sp;
 $21 = sp + 109 | 0;
 $27 = sp + 108 | 0;
 $25 = $0;
 $26 = $1;
 $31 = $25;
 $32 = $26;
 $24 = $32;
 $33 = $24;
 $34 = $33 + 8 | 0;
 $23 = $34;
 $35 = $23;
 $22 = $35;
 $36 = $22;
 $20 = $36;
 $37 = $20;
 {}
 SAFE_HEAP_STORE($19 >> 0 | 0, SAFE_HEAP_LOAD($21 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
 $18 = $37;
 $15 = $31;
 $16 = $27;
 $38 = $15;
 $14 = $38;
 SAFE_HEAP_STORE($38 | 0, 0 | 0, 4);
 $39 = $38 + 4 | 0;
 SAFE_HEAP_STORE($39 | 0, 0 | 0, 4);
 $40 = $38 + 8 | 0;
 {}
 SAFE_HEAP_STORE($13 >> 0 | 0, SAFE_HEAP_LOAD($17 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
 $10 = $40;
 SAFE_HEAP_STORE($11 | 0, 0 | 0, 4);
 $41 = $10;
 $9 = $11;
 $42 = $9;
 $43 = SAFE_HEAP_LOAD($42 | 0, 4, 0) | 0 | 0;
 $3 = $13;
 {}
 SAFE_HEAP_STORE($8 >> 0 | 0, SAFE_HEAP_LOAD($12 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
 $6 = $41;
 SAFE_HEAP_STORE($7 | 0, $43 | 0, 4);
 $44 = $6;
 $5 = $8;
 $4 = $7;
 $45 = $4;
 $46 = SAFE_HEAP_LOAD($45 | 0, 4, 0) | 0 | 0;
 SAFE_HEAP_STORE($44 | 0, $46 | 0, 4);
 $47 = $26;
 $2 = $47;
 $48 = $2;
 $49 = $48 + 4 | 0;
 $50 = SAFE_HEAP_LOAD($49 | 0, 4, 0) | 0 | 0;
 $51 = SAFE_HEAP_LOAD($48 | 0, 4, 0) | 0 | 0;
 $52 = $50;
 $53 = $51;
 $54 = $52 - $53 | 0;
 $55 = ($54 | 0) / 12 & -1;
 $28 = $55;
 $56 = $28;
 $57 = $56 >>> 0 > 0;
 if (!$57) {
  STACKTOP = sp;
  return;
 }
 $58 = $28;
 __THREW__ = 0;
 invoke_vii(26, $31 | 0, $58 | 0);
 $59 = __THREW__;
 __THREW__ = 0;
 $60 = $59 & 1;
 if ($60) {
  $69 = ___cxa_find_matching_catch_2() | 0;
  $70 = tempRet0;
  $29 = $69;
  $30 = $70;
  __ZNSt3__213__vector_baseIN5Eigen5ArrayIfLi3ELi1ELi0ELi3ELi1EEENS_9allocatorIS3_EEED2Ev($31);
  $71 = $29;
  $72 = $30;
  ___resumeException($71 | 0);
 }
 $61 = $26;
 $62 = SAFE_HEAP_LOAD($61 | 0, 4, 0) | 0 | 0;
 $63 = $26;
 $64 = $63 + 4 | 0;
 $65 = SAFE_HEAP_LOAD($64 | 0, 4, 0) | 0 | 0;
 $66 = $28;
 __THREW__ = 0;
 invoke_viiii(51, $31 | 0, $62 | 0, $65 | 0, $66 | 0);
 $67 = __THREW__;
 __THREW__ = 0;
 $68 = $67 & 1;
 if ($68) {
  $69 = ___cxa_find_matching_catch_2() | 0;
  $70 = tempRet0;
  $29 = $69;
  $30 = $70;
  __ZNSt3__213__vector_baseIN5Eigen5ArrayIfLi3ELi1ELi0ELi3ELi1EEENS_9allocatorIS3_EEED2Ev($31);
  $71 = $29;
  $72 = $30;
  ___resumeException($71 | 0);
 } else {
  STACKTOP = sp;
  return;
 }
}

function __ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_18scalar_quotient_opIffEEKNS_13MatrixWrapperIKNS4_INS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESC_EEEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKS3_EEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80 | 0);
 $6 = sp + 32 | 0;
 $9 = sp + 16 | 0;
 $10 = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $11 = $4;
 __ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_18scalar_quotient_opIffEEKNS_13MatrixWrapperIKNS2_INS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESA_EEEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEEEC2ERKSN_($6, $11);
 $12 = $3;
 $13 = $4;
 $14 = $5;
 __THREW__ = 0;
 invoke_viii(90, $12 | 0, $13 | 0, $14 | 0);
 $15 = __THREW__;
 __THREW__ = 0;
 $16 = $15 & 1;
 if (!$16) {
  $17 = $3;
  __THREW__ = 0;
  invoke_vii(91, $9 | 0, $17 | 0);
  $18 = __THREW__;
  __THREW__ = 0;
  $19 = $18 & 1;
  if (!$19) {
   $20 = $5;
   $21 = $3;
   __THREW__ = 0;
   $22 = invoke_ii(92, $21 | 0) | 0;
   $23 = __THREW__;
   __THREW__ = 0;
   $24 = $23 & 1;
   if (!$24) {
    __THREW__ = 0;
    invoke_viiiii(93, $10 | 0, $9 | 0, $6 | 0, $20 | 0, $22 | 0);
    $25 = __THREW__;
    __THREW__ = 0;
    $26 = $25 & 1;
    if (!$26) {
     __THREW__ = 0;
     invoke_vi(94, $10 | 0);
     $27 = __THREW__;
     __THREW__ = 0;
     $28 = $27 & 1;
     if (!$28) {
      __ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED2Ev($9);
      __ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_18scalar_quotient_opIffEEKNS_13MatrixWrapperIKNS2_INS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESA_EEEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEEED2Ev($6);
      STACKTOP = sp;
      return;
     }
    }
   }
   $31 = ___cxa_find_matching_catch_2() | 0;
   $32 = tempRet0;
   $7 = $31;
   $8 = $32;
   __ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED2Ev($9);
   __ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_18scalar_quotient_opIffEEKNS_13MatrixWrapperIKNS2_INS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESA_EEEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEEED2Ev($6);
   $33 = $7;
   $34 = $8;
   ___resumeException($33 | 0);
  }
 }
 $29 = ___cxa_find_matching_catch_2() | 0;
 $30 = tempRet0;
 $7 = $29;
 $8 = $30;
 __ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_18scalar_quotient_opIffEEKNS_13MatrixWrapperIKNS2_INS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESA_EEEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEEED2Ev($6);
 $33 = $7;
 $34 = $8;
 ___resumeException($33 | 0);
}

function __ZN5flint8geometry16SphereBufferBaseILj3EfEC2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(176 | 0);
 $4 = sp + 148 | 0;
 $7 = sp + 136 | 0;
 $14 = sp + 108 | 0;
 $17 = sp + 96 | 0;
 $24 = sp + 68 | 0;
 $27 = sp + 56 | 0;
 $34 = sp + 28 | 0;
 $37 = sp + 16 | 0;
 $41 = $0;
 $42 = $41;
 $40 = $42;
 $43 = $40;
 $39 = $43;
 $44 = $39;
 $38 = $44;
 SAFE_HEAP_STORE($44 | 0, 0 | 0, 4);
 $45 = $44 + 4 | 0;
 SAFE_HEAP_STORE($45 | 0, 0 | 0, 4);
 $46 = $44 + 8 | 0;
 $36 = $46;
 SAFE_HEAP_STORE($37 | 0, 0 | 0, 4);
 $47 = $36;
 $35 = $37;
 $48 = $35;
 $49 = SAFE_HEAP_LOAD($48 | 0, 4, 0) | 0 | 0;
 $33 = $47;
 SAFE_HEAP_STORE($34 | 0, $49 | 0, 4);
 $50 = $33;
 $32 = $50;
 $31 = $34;
 $51 = $31;
 $52 = SAFE_HEAP_LOAD($51 | 0, 4, 0) | 0 | 0;
 SAFE_HEAP_STORE($50 | 0, $52 | 0, 4);
 $53 = $42 + 12 | 0;
 $10 = $53;
 $54 = $10;
 $9 = $54;
 $55 = $9;
 $8 = $55;
 SAFE_HEAP_STORE($55 | 0, 0 | 0, 4);
 $56 = $55 + 4 | 0;
 SAFE_HEAP_STORE($56 | 0, 0 | 0, 4);
 $57 = $55 + 8 | 0;
 $6 = $57;
 SAFE_HEAP_STORE($7 | 0, 0 | 0, 4);
 $58 = $6;
 $5 = $7;
 $59 = $5;
 $60 = SAFE_HEAP_LOAD($59 | 0, 4, 0) | 0 | 0;
 $3 = $58;
 SAFE_HEAP_STORE($4 | 0, $60 | 0, 4);
 $61 = $3;
 $2 = $61;
 $1 = $4;
 $62 = $1;
 $63 = SAFE_HEAP_LOAD($62 | 0, 4, 0) | 0 | 0;
 SAFE_HEAP_STORE($61 | 0, $63 | 0, 4);
 $64 = $42 + 24 | 0;
 $20 = $64;
 $65 = $20;
 $19 = $65;
 $66 = $19;
 $18 = $66;
 SAFE_HEAP_STORE($66 | 0, 0 | 0, 4);
 $67 = $66 + 4 | 0;
 SAFE_HEAP_STORE($67 | 0, 0 | 0, 4);
 $68 = $66 + 8 | 0;
 $16 = $68;
 SAFE_HEAP_STORE($17 | 0, 0 | 0, 4);
 $69 = $16;
 $15 = $17;
 $70 = $15;
 $71 = SAFE_HEAP_LOAD($70 | 0, 4, 0) | 0 | 0;
 $13 = $69;
 SAFE_HEAP_STORE($14 | 0, $71 | 0, 4);
 $72 = $13;
 $12 = $72;
 $11 = $14;
 $73 = $11;
 $74 = SAFE_HEAP_LOAD($73 | 0, 4, 0) | 0 | 0;
 SAFE_HEAP_STORE($72 | 0, $74 | 0, 4);
 $75 = $42 + 36 | 0;
 $30 = $75;
 $76 = $30;
 $29 = $76;
 $77 = $29;
 $28 = $77;
 SAFE_HEAP_STORE($77 | 0, 0 | 0, 4);
 $78 = $77 + 4 | 0;
 SAFE_HEAP_STORE($78 | 0, 0 | 0, 4);
 $79 = $77 + 8 | 0;
 $26 = $79;
 SAFE_HEAP_STORE($27 | 0, 0 | 0, 4);
 $80 = $26;
 $25 = $27;
 $81 = $25;
 $82 = SAFE_HEAP_LOAD($81 | 0, 4, 0) | 0 | 0;
 $23 = $80;
 SAFE_HEAP_STORE($24 | 0, $82 | 0, 4);
 $83 = $23;
 $22 = $83;
 $21 = $24;
 $84 = $21;
 $85 = SAFE_HEAP_LOAD($84 | 0, 4, 0) | 0 | 0;
 SAFE_HEAP_STORE($83 | 0, $85 | 0, 4);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE10resizeLikeINS_13CwiseBinaryOpINS_8internal18scalar_quotient_opIffEEKNS_13MatrixWrapperIKNS5_INS6_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESE_EEEEKNS_14CwiseNullaryOpINS6_18scalar_constant_opIfEEKS2_EEEEEEvRKNS_9EigenBaseIT_EE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
 $4 = $0;
 $5 = $1;
 $8 = $4;
 $9 = $5;
 $10 = __ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal18scalar_quotient_opIffEEKNS_13MatrixWrapperIKNS1_INS2_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESA_EEEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEEE7derivedEv($9) | 0;
 $6 = $10;
 $11 = $6;
 $12 = __ZNK5Eigen13CwiseBinaryOpINS_8internal18scalar_quotient_opIffEEKNS_13MatrixWrapperIKNS0_INS1_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES9_EEEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE4rowsEv($11) | 0;
 $13 = $6;
 $14 = __ZNK5Eigen13CwiseBinaryOpINS_8internal18scalar_quotient_opIffEEKNS_13MatrixWrapperIKNS0_INS1_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES9_EEEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE4colsEv($13) | 0;
 $2 = $12;
 $3 = $14;
 $15 = $6;
 $16 = __ZNK5Eigen13CwiseBinaryOpINS_8internal18scalar_quotient_opIffEEKNS_13MatrixWrapperIKNS0_INS1_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES9_EEEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE4rowsEv($15) | 0;
 $17 = $6;
 $18 = __ZNK5Eigen13CwiseBinaryOpINS_8internal18scalar_quotient_opIffEEKNS_13MatrixWrapperIKNS0_INS1_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES9_EEEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE4colsEv($17) | 0;
 $19 = Math_imul($16, $18) | 0;
 $7 = $19;
 $20 = $6;
 $21 = __ZNK5Eigen13CwiseBinaryOpINS_8internal18scalar_quotient_opIffEEKNS_13MatrixWrapperIKNS0_INS1_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES9_EEEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE4rowsEv($20) | 0;
 $22 = ($21 | 0) == 1;
 if ($22) {
  $26 = $7;
  __ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii($8, $26, 1);
  STACKTOP = sp;
  return;
 }
 $23 = $6;
 $24 = __ZNK5Eigen13CwiseBinaryOpINS_8internal18scalar_quotient_opIffEEKNS_13MatrixWrapperIKNS0_INS1_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES9_EEEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE4colsEv($23) | 0;
 $25 = ($24 | 0) == 1;
 if ($25) {
  $26 = $7;
  __ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii($8, $26, 1);
  STACKTOP = sp;
  return;
 } else {
  ___assert_fail(2529 | 0, 1656 | 0, 374, 2568 | 0);
 }
}

function __ZNSt3__26vectorIN5Eigen5ArrayIjLi3ELi1ELi0ELi3ELi1EEENS_9allocatorIS3_EEE4swapERS6_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(144 | 0);
 $7 = sp + 116 | 0;
 $19 = sp + 68 | 0;
 $28 = sp;
 $34 = sp + 12 | 0;
 $37 = sp + 140 | 0;
 $35 = $0;
 $36 = $1;
 $38 = $35;
 $39 = $36;
 $32 = $38;
 $33 = $39;
 $40 = $32;
 $31 = $40;
 $41 = $31;
 $42 = SAFE_HEAP_LOAD($41 | 0, 4, 0) | 0 | 0;
 SAFE_HEAP_STORE($34 | 0, $42 | 0, 4);
 $43 = $33;
 $29 = $43;
 $44 = $29;
 $45 = SAFE_HEAP_LOAD($44 | 0, 4, 0) | 0 | 0;
 $46 = $32;
 SAFE_HEAP_STORE($46 | 0, $45 | 0, 4);
 $30 = $34;
 $47 = $30;
 $48 = SAFE_HEAP_LOAD($47 | 0, 4, 0) | 0 | 0;
 $49 = $33;
 SAFE_HEAP_STORE($49 | 0, $48 | 0, 4);
 $50 = $38 + 4 | 0;
 $51 = $36;
 $52 = $51 + 4 | 0;
 $5 = $50;
 $6 = $52;
 $53 = $5;
 $4 = $53;
 $54 = $4;
 $55 = SAFE_HEAP_LOAD($54 | 0, 4, 0) | 0 | 0;
 SAFE_HEAP_STORE($7 | 0, $55 | 0, 4);
 $56 = $6;
 $2 = $56;
 $57 = $2;
 $58 = SAFE_HEAP_LOAD($57 | 0, 4, 0) | 0 | 0;
 $59 = $5;
 SAFE_HEAP_STORE($59 | 0, $58 | 0, 4);
 $3 = $7;
 $60 = $3;
 $61 = SAFE_HEAP_LOAD($60 | 0, 4, 0) | 0 | 0;
 $62 = $6;
 SAFE_HEAP_STORE($62 | 0, $61 | 0, 4);
 $10 = $38;
 $63 = $10;
 $64 = $63 + 8 | 0;
 $9 = $64;
 $65 = $9;
 $8 = $65;
 $66 = $8;
 $67 = $36;
 $13 = $67;
 $68 = $13;
 $69 = $68 + 8 | 0;
 $12 = $69;
 $70 = $12;
 $11 = $70;
 $71 = $11;
 $17 = $66;
 $18 = $71;
 $72 = $17;
 $16 = $72;
 $73 = $16;
 $74 = SAFE_HEAP_LOAD($73 | 0, 4, 0) | 0 | 0;
 SAFE_HEAP_STORE($19 | 0, $74 | 0, 4);
 $75 = $18;
 $14 = $75;
 $76 = $14;
 $77 = SAFE_HEAP_LOAD($76 | 0, 4, 0) | 0 | 0;
 $78 = $17;
 SAFE_HEAP_STORE($78 | 0, $77 | 0, 4);
 $15 = $19;
 $79 = $15;
 $80 = SAFE_HEAP_LOAD($79 | 0, 4, 0) | 0 | 0;
 $81 = $18;
 SAFE_HEAP_STORE($81 | 0, $80 | 0, 4);
 $22 = $38;
 $82 = $22;
 $83 = $82 + 8 | 0;
 $21 = $83;
 $84 = $21;
 $20 = $84;
 $85 = $20;
 $86 = $36;
 $25 = $86;
 $87 = $25;
 $88 = $87 + 8 | 0;
 $24 = $88;
 $89 = $24;
 $23 = $89;
 $90 = $23;
 {}
 SAFE_HEAP_STORE($28 >> 0 | 0, SAFE_HEAP_LOAD($37 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
 $26 = $85;
 $27 = $90;
 STACKTOP = sp;
 return;
}

function __ZNSt3__26vectorIN5Eigen5ArrayIfLi3ELi1ELi0ELi3ELi1EEENS_9allocatorIS3_EEE4swapERS6_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(144 | 0);
 $7 = sp + 116 | 0;
 $19 = sp + 68 | 0;
 $28 = sp;
 $34 = sp + 12 | 0;
 $37 = sp + 140 | 0;
 $35 = $0;
 $36 = $1;
 $38 = $35;
 $39 = $36;
 $32 = $38;
 $33 = $39;
 $40 = $32;
 $31 = $40;
 $41 = $31;
 $42 = SAFE_HEAP_LOAD($41 | 0, 4, 0) | 0 | 0;
 SAFE_HEAP_STORE($34 | 0, $42 | 0, 4);
 $43 = $33;
 $29 = $43;
 $44 = $29;
 $45 = SAFE_HEAP_LOAD($44 | 0, 4, 0) | 0 | 0;
 $46 = $32;
 SAFE_HEAP_STORE($46 | 0, $45 | 0, 4);
 $30 = $34;
 $47 = $30;
 $48 = SAFE_HEAP_LOAD($47 | 0, 4, 0) | 0 | 0;
 $49 = $33;
 SAFE_HEAP_STORE($49 | 0, $48 | 0, 4);
 $50 = $38 + 4 | 0;
 $51 = $36;
 $52 = $51 + 4 | 0;
 $5 = $50;
 $6 = $52;
 $53 = $5;
 $4 = $53;
 $54 = $4;
 $55 = SAFE_HEAP_LOAD($54 | 0, 4, 0) | 0 | 0;
 SAFE_HEAP_STORE($7 | 0, $55 | 0, 4);
 $56 = $6;
 $2 = $56;
 $57 = $2;
 $58 = SAFE_HEAP_LOAD($57 | 0, 4, 0) | 0 | 0;
 $59 = $5;
 SAFE_HEAP_STORE($59 | 0, $58 | 0, 4);
 $3 = $7;
 $60 = $3;
 $61 = SAFE_HEAP_LOAD($60 | 0, 4, 0) | 0 | 0;
 $62 = $6;
 SAFE_HEAP_STORE($62 | 0, $61 | 0, 4);
 $10 = $38;
 $63 = $10;
 $64 = $63 + 8 | 0;
 $9 = $64;
 $65 = $9;
 $8 = $65;
 $66 = $8;
 $67 = $36;
 $13 = $67;
 $68 = $13;
 $69 = $68 + 8 | 0;
 $12 = $69;
 $70 = $12;
 $11 = $70;
 $71 = $11;
 $17 = $66;
 $18 = $71;
 $72 = $17;
 $16 = $72;
 $73 = $16;
 $74 = SAFE_HEAP_LOAD($73 | 0, 4, 0) | 0 | 0;
 SAFE_HEAP_STORE($19 | 0, $74 | 0, 4);
 $75 = $18;
 $14 = $75;
 $76 = $14;
 $77 = SAFE_HEAP_LOAD($76 | 0, 4, 0) | 0 | 0;
 $78 = $17;
 SAFE_HEAP_STORE($78 | 0, $77 | 0, 4);
 $15 = $19;
 $79 = $15;
 $80 = SAFE_HEAP_LOAD($79 | 0, 4, 0) | 0 | 0;
 $81 = $18;
 SAFE_HEAP_STORE($81 | 0, $80 | 0, 4);
 $22 = $38;
 $82 = $22;
 $83 = $82 + 8 | 0;
 $21 = $83;
 $84 = $21;
 $20 = $84;
 $85 = $20;
 $86 = $36;
 $25 = $86;
 $87 = $25;
 $88 = $87 + 8 | 0;
 $24 = $88;
 $89 = $24;
 $23 = $89;
 $90 = $23;
 {}
 SAFE_HEAP_STORE($28 >> 0 | 0, SAFE_HEAP_LOAD($37 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
 $26 = $85;
 $27 = $90;
 STACKTOP = sp;
 return;
}

function _wcrtomb($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0 | 0) == (0 | 0);
 do {
  if ($3) {
   $$0 = 1;
  } else {
   $4 = $1 >>> 0 < 128;
   if ($4) {
    $5 = $1 & 255;
    SAFE_HEAP_STORE($0 >> 0 | 0, $5 | 0, 1);
    $$0 = 1;
    break;
   }
   $6 = ___pthread_self_448() | 0;
   $7 = $6 + 188 | 0;
   $8 = SAFE_HEAP_LOAD($7 | 0, 4, 0) | 0 | 0;
   $9 = SAFE_HEAP_LOAD($8 | 0, 4, 0) | 0 | 0;
   $not$ = ($9 | 0) == (0 | 0);
   if ($not$) {
    $10 = $1 & -128;
    $11 = ($10 | 0) == 57216;
    if ($11) {
     $13 = $1 & 255;
     SAFE_HEAP_STORE($0 >> 0 | 0, $13 | 0, 1);
     $$0 = 1;
     break;
    } else {
     $12 = ___errno_location() | 0;
     SAFE_HEAP_STORE($12 | 0, 84 | 0, 4);
     $$0 = -1;
     break;
    }
   }
   $14 = $1 >>> 0 < 2048;
   if ($14) {
    $15 = $1 >>> 6;
    $16 = $15 | 192;
    $17 = $16 & 255;
    $18 = $0 + 1 | 0;
    SAFE_HEAP_STORE($0 >> 0 | 0, $17 | 0, 1);
    $19 = $1 & 63;
    $20 = $19 | 128;
    $21 = $20 & 255;
    SAFE_HEAP_STORE($18 >> 0 | 0, $21 | 0, 1);
    $$0 = 2;
    break;
   }
   $22 = $1 >>> 0 < 55296;
   $23 = $1 & -8192;
   $24 = ($23 | 0) == 57344;
   $or$cond = $22 | $24;
   if ($or$cond) {
    $25 = $1 >>> 12;
    $26 = $25 | 224;
    $27 = $26 & 255;
    $28 = $0 + 1 | 0;
    SAFE_HEAP_STORE($0 >> 0 | 0, $27 | 0, 1);
    $29 = $1 >>> 6;
    $30 = $29 & 63;
    $31 = $30 | 128;
    $32 = $31 & 255;
    $33 = $0 + 2 | 0;
    SAFE_HEAP_STORE($28 >> 0 | 0, $32 | 0, 1);
    $34 = $1 & 63;
    $35 = $34 | 128;
    $36 = $35 & 255;
    SAFE_HEAP_STORE($33 >> 0 | 0, $36 | 0, 1);
    $$0 = 3;
    break;
   }
   $37 = $1 + -65536 | 0;
   $38 = $37 >>> 0 < 1048576;
   if ($38) {
    $39 = $1 >>> 18;
    $40 = $39 | 240;
    $41 = $40 & 255;
    $42 = $0 + 1 | 0;
    SAFE_HEAP_STORE($0 >> 0 | 0, $41 | 0, 1);
    $43 = $1 >>> 12;
    $44 = $43 & 63;
    $45 = $44 | 128;
    $46 = $45 & 255;
    $47 = $0 + 2 | 0;
    SAFE_HEAP_STORE($42 >> 0 | 0, $46 | 0, 1);
    $48 = $1 >>> 6;
    $49 = $48 & 63;
    $50 = $49 | 128;
    $51 = $50 & 255;
    $52 = $0 + 3 | 0;
    SAFE_HEAP_STORE($47 >> 0 | 0, $51 | 0, 1);
    $53 = $1 & 63;
    $54 = $53 | 128;
    $55 = $54 & 255;
    SAFE_HEAP_STORE($52 >> 0 | 0, $55 | 0, 1);
    $$0 = 4;
    break;
   } else {
    $56 = ___errno_location() | 0;
    SAFE_HEAP_STORE($56 | 0, 84 | 0, 4);
    $$0 = -1;
    break;
   }
  }
 } while (0);
 return $$0 | 0;
}

function __ZN5Eigen8internal26call_dense_assignment_loopINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS0_17scalar_product_opIffEEKS3_KNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEES9_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80 | 0);
 $6 = sp + 32 | 0;
 $9 = sp + 16 | 0;
 $10 = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $11 = $4;
 __ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS0_17scalar_product_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEES9_EEEC2ERKSH_($6, $11);
 $12 = $3;
 $13 = $4;
 $14 = $5;
 __THREW__ = 0;
 invoke_viii(109, $12 | 0, $13 | 0, $14 | 0);
 $15 = __THREW__;
 __THREW__ = 0;
 $16 = $15 & 1;
 if (!$16) {
  $17 = $3;
  __THREW__ = 0;
  invoke_vii(73, $9 | 0, $17 | 0);
  $18 = __THREW__;
  __THREW__ = 0;
  $19 = $18 & 1;
  if (!$19) {
   $20 = $5;
   $21 = $3;
   __THREW__ = 0;
   $22 = invoke_ii(74, $21 | 0) | 0;
   $23 = __THREW__;
   __THREW__ = 0;
   $24 = $23 & 1;
   if (!$24) {
    __THREW__ = 0;
    invoke_viiiii(110, $10 | 0, $9 | 0, $6 | 0, $20 | 0, $22 | 0);
    $25 = __THREW__;
    __THREW__ = 0;
    $26 = $25 & 1;
    if (!$26) {
     __THREW__ = 0;
     invoke_vi(111, $10 | 0);
     $27 = __THREW__;
     __THREW__ = 0;
     $28 = $27 & 1;
     if (!$28) {
      __ZN5Eigen8internal9evaluatorINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEED2Ev($9);
      __ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS0_17scalar_product_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEES9_EEED2Ev($6);
      STACKTOP = sp;
      return;
     }
    }
   }
   $31 = ___cxa_find_matching_catch_2() | 0;
   $32 = tempRet0;
   $7 = $31;
   $8 = $32;
   __ZN5Eigen8internal9evaluatorINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEED2Ev($9);
   __ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS0_17scalar_product_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEES9_EEED2Ev($6);
   $33 = $7;
   $34 = $8;
   ___resumeException($33 | 0);
  }
 }
 $29 = ___cxa_find_matching_catch_2() | 0;
 $30 = tempRet0;
 $7 = $29;
 $8 = $30;
 __ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS0_17scalar_product_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEES9_EEED2Ev($6);
 $33 = $7;
 $34 = $8;
 ___resumeException($33 | 0);
}

function _vfprintf($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$ = 0, $$0 = 0, $$1 = 0, $$1$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(224 | 0);
 $3 = sp + 120 | 0;
 $4 = sp + 80 | 0;
 $5 = sp;
 $6 = sp + 136 | 0;
 dest = $4;
 stop = dest + 40 | 0;
 do {
  SAFE_HEAP_STORE(dest | 0, 0 | 0 | 0, 4);
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 $vacopy_currentptr = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
 SAFE_HEAP_STORE($3 | 0, $vacopy_currentptr | 0, 4);
 $7 = _printf_core(0, $1, $3, $5, $4) | 0;
 $8 = ($7 | 0) < 0;
 if ($8) {
  $$0 = -1;
 } else {
  $9 = $0 + 76 | 0;
  $10 = SAFE_HEAP_LOAD($9 | 0, 4, 0) | 0 | 0;
  $11 = ($10 | 0) > -1;
  if ($11) {
   $12 = ___lockfile($0) | 0;
   $40 = $12;
  } else {
   $40 = 0;
  }
  $13 = SAFE_HEAP_LOAD($0 | 0, 4, 0) | 0 | 0;
  $14 = $13 & 32;
  $15 = $0 + 74 | 0;
  $16 = SAFE_HEAP_LOAD($15 >> 0 | 0, 1, 0) | 0 | 0;
  $17 = $16 << 24 >> 24 < 1;
  if ($17) {
   $18 = $13 & -33;
   SAFE_HEAP_STORE($0 | 0, $18 | 0, 4);
  }
  $19 = $0 + 48 | 0;
  $20 = SAFE_HEAP_LOAD($19 | 0, 4, 0) | 0 | 0;
  $21 = ($20 | 0) == 0;
  if ($21) {
   $23 = $0 + 44 | 0;
   $24 = SAFE_HEAP_LOAD($23 | 0, 4, 0) | 0 | 0;
   SAFE_HEAP_STORE($23 | 0, $6 | 0, 4);
   $25 = $0 + 28 | 0;
   SAFE_HEAP_STORE($25 | 0, $6 | 0, 4);
   $26 = $0 + 20 | 0;
   SAFE_HEAP_STORE($26 | 0, $6 | 0, 4);
   SAFE_HEAP_STORE($19 | 0, 80 | 0, 4);
   $27 = $6 + 80 | 0;
   $28 = $0 + 16 | 0;
   SAFE_HEAP_STORE($28 | 0, $27 | 0, 4);
   $29 = _printf_core($0, $1, $3, $5, $4) | 0;
   $30 = ($24 | 0) == (0 | 0);
   if ($30) {
    $$1 = $29;
   } else {
    $31 = $0 + 36 | 0;
    $32 = SAFE_HEAP_LOAD($31 | 0, 4, 0) | 0 | 0;
    FUNCTION_TABLE_iiii[(SAFE_FT_MASK($32 | 0, 15 | 0) | 0) & 15]($0, 0, 0) | 0;
    $33 = SAFE_HEAP_LOAD($26 | 0, 4, 0) | 0 | 0;
    $34 = ($33 | 0) == (0 | 0);
    $$ = $34 ? -1 : $29;
    SAFE_HEAP_STORE($23 | 0, $24 | 0, 4);
    SAFE_HEAP_STORE($19 | 0, 0 | 0, 4);
    SAFE_HEAP_STORE($28 | 0, 0 | 0, 4);
    SAFE_HEAP_STORE($25 | 0, 0 | 0, 4);
    SAFE_HEAP_STORE($26 | 0, 0 | 0, 4);
    $$1 = $$;
   }
  } else {
   $22 = _printf_core($0, $1, $3, $5, $4) | 0;
   $$1 = $22;
  }
  $35 = SAFE_HEAP_LOAD($0 | 0, 4, 0) | 0 | 0;
  $36 = $35 & 32;
  $37 = ($36 | 0) == 0;
  $$1$ = $37 ? $$1 : -1;
  $38 = $35 | $14;
  SAFE_HEAP_STORE($0 | 0, $38 | 0, 4);
  $39 = ($40 | 0) == 0;
  if (!$39) {
   ___unlockfile($0);
  }
  $$0 = $$1$;
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZNSt3__26vectorIN5Eigen5ArrayIjLi3ELi1ELi0ELi3ELi1EEENS_9allocatorIS3_EEEC2ERKS6_RKS5_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96 | 0);
 $8 = sp + 60 | 0;
 $9 = sp + 8 | 0;
 $12 = sp + 48 | 0;
 $13 = sp + 85 | 0;
 $14 = sp;
 $18 = sp + 84 | 0;
 $19 = $0;
 $20 = $1;
 $21 = $2;
 $25 = $19;
 $26 = $21;
 $16 = $25;
 $17 = $26;
 $27 = $16;
 $15 = $27;
 SAFE_HEAP_STORE($27 | 0, 0 | 0, 4);
 $28 = $27 + 4 | 0;
 SAFE_HEAP_STORE($28 | 0, 0 | 0, 4);
 $29 = $27 + 8 | 0;
 {}
 SAFE_HEAP_STORE($14 >> 0 | 0, SAFE_HEAP_LOAD($18 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
 $11 = $29;
 SAFE_HEAP_STORE($12 | 0, 0 | 0, 4);
 $30 = $11;
 $10 = $12;
 $31 = $10;
 $32 = SAFE_HEAP_LOAD($31 | 0, 4, 0) | 0 | 0;
 $4 = $14;
 {}
 SAFE_HEAP_STORE($9 >> 0 | 0, SAFE_HEAP_LOAD($13 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
 $7 = $30;
 SAFE_HEAP_STORE($8 | 0, $32 | 0, 4);
 $33 = $7;
 $6 = $9;
 $5 = $8;
 $34 = $5;
 $35 = SAFE_HEAP_LOAD($34 | 0, 4, 0) | 0 | 0;
 SAFE_HEAP_STORE($33 | 0, $35 | 0, 4);
 $36 = $20;
 $3 = $36;
 $37 = $3;
 $38 = $37 + 4 | 0;
 $39 = SAFE_HEAP_LOAD($38 | 0, 4, 0) | 0 | 0;
 $40 = SAFE_HEAP_LOAD($37 | 0, 4, 0) | 0 | 0;
 $41 = $39;
 $42 = $40;
 $43 = $41 - $42 | 0;
 $44 = ($43 | 0) / 12 & -1;
 $22 = $44;
 $45 = $22;
 $46 = $45 >>> 0 > 0;
 if (!$46) {
  STACKTOP = sp;
  return;
 }
 $47 = $22;
 __THREW__ = 0;
 invoke_vii(29, $25 | 0, $47 | 0);
 $48 = __THREW__;
 __THREW__ = 0;
 $49 = $48 & 1;
 if ($49) {
  $58 = ___cxa_find_matching_catch_2() | 0;
  $59 = tempRet0;
  $23 = $58;
  $24 = $59;
  __ZNSt3__213__vector_baseIN5Eigen5ArrayIjLi3ELi1ELi0ELi3ELi1EEENS_9allocatorIS3_EEED2Ev($25);
  $60 = $23;
  $61 = $24;
  ___resumeException($60 | 0);
 }
 $50 = $20;
 $51 = SAFE_HEAP_LOAD($50 | 0, 4, 0) | 0 | 0;
 $52 = $20;
 $53 = $52 + 4 | 0;
 $54 = SAFE_HEAP_LOAD($53 | 0, 4, 0) | 0 | 0;
 $55 = $22;
 __THREW__ = 0;
 invoke_viiii(52, $25 | 0, $51 | 0, $54 | 0, $55 | 0);
 $56 = __THREW__;
 __THREW__ = 0;
 $57 = $56 & 1;
 if ($57) {
  $58 = ___cxa_find_matching_catch_2() | 0;
  $59 = tempRet0;
  $23 = $58;
  $24 = $59;
  __ZNSt3__213__vector_baseIN5Eigen5ArrayIjLi3ELi1ELi0ELi3ELi1EEENS_9allocatorIS3_EEED2Ev($25);
  $60 = $23;
  $61 = $24;
  ___resumeException($60 | 0);
 } else {
  STACKTOP = sp;
  return;
 }
}

function __ZNSt3__26vectorIN5Eigen5ArrayIfLi3ELi1ELi0ELi3ELi1EEENS_9allocatorIS3_EEEC2ERKS6_RKS5_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96 | 0);
 $8 = sp + 60 | 0;
 $9 = sp + 8 | 0;
 $12 = sp + 48 | 0;
 $13 = sp + 85 | 0;
 $14 = sp;
 $18 = sp + 84 | 0;
 $19 = $0;
 $20 = $1;
 $21 = $2;
 $25 = $19;
 $26 = $21;
 $16 = $25;
 $17 = $26;
 $27 = $16;
 $15 = $27;
 SAFE_HEAP_STORE($27 | 0, 0 | 0, 4);
 $28 = $27 + 4 | 0;
 SAFE_HEAP_STORE($28 | 0, 0 | 0, 4);
 $29 = $27 + 8 | 0;
 {}
 SAFE_HEAP_STORE($14 >> 0 | 0, SAFE_HEAP_LOAD($18 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
 $11 = $29;
 SAFE_HEAP_STORE($12 | 0, 0 | 0, 4);
 $30 = $11;
 $10 = $12;
 $31 = $10;
 $32 = SAFE_HEAP_LOAD($31 | 0, 4, 0) | 0 | 0;
 $4 = $14;
 {}
 SAFE_HEAP_STORE($9 >> 0 | 0, SAFE_HEAP_LOAD($13 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
 $7 = $30;
 SAFE_HEAP_STORE($8 | 0, $32 | 0, 4);
 $33 = $7;
 $6 = $9;
 $5 = $8;
 $34 = $5;
 $35 = SAFE_HEAP_LOAD($34 | 0, 4, 0) | 0 | 0;
 SAFE_HEAP_STORE($33 | 0, $35 | 0, 4);
 $36 = $20;
 $3 = $36;
 $37 = $3;
 $38 = $37 + 4 | 0;
 $39 = SAFE_HEAP_LOAD($38 | 0, 4, 0) | 0 | 0;
 $40 = SAFE_HEAP_LOAD($37 | 0, 4, 0) | 0 | 0;
 $41 = $39;
 $42 = $40;
 $43 = $41 - $42 | 0;
 $44 = ($43 | 0) / 12 & -1;
 $22 = $44;
 $45 = $22;
 $46 = $45 >>> 0 > 0;
 if (!$46) {
  STACKTOP = sp;
  return;
 }
 $47 = $22;
 __THREW__ = 0;
 invoke_vii(26, $25 | 0, $47 | 0);
 $48 = __THREW__;
 __THREW__ = 0;
 $49 = $48 & 1;
 if ($49) {
  $58 = ___cxa_find_matching_catch_2() | 0;
  $59 = tempRet0;
  $23 = $58;
  $24 = $59;
  __ZNSt3__213__vector_baseIN5Eigen5ArrayIfLi3ELi1ELi0ELi3ELi1EEENS_9allocatorIS3_EEED2Ev($25);
  $60 = $23;
  $61 = $24;
  ___resumeException($60 | 0);
 }
 $50 = $20;
 $51 = SAFE_HEAP_LOAD($50 | 0, 4, 0) | 0 | 0;
 $52 = $20;
 $53 = $52 + 4 | 0;
 $54 = SAFE_HEAP_LOAD($53 | 0, 4, 0) | 0 | 0;
 $55 = $22;
 __THREW__ = 0;
 invoke_viiii(51, $25 | 0, $51 | 0, $54 | 0, $55 | 0);
 $56 = __THREW__;
 __THREW__ = 0;
 $57 = $56 & 1;
 if ($57) {
  $58 = ___cxa_find_matching_catch_2() | 0;
  $59 = tempRet0;
  $23 = $58;
  $24 = $59;
  __ZNSt3__213__vector_baseIN5Eigen5ArrayIfLi3ELi1ELi0ELi3ELi1EEENS_9allocatorIS3_EEED2Ev($25);
  $60 = $23;
  $61 = $24;
  ___resumeException($60 | 0);
 } else {
  STACKTOP = sp;
  return;
 }
}

function _memcpy(dest, src, num) {
 dest = dest | 0;
 src = src | 0;
 num = num | 0;
 var ret = 0;
 var aligned_dest_end = 0;
 var block_aligned_dest_end = 0;
 var dest_end = 0;
 if ((num | 0) >= 8192) {
  return _emscripten_memcpy_big(dest | 0, src | 0, num | 0) | 0;
 }
 ret = dest | 0;
 dest_end = dest + num | 0;
 if ((dest & 3) == (src & 3)) {
  while (dest & 3) {
   if ((num | 0) == 0) return ret | 0;
   SAFE_HEAP_STORE(dest | 0, SAFE_HEAP_LOAD(src | 0, 1, 0) | 0 | 0, 1);
   dest = dest + 1 | 0;
   src = src + 1 | 0;
   num = num - 1 | 0;
  }
  aligned_dest_end = dest_end & -4 | 0;
  block_aligned_dest_end = aligned_dest_end - 64 | 0;
  while ((dest | 0) <= (block_aligned_dest_end | 0)) {
   SAFE_HEAP_STORE(dest | 0, SAFE_HEAP_LOAD(src | 0, 4, 0) | 0 | 0, 4);
   SAFE_HEAP_STORE(dest + 4 | 0, SAFE_HEAP_LOAD(src + 4 | 0, 4, 0) | 0 | 0, 4);
   SAFE_HEAP_STORE(dest + 8 | 0, SAFE_HEAP_LOAD(src + 8 | 0, 4, 0) | 0 | 0, 4);
   SAFE_HEAP_STORE(dest + 12 | 0, SAFE_HEAP_LOAD(src + 12 | 0, 4, 0) | 0 | 0, 4);
   SAFE_HEAP_STORE(dest + 16 | 0, SAFE_HEAP_LOAD(src + 16 | 0, 4, 0) | 0 | 0, 4);
   SAFE_HEAP_STORE(dest + 20 | 0, SAFE_HEAP_LOAD(src + 20 | 0, 4, 0) | 0 | 0, 4);
   SAFE_HEAP_STORE(dest + 24 | 0, SAFE_HEAP_LOAD(src + 24 | 0, 4, 0) | 0 | 0, 4);
   SAFE_HEAP_STORE(dest + 28 | 0, SAFE_HEAP_LOAD(src + 28 | 0, 4, 0) | 0 | 0, 4);
   SAFE_HEAP_STORE(dest + 32 | 0, SAFE_HEAP_LOAD(src + 32 | 0, 4, 0) | 0 | 0, 4);
   SAFE_HEAP_STORE(dest + 36 | 0, SAFE_HEAP_LOAD(src + 36 | 0, 4, 0) | 0 | 0, 4);
   SAFE_HEAP_STORE(dest + 40 | 0, SAFE_HEAP_LOAD(src + 40 | 0, 4, 0) | 0 | 0, 4);
   SAFE_HEAP_STORE(dest + 44 | 0, SAFE_HEAP_LOAD(src + 44 | 0, 4, 0) | 0 | 0, 4);
   SAFE_HEAP_STORE(dest + 48 | 0, SAFE_HEAP_LOAD(src + 48 | 0, 4, 0) | 0 | 0, 4);
   SAFE_HEAP_STORE(dest + 52 | 0, SAFE_HEAP_LOAD(src + 52 | 0, 4, 0) | 0 | 0, 4);
   SAFE_HEAP_STORE(dest + 56 | 0, SAFE_HEAP_LOAD(src + 56 | 0, 4, 0) | 0 | 0, 4);
   SAFE_HEAP_STORE(dest + 60 | 0, SAFE_HEAP_LOAD(src + 60 | 0, 4, 0) | 0 | 0, 4);
   dest = dest + 64 | 0;
   src = src + 64 | 0;
  }
  while ((dest | 0) < (aligned_dest_end | 0)) {
   SAFE_HEAP_STORE(dest | 0, SAFE_HEAP_LOAD(src | 0, 4, 0) | 0 | 0, 4);
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  }
 } else {
  aligned_dest_end = dest_end - 4 | 0;
  while ((dest | 0) < (aligned_dest_end | 0)) {
   SAFE_HEAP_STORE(dest | 0, SAFE_HEAP_LOAD(src | 0, 1, 0) | 0 | 0, 1);
   SAFE_HEAP_STORE(dest + 1 | 0, SAFE_HEAP_LOAD(src + 1 | 0, 1, 0) | 0 | 0, 1);
   SAFE_HEAP_STORE(dest + 2 | 0, SAFE_HEAP_LOAD(src + 2 | 0, 1, 0) | 0 | 0, 1);
   SAFE_HEAP_STORE(dest + 3 | 0, SAFE_HEAP_LOAD(src + 3 | 0, 1, 0) | 0 | 0, 1);
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  }
 }
 while ((dest | 0) < (dest_end | 0)) {
  SAFE_HEAP_STORE(dest | 0, SAFE_HEAP_LOAD(src | 0, 1, 0) | 0 | 0, 1);
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 }
 return ret | 0;
}

function __ZNSt3__214__split_bufferIN5Eigen5ArrayIjLi3ELi1ELi0ELi3ELi1EEERNS_9allocatorIS3_EEED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(144 | 0);
 $19 = sp + 8 | 0;
 $22 = sp + 133 | 0;
 $29 = sp;
 $32 = sp + 132 | 0;
 $34 = $0;
 $35 = $34;
 $33 = $35;
 $36 = $33;
 $37 = $36 + 4 | 0;
 $38 = SAFE_HEAP_LOAD($37 | 0, 4, 0) | 0 | 0;
 $30 = $36;
 $31 = $38;
 $39 = $30;
 $40 = $31;
 {}
 SAFE_HEAP_STORE($29 >> 0 | 0, SAFE_HEAP_LOAD($32 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
 $27 = $39;
 $28 = $40;
 $41 = $27;
 while (1) {
  $42 = $28;
  $43 = $41 + 8 | 0;
  $44 = SAFE_HEAP_LOAD($43 | 0, 4, 0) | 0 | 0;
  $45 = ($42 | 0) != ($44 | 0);
  if (!$45) {
   break;
  }
  $26 = $41;
  $46 = $26;
  $47 = $46 + 12 | 0;
  $25 = $47;
  $48 = $25;
  $24 = $48;
  $49 = $24;
  $50 = $49 + 4 | 0;
  $51 = SAFE_HEAP_LOAD($50 | 0, 4, 0) | 0 | 0;
  $52 = $41 + 8 | 0;
  $53 = SAFE_HEAP_LOAD($52 | 0, 4, 0) | 0 | 0;
  $54 = $53 + -12 | 0;
  SAFE_HEAP_STORE($52 | 0, $54 | 0, 4);
  $23 = $54;
  $55 = $23;
  $20 = $51;
  $21 = $55;
  $56 = $20;
  $57 = $21;
  {}
  SAFE_HEAP_STORE($19 >> 0 | 0, SAFE_HEAP_LOAD($22 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
  $17 = $56;
  $18 = $57;
  $58 = $17;
  $59 = $18;
  $15 = $58;
  $16 = $59;
 }
 $60 = SAFE_HEAP_LOAD($35 | 0, 4, 0) | 0 | 0;
 $61 = ($60 | 0) != (0 | 0);
 if (!$61) {
  STACKTOP = sp;
  return;
 }
 $14 = $35;
 $62 = $14;
 $63 = $62 + 12 | 0;
 $13 = $63;
 $64 = $13;
 $12 = $64;
 $65 = $12;
 $66 = $65 + 4 | 0;
 $67 = SAFE_HEAP_LOAD($66 | 0, 4, 0) | 0 | 0;
 $68 = SAFE_HEAP_LOAD($35 | 0, 4, 0) | 0 | 0;
 $4 = $35;
 $69 = $4;
 $3 = $69;
 $70 = $3;
 $71 = $70 + 12 | 0;
 $2 = $71;
 $72 = $2;
 $1 = $72;
 $73 = $1;
 $74 = SAFE_HEAP_LOAD($73 | 0, 4, 0) | 0 | 0;
 $75 = SAFE_HEAP_LOAD($69 | 0, 4, 0) | 0 | 0;
 $76 = $74;
 $77 = $75;
 $78 = $76 - $77 | 0;
 $79 = ($78 | 0) / 12 & -1;
 $9 = $67;
 $10 = $68;
 $11 = $79;
 $80 = $9;
 $81 = $10;
 $82 = $11;
 $6 = $80;
 $7 = $81;
 $8 = $82;
 $83 = $7;
 $5 = $83;
 $84 = $5;
 __ZdlPv($84);
 STACKTOP = sp;
 return;
}

function __ZNSt3__214__split_bufferIN5Eigen5ArrayIfLi3ELi1ELi0ELi3ELi1EEERNS_9allocatorIS3_EEED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(144 | 0);
 $19 = sp + 8 | 0;
 $22 = sp + 133 | 0;
 $29 = sp;
 $32 = sp + 132 | 0;
 $34 = $0;
 $35 = $34;
 $33 = $35;
 $36 = $33;
 $37 = $36 + 4 | 0;
 $38 = SAFE_HEAP_LOAD($37 | 0, 4, 0) | 0 | 0;
 $30 = $36;
 $31 = $38;
 $39 = $30;
 $40 = $31;
 {}
 SAFE_HEAP_STORE($29 >> 0 | 0, SAFE_HEAP_LOAD($32 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
 $27 = $39;
 $28 = $40;
 $41 = $27;
 while (1) {
  $42 = $28;
  $43 = $41 + 8 | 0;
  $44 = SAFE_HEAP_LOAD($43 | 0, 4, 0) | 0 | 0;
  $45 = ($42 | 0) != ($44 | 0);
  if (!$45) {
   break;
  }
  $26 = $41;
  $46 = $26;
  $47 = $46 + 12 | 0;
  $25 = $47;
  $48 = $25;
  $24 = $48;
  $49 = $24;
  $50 = $49 + 4 | 0;
  $51 = SAFE_HEAP_LOAD($50 | 0, 4, 0) | 0 | 0;
  $52 = $41 + 8 | 0;
  $53 = SAFE_HEAP_LOAD($52 | 0, 4, 0) | 0 | 0;
  $54 = $53 + -12 | 0;
  SAFE_HEAP_STORE($52 | 0, $54 | 0, 4);
  $23 = $54;
  $55 = $23;
  $20 = $51;
  $21 = $55;
  $56 = $20;
  $57 = $21;
  {}
  SAFE_HEAP_STORE($19 >> 0 | 0, SAFE_HEAP_LOAD($22 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
  $17 = $56;
  $18 = $57;
  $58 = $17;
  $59 = $18;
  $15 = $58;
  $16 = $59;
 }
 $60 = SAFE_HEAP_LOAD($35 | 0, 4, 0) | 0 | 0;
 $61 = ($60 | 0) != (0 | 0);
 if (!$61) {
  STACKTOP = sp;
  return;
 }
 $14 = $35;
 $62 = $14;
 $63 = $62 + 12 | 0;
 $13 = $63;
 $64 = $13;
 $12 = $64;
 $65 = $12;
 $66 = $65 + 4 | 0;
 $67 = SAFE_HEAP_LOAD($66 | 0, 4, 0) | 0 | 0;
 $68 = SAFE_HEAP_LOAD($35 | 0, 4, 0) | 0 | 0;
 $4 = $35;
 $69 = $4;
 $3 = $69;
 $70 = $3;
 $71 = $70 + 12 | 0;
 $2 = $71;
 $72 = $2;
 $1 = $72;
 $73 = $1;
 $74 = SAFE_HEAP_LOAD($73 | 0, 4, 0) | 0 | 0;
 $75 = SAFE_HEAP_LOAD($69 | 0, 4, 0) | 0 | 0;
 $76 = $74;
 $77 = $75;
 $78 = $76 - $77 | 0;
 $79 = ($78 | 0) / 12 & -1;
 $9 = $67;
 $10 = $68;
 $11 = $79;
 $80 = $9;
 $81 = $10;
 $82 = $11;
 $6 = $80;
 $7 = $81;
 $8 = $82;
 $83 = $7;
 $5 = $83;
 $84 = $5;
 __ZdlPv($84);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS0_17scalar_product_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEES9_EENS0_10IndexBasedESI_ffEC2ERKSH_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $2 = $0;
 $3 = $1;
 $6 = $2;
 __ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS0_17scalar_product_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEES9_EEEC2Ev($6);
 $7 = $3;
 __THREW__ = 0;
 $8 = invoke_ii(112, $7 | 0) | 0;
 $9 = __THREW__;
 __THREW__ = 0;
 $10 = $9 & 1;
 if (!$10) {
  __THREW__ = 0;
  invoke_vii(86, $6 | 0, $8 | 0);
  $11 = __THREW__;
  __THREW__ = 0;
  $12 = $11 & 1;
  if (!$12) {
   $13 = $6 + 4 | 0;
   $14 = $3;
   __THREW__ = 0;
   $15 = invoke_ii(113, $14 | 0) | 0;
   $16 = __THREW__;
   __THREW__ = 0;
   $17 = $16 & 1;
   if (!$17) {
    __THREW__ = 0;
    invoke_vii(114, $13 | 0, $15 | 0);
    $18 = __THREW__;
    __THREW__ = 0;
    $19 = $18 & 1;
    if (!$19) {
     $20 = $6 + 24 | 0;
     $21 = $3;
     __THREW__ = 0;
     $22 = invoke_ii(115, $21 | 0) | 0;
     $23 = __THREW__;
     __THREW__ = 0;
     $24 = $23 & 1;
     if (!$24) {
      __THREW__ = 0;
      invoke_vii(88, $20 | 0, $22 | 0);
      $25 = __THREW__;
      __THREW__ = 0;
      $26 = $25 & 1;
      if (!$26) {
       STACKTOP = sp;
       return;
      }
     }
     $29 = ___cxa_find_matching_catch_2() | 0;
     $30 = tempRet0;
     $4 = $29;
     $5 = $30;
     __ZN5Eigen8internal9evaluatorIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEED2Ev($13);
     __ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS0_17scalar_product_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEES9_EEED2Ev($6);
     $31 = $4;
     $32 = $5;
     ___resumeException($31 | 0);
    }
   }
  }
 }
 $27 = ___cxa_find_matching_catch_2() | 0;
 $28 = tempRet0;
 $4 = $27;
 $5 = $28;
 __ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS0_17scalar_product_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEES9_EEED2Ev($6);
 $31 = $4;
 $32 = $5;
 ___resumeException($31 | 0);
}

function __ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_18scalar_quotient_opIffEEKNS_13MatrixWrapperIKNS2_INS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESA_EEEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEENS0_10IndexBasedESO_ffEC2ERKSN_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $2 = $0;
 $3 = $1;
 $6 = $2;
 __ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_18scalar_quotient_opIffEEKNS_13MatrixWrapperIKNS2_INS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESA_EEEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEEEC2Ev($6);
 $7 = $3;
 __THREW__ = 0;
 $8 = invoke_ii(95, $7 | 0) | 0;
 $9 = __THREW__;
 __THREW__ = 0;
 $10 = $9 & 1;
 if ($10) {
  label = 8;
 } else {
  __THREW__ = 0;
  invoke_vii(96, $6 | 0, $8 | 0);
  $11 = __THREW__;
  __THREW__ = 0;
  $12 = $11 & 1;
  if ($12) {
   label = 8;
  } else {
   $13 = $6 + 4 | 0;
   $14 = $3;
   __THREW__ = 0;
   $15 = invoke_ii(97, $14 | 0) | 0;
   $16 = __THREW__;
   __THREW__ = 0;
   $17 = $16 & 1;
   if ($17) {
    label = 8;
   } else {
    __THREW__ = 0;
    invoke_vii(83, $13 | 0, $15 | 0);
    $18 = __THREW__;
    __THREW__ = 0;
    $19 = $18 & 1;
    if ($19) {
     label = 8;
    } else {
     $20 = $6 + 28 | 0;
     $21 = $3;
     __THREW__ = 0;
     $22 = invoke_ii(98, $21 | 0) | 0;
     $23 = __THREW__;
     __THREW__ = 0;
     $24 = $23 & 1;
     if (!$24) {
      __THREW__ = 0;
      invoke_vii(99, $20 | 0, $22 | 0);
      $25 = __THREW__;
      __THREW__ = 0;
      $26 = $25 & 1;
      if (!$26) {
       STACKTOP = sp;
       return;
      }
     }
     $29 = ___cxa_find_matching_catch_2() | 0;
     $30 = tempRet0;
     $4 = $29;
     $5 = $30;
     __ZN5Eigen8internal9evaluatorIKNS_13MatrixWrapperIKNS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES8_EEEEED2Ev($13);
    }
   }
  }
 }
 if ((label | 0) == 8) {
  $27 = ___cxa_find_matching_catch_2() | 0;
  $28 = tempRet0;
  $4 = $27;
  $5 = $28;
 }
 __ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_18scalar_quotient_opIffEEKNS_13MatrixWrapperIKNS2_INS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESA_EEEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEEED2Ev($6);
 $31 = $4;
 $32 = $5;
 ___resumeException($31 | 0);
}

function __ZL25default_terminate_handlerv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0;
 var $vararg_ptr2 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48 | 0);
 $vararg_buffer10 = sp + 32 | 0;
 $vararg_buffer7 = sp + 24 | 0;
 $vararg_buffer3 = sp + 16 | 0;
 $vararg_buffer = sp;
 $0 = sp + 36 | 0;
 $1 = ___cxa_get_globals_fast() | 0;
 $2 = ($1 | 0) == (0 | 0);
 if (!$2) {
  $3 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0;
  $4 = ($3 | 0) == (0 | 0);
  if (!$4) {
   $5 = $3 + 80 | 0;
   $6 = $3 + 48 | 0;
   $7 = $6;
   $8 = $7;
   $9 = SAFE_HEAP_LOAD($8 | 0, 4, 0) | 0 | 0;
   $10 = $7 + 4 | 0;
   $11 = $10;
   $12 = SAFE_HEAP_LOAD($11 | 0, 4, 0) | 0 | 0;
   $13 = $9 & -256;
   $14 = ($13 | 0) == 1126902528;
   $15 = ($12 | 0) == 1129074247;
   $16 = $14 & $15;
   if (!$16) {
    SAFE_HEAP_STORE($vararg_buffer7 | 0, 5148 | 0, 4);
    _abort_message(5098, $vararg_buffer7);
   }
   $17 = ($9 | 0) == 1126902529;
   $18 = ($12 | 0) == 1129074247;
   $19 = $17 & $18;
   if ($19) {
    $20 = $3 + 44 | 0;
    $21 = SAFE_HEAP_LOAD($20 | 0, 4, 0) | 0 | 0;
    $22 = $21;
   } else {
    $22 = $5;
   }
   SAFE_HEAP_STORE($0 | 0, $22 | 0, 4);
   $23 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0;
   $24 = $23 + 4 | 0;
   $25 = SAFE_HEAP_LOAD($24 | 0, 4, 0) | 0 | 0;
   $26 = SAFE_HEAP_LOAD(2 * 4 | 0, 4, 0) | 0 | 0;
   $27 = $26 + 16 | 0;
   $28 = SAFE_HEAP_LOAD($27 | 0, 4, 0) | 0 | 0;
   $29 = FUNCTION_TABLE_iiii[(SAFE_FT_MASK($28 | 0, 15 | 0) | 0) & 15](8, $23, $0) | 0;
   if ($29) {
    $30 = SAFE_HEAP_LOAD($0 | 0, 4, 0) | 0 | 0;
    $31 = SAFE_HEAP_LOAD($30 | 0, 4, 0) | 0 | 0;
    $32 = $31 + 8 | 0;
    $33 = SAFE_HEAP_LOAD($32 | 0, 4, 0) | 0 | 0;
    $34 = FUNCTION_TABLE_ii[(SAFE_FT_MASK($33 | 0, 127 | 0) | 0) & 127]($30) | 0;
    SAFE_HEAP_STORE($vararg_buffer | 0, 5148 | 0, 4);
    $vararg_ptr1 = $vararg_buffer + 4 | 0;
    SAFE_HEAP_STORE($vararg_ptr1 | 0, $25 | 0, 4);
    $vararg_ptr2 = $vararg_buffer + 8 | 0;
    SAFE_HEAP_STORE($vararg_ptr2 | 0, $34 | 0, 4);
    _abort_message(5012, $vararg_buffer);
   } else {
    SAFE_HEAP_STORE($vararg_buffer3 | 0, 5148 | 0, 4);
    $vararg_ptr6 = $vararg_buffer3 + 4 | 0;
    SAFE_HEAP_STORE($vararg_ptr6 | 0, $25 | 0, 4);
    _abort_message(5057, $vararg_buffer3);
   }
  }
 }
 _abort_message(5136, $vararg_buffer10);
}

function __ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13MatrixWrapperIKNS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESA_EEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80 | 0);
 $6 = sp + 32 | 0;
 $9 = sp + 16 | 0;
 $10 = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $11 = $4;
 __ZN5Eigen8internal9evaluatorINS_13MatrixWrapperIKNS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES8_EEEEEC2ERKSB_($6, $11);
 $12 = $3;
 $13 = $4;
 $14 = $5;
 __THREW__ = 0;
 invoke_viii(103, $12 | 0, $13 | 0, $14 | 0);
 $15 = __THREW__;
 __THREW__ = 0;
 $16 = $15 & 1;
 if (!$16) {
  $17 = $3;
  __THREW__ = 0;
  invoke_vii(91, $9 | 0, $17 | 0);
  $18 = __THREW__;
  __THREW__ = 0;
  $19 = $18 & 1;
  if (!$19) {
   $20 = $5;
   $21 = $3;
   __THREW__ = 0;
   $22 = invoke_ii(92, $21 | 0) | 0;
   $23 = __THREW__;
   __THREW__ = 0;
   $24 = $23 & 1;
   if (!$24) {
    __THREW__ = 0;
    invoke_viiiii(104, $10 | 0, $9 | 0, $6 | 0, $20 | 0, $22 | 0);
    $25 = __THREW__;
    __THREW__ = 0;
    $26 = $25 & 1;
    if (!$26) {
     __THREW__ = 0;
     invoke_vi(105, $10 | 0);
     $27 = __THREW__;
     __THREW__ = 0;
     $28 = $27 & 1;
     if (!$28) {
      __ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED2Ev($9);
      __ZN5Eigen8internal9evaluatorINS_13MatrixWrapperIKNS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES8_EEEEED2Ev($6);
      STACKTOP = sp;
      return;
     }
    }
   }
   $31 = ___cxa_find_matching_catch_2() | 0;
   $32 = tempRet0;
   $7 = $31;
   $8 = $32;
   __ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED2Ev($9);
   __ZN5Eigen8internal9evaluatorINS_13MatrixWrapperIKNS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES8_EEEEED2Ev($6);
   $33 = $7;
   $34 = $8;
   ___resumeException($33 | 0);
  }
 }
 $29 = ___cxa_find_matching_catch_2() | 0;
 $30 = tempRet0;
 $7 = $29;
 $8 = $30;
 __ZN5Eigen8internal9evaluatorINS_13MatrixWrapperIKNS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES8_EEEEED2Ev($6);
 $33 = $7;
 $34 = $8;
 ___resumeException($33 | 0);
}

function __ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffEC2ERKSD_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $2 = $0;
 $3 = $1;
 $6 = $2;
 __ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEEC2Ev($6);
 $7 = $3;
 __THREW__ = 0;
 $8 = invoke_ii(116, $7 | 0) | 0;
 $9 = __THREW__;
 __THREW__ = 0;
 $10 = $9 & 1;
 if (!$10) {
  __THREW__ = 0;
  invoke_vii(117, $6 | 0, $8 | 0);
  $11 = __THREW__;
  __THREW__ = 0;
  $12 = $11 & 1;
  if (!$12) {
   $13 = $6 + 4 | 0;
   $14 = $3;
   __THREW__ = 0;
   $15 = invoke_ii(118, $14 | 0) | 0;
   $16 = __THREW__;
   __THREW__ = 0;
   $17 = $16 & 1;
   if (!$17) {
    __THREW__ = 0;
    invoke_vii(88, $13 | 0, $15 | 0);
    $18 = __THREW__;
    __THREW__ = 0;
    $19 = $18 & 1;
    if (!$19) {
     $20 = $6 + 12 | 0;
     $21 = $3;
     __THREW__ = 0;
     $22 = invoke_ii(119, $21 | 0) | 0;
     $23 = __THREW__;
     __THREW__ = 0;
     $24 = $23 & 1;
     if (!$24) {
      __THREW__ = 0;
      invoke_vii(120, $20 | 0, $22 | 0);
      $25 = __THREW__;
      __THREW__ = 0;
      $26 = $25 & 1;
      if (!$26) {
       STACKTOP = sp;
       return;
      }
     }
     $29 = ___cxa_find_matching_catch_2() | 0;
     $30 = tempRet0;
     $4 = $29;
     $5 = $30;
     __ZN5Eigen8internal9evaluatorIKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEED2Ev($13);
     __ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEED2Ev($6);
     $31 = $4;
     $32 = $5;
     ___resumeException($31 | 0);
    }
   }
  }
 }
 $27 = ___cxa_find_matching_catch_2() | 0;
 $28 = tempRet0;
 $4 = $27;
 $5 = $28;
 __ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEED2Ev($6);
 $31 = $4;
 $32 = $5;
 ___resumeException($31 | 0);
}

function ___fwritex($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$038 = 0, $$042 = 0, $$1 = 0, $$139 = 0, $$141 = 0, $$143 = 0, $$pre = 0, $$pre47 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $2 + 16 | 0;
 $4 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0;
 $5 = ($4 | 0) == (0 | 0);
 if ($5) {
  $7 = ___towrite($2) | 0;
  $8 = ($7 | 0) == 0;
  if ($8) {
   $$pre = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0;
   $12 = $$pre;
   label = 5;
  } else {
   $$1 = 0;
  }
 } else {
  $6 = $4;
  $12 = $6;
  label = 5;
 }
 L5 : do {
  if ((label | 0) == 5) {
   $9 = $2 + 20 | 0;
   $10 = SAFE_HEAP_LOAD($9 | 0, 4, 0) | 0 | 0;
   $11 = $12 - $10 | 0;
   $13 = $11 >>> 0 < $1 >>> 0;
   $14 = $10;
   if ($13) {
    $15 = $2 + 36 | 0;
    $16 = SAFE_HEAP_LOAD($15 | 0, 4, 0) | 0 | 0;
    $17 = FUNCTION_TABLE_iiii[(SAFE_FT_MASK($16 | 0, 15 | 0) | 0) & 15]($2, $0, $1) | 0;
    $$1 = $17;
    break;
   }
   $18 = $2 + 75 | 0;
   $19 = SAFE_HEAP_LOAD($18 >> 0 | 0, 1, 0) | 0 | 0;
   $20 = $19 << 24 >> 24 > -1;
   L10 : do {
    if ($20) {
     $$038 = $1;
     while (1) {
      $21 = ($$038 | 0) == 0;
      if ($21) {
       $$139 = 0;
       $$141 = $0;
       $$143 = $1;
       $31 = $14;
       break L10;
      }
      $22 = $$038 + -1 | 0;
      $23 = $0 + $22 | 0;
      $24 = SAFE_HEAP_LOAD($23 >> 0 | 0, 1, 0) | 0 | 0;
      $25 = $24 << 24 >> 24 == 10;
      if ($25) {
       break;
      } else {
       $$038 = $22;
      }
     }
     $26 = $2 + 36 | 0;
     $27 = SAFE_HEAP_LOAD($26 | 0, 4, 0) | 0 | 0;
     $28 = FUNCTION_TABLE_iiii[(SAFE_FT_MASK($27 | 0, 15 | 0) | 0) & 15]($2, $0, $$038) | 0;
     $29 = $28 >>> 0 < $$038 >>> 0;
     if ($29) {
      $$1 = $28;
      break L5;
     }
     $30 = $0 + $$038 | 0;
     $$042 = $1 - $$038 | 0;
     $$pre47 = SAFE_HEAP_LOAD($9 | 0, 4, 0) | 0 | 0;
     $$139 = $$038;
     $$141 = $30;
     $$143 = $$042;
     $31 = $$pre47;
    } else {
     $$139 = 0;
     $$141 = $0;
     $$143 = $1;
     $31 = $14;
    }
   } while (0);
   _memcpy($31 | 0, $$141 | 0, $$143 | 0) | 0;
   $32 = SAFE_HEAP_LOAD($9 | 0, 4, 0) | 0 | 0;
   $33 = $32 + $$143 | 0;
   SAFE_HEAP_STORE($9 | 0, $33 | 0, 4);
   $34 = $$139 + $$143 | 0;
   $$1 = $34;
  }
 } while (0);
 return $$1 | 0;
}

function __ZNSt3__213__vector_baseIN5Eigen5ArrayIjLi3ELi1ELi0ELi3ELi1EEENS_9allocatorIS3_EEED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128 | 0);
 $19 = sp;
 $22 = sp + 116 | 0;
 $30 = $0;
 $31 = $30;
 $32 = SAFE_HEAP_LOAD($31 | 0, 4, 0) | 0 | 0;
 $33 = ($32 | 0) != (0 | 0);
 if (!$33) {
  STACKTOP = sp;
  return;
 }
 $29 = $31;
 $34 = $29;
 $35 = SAFE_HEAP_LOAD($34 | 0, 4, 0) | 0 | 0;
 $27 = $34;
 $28 = $35;
 $36 = $27;
 while (1) {
  $37 = $28;
  $38 = $36 + 4 | 0;
  $39 = SAFE_HEAP_LOAD($38 | 0, 4, 0) | 0 | 0;
  $40 = ($37 | 0) != ($39 | 0);
  if (!$40) {
   break;
  }
  $26 = $36;
  $41 = $26;
  $42 = $41 + 8 | 0;
  $25 = $42;
  $43 = $25;
  $24 = $43;
  $44 = $24;
  $45 = $36 + 4 | 0;
  $46 = SAFE_HEAP_LOAD($45 | 0, 4, 0) | 0 | 0;
  $47 = $46 + -12 | 0;
  SAFE_HEAP_STORE($45 | 0, $47 | 0, 4);
  $23 = $47;
  $48 = $23;
  $20 = $44;
  $21 = $48;
  $49 = $20;
  $50 = $21;
  {}
  SAFE_HEAP_STORE($19 >> 0 | 0, SAFE_HEAP_LOAD($22 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
  $17 = $49;
  $18 = $50;
  $51 = $17;
  $52 = $18;
  $15 = $51;
  $16 = $52;
 }
 $7 = $31;
 $53 = $7;
 $54 = $53 + 8 | 0;
 $6 = $54;
 $55 = $6;
 $5 = $55;
 $56 = $5;
 $57 = SAFE_HEAP_LOAD($31 | 0, 4, 0) | 0 | 0;
 $4 = $31;
 $58 = $4;
 $3 = $58;
 $59 = $3;
 $60 = $59 + 8 | 0;
 $2 = $60;
 $61 = $2;
 $1 = $61;
 $62 = $1;
 $63 = SAFE_HEAP_LOAD($62 | 0, 4, 0) | 0 | 0;
 $64 = SAFE_HEAP_LOAD($58 | 0, 4, 0) | 0 | 0;
 $65 = $63;
 $66 = $64;
 $67 = $65 - $66 | 0;
 $68 = ($67 | 0) / 12 & -1;
 $12 = $56;
 $13 = $57;
 $14 = $68;
 $69 = $12;
 $70 = $13;
 $71 = $14;
 $9 = $69;
 $10 = $70;
 $11 = $71;
 $72 = $10;
 $8 = $72;
 $73 = $8;
 __ZdlPv($73);
 STACKTOP = sp;
 return;
}

function __ZNSt3__213__vector_baseIN5Eigen5ArrayIfLi3ELi1ELi0ELi3ELi1EEENS_9allocatorIS3_EEED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128 | 0);
 $19 = sp;
 $22 = sp + 116 | 0;
 $30 = $0;
 $31 = $30;
 $32 = SAFE_HEAP_LOAD($31 | 0, 4, 0) | 0 | 0;
 $33 = ($32 | 0) != (0 | 0);
 if (!$33) {
  STACKTOP = sp;
  return;
 }
 $29 = $31;
 $34 = $29;
 $35 = SAFE_HEAP_LOAD($34 | 0, 4, 0) | 0 | 0;
 $27 = $34;
 $28 = $35;
 $36 = $27;
 while (1) {
  $37 = $28;
  $38 = $36 + 4 | 0;
  $39 = SAFE_HEAP_LOAD($38 | 0, 4, 0) | 0 | 0;
  $40 = ($37 | 0) != ($39 | 0);
  if (!$40) {
   break;
  }
  $26 = $36;
  $41 = $26;
  $42 = $41 + 8 | 0;
  $25 = $42;
  $43 = $25;
  $24 = $43;
  $44 = $24;
  $45 = $36 + 4 | 0;
  $46 = SAFE_HEAP_LOAD($45 | 0, 4, 0) | 0 | 0;
  $47 = $46 + -12 | 0;
  SAFE_HEAP_STORE($45 | 0, $47 | 0, 4);
  $23 = $47;
  $48 = $23;
  $20 = $44;
  $21 = $48;
  $49 = $20;
  $50 = $21;
  {}
  SAFE_HEAP_STORE($19 >> 0 | 0, SAFE_HEAP_LOAD($22 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
  $17 = $49;
  $18 = $50;
  $51 = $17;
  $52 = $18;
  $15 = $51;
  $16 = $52;
 }
 $7 = $31;
 $53 = $7;
 $54 = $53 + 8 | 0;
 $6 = $54;
 $55 = $6;
 $5 = $55;
 $56 = $5;
 $57 = SAFE_HEAP_LOAD($31 | 0, 4, 0) | 0 | 0;
 $4 = $31;
 $58 = $4;
 $3 = $58;
 $59 = $3;
 $60 = $59 + 8 | 0;
 $2 = $60;
 $61 = $2;
 $1 = $61;
 $62 = $1;
 $63 = SAFE_HEAP_LOAD($62 | 0, 4, 0) | 0 | 0;
 $64 = SAFE_HEAP_LOAD($58 | 0, 4, 0) | 0 | 0;
 $65 = $63;
 $66 = $64;
 $67 = $65 - $66 | 0;
 $68 = ($67 | 0) / 12 & -1;
 $12 = $56;
 $13 = $57;
 $14 = $68;
 $69 = $12;
 $70 = $13;
 $71 = $14;
 $9 = $69;
 $10 = $70;
 $11 = $71;
 $72 = $10;
 $8 = $72;
 $73 = $8;
 __ZdlPv($73);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_18scalar_quotient_opIffEEKNS_13MatrixWrapperIKNS4_INS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESC_EEEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKS3_EEEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = $4;
 $9 = __ZNK5Eigen13CwiseBinaryOpINS_8internal18scalar_quotient_opIffEEKNS_13MatrixWrapperIKNS0_INS1_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES9_EEEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE4rowsEv($8) | 0;
 $6 = $9;
 $10 = $4;
 $11 = __ZNK5Eigen13CwiseBinaryOpINS_8internal18scalar_quotient_opIffEEKNS_13MatrixWrapperIKNS0_INS1_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES9_EEEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE4colsEv($10) | 0;
 $7 = $11;
 $12 = $3;
 $13 = __ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv($12) | 0;
 $14 = $6;
 $15 = ($13 | 0) != ($14 | 0);
 if ($15) {
  label = 3;
 } else {
  $16 = $3;
  $17 = __ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv($16) | 0;
  $18 = $7;
  $19 = ($17 | 0) != ($18 | 0);
  if ($19) {
   label = 3;
  }
 }
 if ((label | 0) == 3) {
  $20 = $3;
  $21 = $6;
  $22 = $7;
  __ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii($20, $21, $22);
 }
 $23 = $3;
 $24 = __ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv($23) | 0;
 $25 = $6;
 $26 = ($24 | 0) == ($25 | 0);
 if (!$26) {
  ___assert_fail(1086 | 0, 1133 | 0, 721, 1239 | 0);
 }
 $27 = $3;
 $28 = __ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv($27) | 0;
 $29 = $7;
 $30 = ($28 | 0) == ($29 | 0);
 if ($30) {
  STACKTOP = sp;
  return;
 } else {
  ___assert_fail(1086 | 0, 1133 | 0, 721, 1239 | 0);
 }
}

function __ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES7_EENS0_10IndexBasedES9_ffEC2ERKS8_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $2 = $0;
 $3 = $1;
 $6 = $2;
 __ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES7_EEEC2Ev($6);
 $7 = $3;
 __THREW__ = 0;
 $8 = invoke_ii(85, $7 | 0) | 0;
 $9 = __THREW__;
 __THREW__ = 0;
 $10 = $9 & 1;
 if (!$10) {
  __THREW__ = 0;
  invoke_vii(86, $6 | 0, $8 | 0);
  $11 = __THREW__;
  __THREW__ = 0;
  $12 = $11 & 1;
  if (!$12) {
   $13 = $6 + 4 | 0;
   $14 = $3;
   __THREW__ = 0;
   $15 = invoke_ii(87, $14 | 0) | 0;
   $16 = __THREW__;
   __THREW__ = 0;
   $17 = $16 & 1;
   if (!$17) {
    __THREW__ = 0;
    invoke_vii(88, $13 | 0, $15 | 0);
    $18 = __THREW__;
    __THREW__ = 0;
    $19 = $18 & 1;
    if (!$19) {
     $20 = $6 + 12 | 0;
     $21 = $3;
     __THREW__ = 0;
     $22 = invoke_ii(89, $21 | 0) | 0;
     $23 = __THREW__;
     __THREW__ = 0;
     $24 = $23 & 1;
     if (!$24) {
      __THREW__ = 0;
      invoke_vii(88, $20 | 0, $22 | 0);
      $25 = __THREW__;
      __THREW__ = 0;
      $26 = $25 & 1;
      if (!$26) {
       STACKTOP = sp;
       return;
      }
     }
     $29 = ___cxa_find_matching_catch_2() | 0;
     $30 = tempRet0;
     $4 = $29;
     $5 = $30;
     __ZN5Eigen8internal9evaluatorIKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEED2Ev($13);
     __ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES7_EEED2Ev($6);
     $31 = $4;
     $32 = $5;
     ___resumeException($31 | 0);
    }
   }
  }
 }
 $27 = ___cxa_find_matching_catch_2() | 0;
 $28 = tempRet0;
 $4 = $27;
 $5 = $28;
 __ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES7_EEED2Ev($6);
 $31 = $4;
 $32 = $5;
 ___resumeException($31 | 0);
}

function __ZNK5Eigen9DenseBaseINS_12CwiseUnaryOpINS_8internal14scalar_abs2_opIfEEKNS_13MatrixWrapperIKNS_13CwiseBinaryOpINS2_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESB_EEEEEEE5reduxIS8_EEfRKT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48 | 0);
 $4 = sp + 8 | 0;
 $2 = $0;
 $3 = $1;
 $7 = $2;
 $8 = __ZNK5Eigen9EigenBaseINS_12CwiseUnaryOpINS_8internal14scalar_abs2_opIfEEKNS_13MatrixWrapperIKNS_13CwiseBinaryOpINS2_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESB_EEEEEEE4rowsEv($7) | 0;
 $9 = ($8 | 0) > 0;
 if (!$9) {
  ___assert_fail(2090 | 0, 2158 | 0, 413, 2254 | 0);
 }
 $10 = __ZNK5Eigen9EigenBaseINS_12CwiseUnaryOpINS_8internal14scalar_abs2_opIfEEKNS_13MatrixWrapperIKNS_13CwiseBinaryOpINS2_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESB_EEEEEEE4colsEv($7) | 0;
 $11 = ($10 | 0) > 0;
 if (!$11) {
  ___assert_fail(2090 | 0, 2158 | 0, 413, 2254 | 0);
 }
 $12 = __ZNK5Eigen9EigenBaseINS_12CwiseUnaryOpINS_8internal14scalar_abs2_opIfEEKNS_13MatrixWrapperIKNS_13CwiseBinaryOpINS2_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESB_EEEEEEE7derivedEv($7) | 0;
 __ZN5Eigen8internal15redux_evaluatorINS_12CwiseUnaryOpINS0_14scalar_abs2_opIfEEKNS_13MatrixWrapperIKNS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESB_EEEEEEEC2ERKSG_($4, $12);
 $13 = $3;
 __THREW__ = 0;
 $14 = +invoke_dii(79, $4 | 0, $13 | 0);
 $15 = __THREW__;
 __THREW__ = 0;
 $16 = $15 & 1;
 if ($16) {
  $17 = ___cxa_find_matching_catch_2() | 0;
  $18 = tempRet0;
  $5 = $17;
  $6 = $18;
  __ZN5Eigen8internal15redux_evaluatorINS_12CwiseUnaryOpINS0_14scalar_abs2_opIfEEKNS_13MatrixWrapperIKNS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESB_EEEEEEED2Ev($4);
  $19 = $5;
  $20 = $6;
  ___resumeException($19 | 0);
 } else {
  __ZN5Eigen8internal15redux_evaluatorINS_12CwiseUnaryOpINS0_14scalar_abs2_opIfEEKNS_13MatrixWrapperIKNS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESB_EEEEEEED2Ev($4);
  STACKTOP = sp;
  return +$14;
 }
 return +(0.0);
}

function __ZN5Eigen8internal26call_dense_assignment_loopINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEENS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64 | 0);
 $6 = sp + 32 | 0;
 $9 = sp + 16 | 0;
 $10 = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $11 = $4;
 __ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC2ERKS3_($6, $11);
 $12 = $3;
 $13 = $4;
 $14 = $5;
 __THREW__ = 0;
 invoke_viii(106, $12 | 0, $13 | 0, $14 | 0);
 $15 = __THREW__;
 __THREW__ = 0;
 $16 = $15 & 1;
 if (!$16) {
  $17 = $3;
  __THREW__ = 0;
  invoke_vii(73, $9 | 0, $17 | 0);
  $18 = __THREW__;
  __THREW__ = 0;
  $19 = $18 & 1;
  if (!$19) {
   $20 = $5;
   $21 = $3;
   __THREW__ = 0;
   $22 = invoke_ii(74, $21 | 0) | 0;
   $23 = __THREW__;
   __THREW__ = 0;
   $24 = $23 & 1;
   if (!$24) {
    __THREW__ = 0;
    invoke_viiiii(107, $10 | 0, $9 | 0, $6 | 0, $20 | 0, $22 | 0);
    $25 = __THREW__;
    __THREW__ = 0;
    $26 = $25 & 1;
    if (!$26) {
     __THREW__ = 0;
     invoke_vi(108, $10 | 0);
     $27 = __THREW__;
     __THREW__ = 0;
     $28 = $27 & 1;
     if (!$28) {
      __ZN5Eigen8internal9evaluatorINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEED2Ev($9);
      __ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED2Ev($6);
      STACKTOP = sp;
      return;
     }
    }
   }
   $31 = ___cxa_find_matching_catch_2() | 0;
   $32 = tempRet0;
   $7 = $31;
   $8 = $32;
   __ZN5Eigen8internal9evaluatorINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEED2Ev($9);
   __ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED2Ev($6);
   $33 = $7;
   $34 = $8;
   ___resumeException($33 | 0);
  }
 }
 $29 = ___cxa_find_matching_catch_2() | 0;
 $30 = tempRet0;
 $7 = $29;
 $8 = $30;
 __ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED2Ev($6);
 $33 = $7;
 $34 = $8;
 ___resumeException($33 | 0);
}

function __ZN5Eigen8internal26call_dense_assignment_loopINS_5ArrayIjLi3ELi1ELi0ELi3ELi1EEES3_NS0_9assign_opIjjEEEEvRT_RKT0_RKT1_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64 | 0);
 $6 = sp + 32 | 0;
 $9 = sp + 16 | 0;
 $10 = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $11 = $4;
 __ZN5Eigen8internal9evaluatorINS_5ArrayIjLi3ELi1ELi0ELi3ELi1EEEEC2ERKS3_($6, $11);
 $12 = $3;
 $13 = $4;
 $14 = $5;
 __THREW__ = 0;
 invoke_viii(61, $12 | 0, $13 | 0, $14 | 0);
 $15 = __THREW__;
 __THREW__ = 0;
 $16 = $15 & 1;
 if (!$16) {
  $17 = $3;
  __THREW__ = 0;
  invoke_vii(62, $9 | 0, $17 | 0);
  $18 = __THREW__;
  __THREW__ = 0;
  $19 = $18 & 1;
  if (!$19) {
   $20 = $5;
   $21 = $3;
   __THREW__ = 0;
   $22 = invoke_ii(63, $21 | 0) | 0;
   $23 = __THREW__;
   __THREW__ = 0;
   $24 = $23 & 1;
   if (!$24) {
    __THREW__ = 0;
    invoke_viiiii(64, $10 | 0, $9 | 0, $6 | 0, $20 | 0, $22 | 0);
    $25 = __THREW__;
    __THREW__ = 0;
    $26 = $25 & 1;
    if (!$26) {
     __THREW__ = 0;
     invoke_vi(65, $10 | 0);
     $27 = __THREW__;
     __THREW__ = 0;
     $28 = $27 & 1;
     if (!$28) {
      __ZN5Eigen8internal9evaluatorINS_5ArrayIjLi3ELi1ELi0ELi3ELi1EEEED2Ev($9);
      __ZN5Eigen8internal9evaluatorINS_5ArrayIjLi3ELi1ELi0ELi3ELi1EEEED2Ev($6);
      STACKTOP = sp;
      return;
     }
    }
   }
   $31 = ___cxa_find_matching_catch_2() | 0;
   $32 = tempRet0;
   $7 = $31;
   $8 = $32;
   __ZN5Eigen8internal9evaluatorINS_5ArrayIjLi3ELi1ELi0ELi3ELi1EEEED2Ev($9);
   __ZN5Eigen8internal9evaluatorINS_5ArrayIjLi3ELi1ELi0ELi3ELi1EEEED2Ev($6);
   $33 = $7;
   $34 = $8;
   ___resumeException($33 | 0);
  }
 }
 $29 = ___cxa_find_matching_catch_2() | 0;
 $30 = tempRet0;
 $7 = $29;
 $8 = $30;
 __ZN5Eigen8internal9evaluatorINS_5ArrayIjLi3ELi1ELi0ELi3ELi1EEEED2Ev($6);
 $33 = $7;
 $34 = $8;
 ___resumeException($33 | 0);
}

function __ZN5Eigen8internal26call_dense_assignment_loopINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64 | 0);
 $6 = sp + 32 | 0;
 $9 = sp + 16 | 0;
 $10 = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $11 = $4;
 __ZN5Eigen8internal9evaluatorINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEC2ERKS3_($6, $11);
 $12 = $3;
 $13 = $4;
 $14 = $5;
 __THREW__ = 0;
 invoke_viii(72, $12 | 0, $13 | 0, $14 | 0);
 $15 = __THREW__;
 __THREW__ = 0;
 $16 = $15 & 1;
 if (!$16) {
  $17 = $3;
  __THREW__ = 0;
  invoke_vii(73, $9 | 0, $17 | 0);
  $18 = __THREW__;
  __THREW__ = 0;
  $19 = $18 & 1;
  if (!$19) {
   $20 = $5;
   $21 = $3;
   __THREW__ = 0;
   $22 = invoke_ii(74, $21 | 0) | 0;
   $23 = __THREW__;
   __THREW__ = 0;
   $24 = $23 & 1;
   if (!$24) {
    __THREW__ = 0;
    invoke_viiiii(75, $10 | 0, $9 | 0, $6 | 0, $20 | 0, $22 | 0);
    $25 = __THREW__;
    __THREW__ = 0;
    $26 = $25 & 1;
    if (!$26) {
     __THREW__ = 0;
     invoke_vi(76, $10 | 0);
     $27 = __THREW__;
     __THREW__ = 0;
     $28 = $27 & 1;
     if (!$28) {
      __ZN5Eigen8internal9evaluatorINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEED2Ev($9);
      __ZN5Eigen8internal9evaluatorINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEED2Ev($6);
      STACKTOP = sp;
      return;
     }
    }
   }
   $31 = ___cxa_find_matching_catch_2() | 0;
   $32 = tempRet0;
   $7 = $31;
   $8 = $32;
   __ZN5Eigen8internal9evaluatorINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEED2Ev($9);
   __ZN5Eigen8internal9evaluatorINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEED2Ev($6);
   $33 = $7;
   $34 = $8;
   ___resumeException($33 | 0);
  }
 }
 $29 = ___cxa_find_matching_catch_2() | 0;
 $30 = tempRet0;
 $7 = $29;
 $8 = $30;
 __ZN5Eigen8internal9evaluatorINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEED2Ev($6);
 $33 = $7;
 $34 = $8;
 ___resumeException($33 | 0);
}

function __ZN5Eigen13CwiseBinaryOpINS_8internal18scalar_quotient_opIffEEKNS_13MatrixWrapperIKNS0_INS1_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES9_EEEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC2ERSD_RSL_RKS3_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $4;
 __ZN5Eigen17CwiseBinaryOpImplINS_8internal18scalar_quotient_opIffEEKNS_13MatrixWrapperIKNS_13CwiseBinaryOpINS1_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESA_EEEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS_5DenseEEC2Ev($8);
 $9 = $8 + 4 | 0;
 $10 = $5;
 __ZN5Eigen13MatrixWrapperIKNS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES7_EEEC2ERKSA_($9, $10);
 $11 = $8 + 16 | 0;
 $12 = $6;
 __ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC2ERKS7_($11, $12);
 $13 = $8 + 24 | 0;
 $14 = $7;
 __ZN5Eigen8internal18scalar_quotient_opIffEC2ERKS2_($13, $14);
 $15 = $5;
 $16 = __ZNK5Eigen13MatrixWrapperIKNS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES7_EEE4rowsEv($15) | 0;
 $17 = $6;
 $18 = __ZNK5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv($17) | 0;
 $19 = ($16 | 0) == ($18 | 0);
 if (!$19) {
  ___assert_fail(1915 | 0, 1972 | 0, 110, 2076 | 0);
 }
 $20 = $5;
 $21 = __ZNK5Eigen13MatrixWrapperIKNS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES7_EEE4colsEv($20) | 0;
 $22 = $6;
 $23 = __ZNK5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv($22) | 0;
 $24 = ($21 | 0) == ($23 | 0);
 if ($24) {
  STACKTOP = sp;
  return;
 } else {
  ___assert_fail(1915 | 0, 1972 | 0, 110, 2076 | 0);
 }
}

function __ZNK5Eigen10MatrixBaseINS_13MatrixWrapperIKNS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES8_EEEEE10normalizedEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $2 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64 | 0);
 $5 = sp + 36 | 0;
 $6 = sp + 32 | 0;
 $7 = sp + 4 | 0;
 $8 = sp;
 $4 = $1;
 $9 = $4;
 $10 = __ZNK5Eigen9EigenBaseINS_13MatrixWrapperIKNS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES8_EEEEE7derivedEv($9) | 0;
 __ZN5Eigen13MatrixWrapperIKNS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES7_EEEC2ERKSA_($5, $10);
 $11 = +__ZNK5Eigen10MatrixBaseINS_13MatrixWrapperIKNS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES8_EEEEE11squaredNormEv($5);
 SAFE_HEAP_STORE_D($6 | 0, +$11, 4);
 $12 = +(+SAFE_HEAP_LOAD_D($6 | 0, 4));
 $13 = $12 > 0.0;
 if ($13) {
  $3 = $6;
  $14 = $3;
  $15 = +(+SAFE_HEAP_LOAD_D($14 | 0, 4));
  $2 = $15;
  $16 = $2;
  $17 = +Math_sqrt(+$16);
  SAFE_HEAP_STORE_D($8 | 0, +$17, 4);
  __ZNK5Eigen10MatrixBaseINS_13MatrixWrapperIKNS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES8_EEEEEdvIfEENS3_9enable_ifILb1EKNS2_INS3_18scalar_quotient_opIfNS3_18promote_scalar_argIfT_Xsr5Eigen8internal14has_ReturnTypeINS_20ScalarBinaryOpTraitsIfSH_NSF_IfSH_EEEEEE5valueEE4typeEEEKSB_KNS3_19plain_constant_typeISB_SM_E4typeEEEE4typeERKSH_($7, $5, $8);
  __ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC2INS_13CwiseBinaryOpINS_8internal18scalar_quotient_opIffEEKNS_13MatrixWrapperIKNS3_INS4_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESC_EEEEKNS_14CwiseNullaryOpINS4_18scalar_constant_opIfEEKS1_EEEEEERKNS_9EigenBaseIT_EE($0, $7);
  STACKTOP = sp;
  return;
 } else {
  __ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC2INS_13MatrixWrapperIKNS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESA_EEEEEERKNS_9EigenBaseIT_EE($0, $5);
  STACKTOP = sp;
  return;
 }
}

function __ZNSt3__26vectorIN5Eigen5ArrayIjLi3ELi1ELi0ELi3ELi1EEENS_9allocatorIS3_EEE18__construct_at_endIPKS3_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESB_SB_j($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128 | 0);
 $15 = sp;
 $20 = sp + 121 | 0;
 $35 = sp + 120 | 0;
 $30 = $0;
 $31 = $1;
 $32 = $2;
 $33 = $3;
 $36 = $30;
 $29 = $36;
 $37 = $29;
 $38 = $37 + 8 | 0;
 $28 = $38;
 $39 = $28;
 $27 = $39;
 $40 = $27;
 $34 = $40;
 $41 = $33;
 $4 = $35;
 $5 = $36;
 $6 = $41;
 $42 = $34;
 $43 = $31;
 $44 = $32;
 $45 = $36 + 4 | 0;
 $22 = $42;
 $23 = $43;
 $24 = $44;
 $25 = $45;
 while (1) {
  $46 = $23;
  $47 = $24;
  $48 = ($46 | 0) != ($47 | 0);
  if (!$48) {
   break;
  }
  $49 = $22;
  $50 = $25;
  $51 = SAFE_HEAP_LOAD($50 | 0, 4, 0) | 0 | 0;
  $21 = $51;
  $52 = $21;
  $53 = $23;
  $17 = $49;
  $18 = $52;
  $19 = $53;
  $54 = $17;
  $55 = $18;
  $56 = $19;
  $16 = $56;
  $57 = $16;
  {}
  SAFE_HEAP_STORE($15 >> 0 | 0, SAFE_HEAP_LOAD($20 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
  $12 = $54;
  $13 = $55;
  $14 = $57;
  $58 = $12;
  $59 = $13;
  $60 = $14;
  $11 = $60;
  $61 = $11;
  $8 = $58;
  $9 = $59;
  $10 = $61;
  $62 = $9;
  $63 = $10;
  $7 = $63;
  $64 = $7;
  __ZN5Eigen5ArrayIjLi3ELi1ELi0ELi3ELi1EEC2ERKS1_($62, $64);
  $65 = $23;
  $66 = $65 + 12 | 0;
  $23 = $66;
  $67 = $25;
  $68 = SAFE_HEAP_LOAD($67 | 0, 4, 0) | 0 | 0;
  $69 = $68 + 12 | 0;
  SAFE_HEAP_STORE($67 | 0, $69 | 0, 4);
 }
 $26 = $35;
 STACKTOP = sp;
 return;
}

function __ZNSt3__26vectorIN5Eigen5ArrayIfLi3ELi1ELi0ELi3ELi1EEENS_9allocatorIS3_EEE18__construct_at_endIPKS3_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESB_SB_j($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128 | 0);
 $15 = sp;
 $20 = sp + 121 | 0;
 $35 = sp + 120 | 0;
 $30 = $0;
 $31 = $1;
 $32 = $2;
 $33 = $3;
 $36 = $30;
 $29 = $36;
 $37 = $29;
 $38 = $37 + 8 | 0;
 $28 = $38;
 $39 = $28;
 $27 = $39;
 $40 = $27;
 $34 = $40;
 $41 = $33;
 $4 = $35;
 $5 = $36;
 $6 = $41;
 $42 = $34;
 $43 = $31;
 $44 = $32;
 $45 = $36 + 4 | 0;
 $22 = $42;
 $23 = $43;
 $24 = $44;
 $25 = $45;
 while (1) {
  $46 = $23;
  $47 = $24;
  $48 = ($46 | 0) != ($47 | 0);
  if (!$48) {
   break;
  }
  $49 = $22;
  $50 = $25;
  $51 = SAFE_HEAP_LOAD($50 | 0, 4, 0) | 0 | 0;
  $21 = $51;
  $52 = $21;
  $53 = $23;
  $17 = $49;
  $18 = $52;
  $19 = $53;
  $54 = $17;
  $55 = $18;
  $56 = $19;
  $16 = $56;
  $57 = $16;
  {}
  SAFE_HEAP_STORE($15 >> 0 | 0, SAFE_HEAP_LOAD($20 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
  $12 = $54;
  $13 = $55;
  $14 = $57;
  $58 = $12;
  $59 = $13;
  $60 = $14;
  $11 = $60;
  $61 = $11;
  $8 = $58;
  $9 = $59;
  $10 = $61;
  $62 = $9;
  $63 = $10;
  $7 = $63;
  $64 = $7;
  __ZN5Eigen5ArrayIfLi3ELi1ELi0ELi3ELi1EEC2ERKS1_($62, $64);
  $65 = $23;
  $66 = $65 + 12 | 0;
  $23 = $66;
  $67 = $25;
  $68 = SAFE_HEAP_LOAD($67 | 0, 4, 0) | 0 | 0;
  $69 = $68 + 12 | 0;
  SAFE_HEAP_STORE($67 | 0, $69 | 0, 4);
 }
 $26 = $35;
 STACKTOP = sp;
 return;
}

function __ZNSt3__26vectorIN5Eigen5ArrayIjLi3ELi1ELi0ELi3ELi1EEENS_9allocatorIS3_EEE18__construct_at_endIPS3_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_j($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128 | 0);
 $15 = sp;
 $20 = sp + 121 | 0;
 $35 = sp + 120 | 0;
 $30 = $0;
 $31 = $1;
 $32 = $2;
 $33 = $3;
 $36 = $30;
 $29 = $36;
 $37 = $29;
 $38 = $37 + 8 | 0;
 $28 = $38;
 $39 = $28;
 $27 = $39;
 $40 = $27;
 $34 = $40;
 $41 = $33;
 $4 = $35;
 $5 = $36;
 $6 = $41;
 $42 = $34;
 $43 = $31;
 $44 = $32;
 $45 = $36 + 4 | 0;
 $22 = $42;
 $23 = $43;
 $24 = $44;
 $25 = $45;
 while (1) {
  $46 = $23;
  $47 = $24;
  $48 = ($46 | 0) != ($47 | 0);
  if (!$48) {
   break;
  }
  $49 = $22;
  $50 = $25;
  $51 = SAFE_HEAP_LOAD($50 | 0, 4, 0) | 0 | 0;
  $21 = $51;
  $52 = $21;
  $53 = $23;
  $17 = $49;
  $18 = $52;
  $19 = $53;
  $54 = $17;
  $55 = $18;
  $56 = $19;
  $16 = $56;
  $57 = $16;
  {}
  SAFE_HEAP_STORE($15 >> 0 | 0, SAFE_HEAP_LOAD($20 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
  $12 = $54;
  $13 = $55;
  $14 = $57;
  $58 = $12;
  $59 = $13;
  $60 = $14;
  $11 = $60;
  $61 = $11;
  $8 = $58;
  $9 = $59;
  $10 = $61;
  $62 = $9;
  $63 = $10;
  $7 = $63;
  $64 = $7;
  __ZN5Eigen5ArrayIjLi3ELi1ELi0ELi3ELi1EEC2ERKS1_($62, $64);
  $65 = $23;
  $66 = $65 + 12 | 0;
  $23 = $66;
  $67 = $25;
  $68 = SAFE_HEAP_LOAD($67 | 0, 4, 0) | 0 | 0;
  $69 = $68 + 12 | 0;
  SAFE_HEAP_STORE($67 | 0, $69 | 0, 4);
 }
 $26 = $35;
 STACKTOP = sp;
 return;
}

function __ZNSt3__26vectorIN5Eigen5ArrayIfLi3ELi1ELi0ELi3ELi1EEENS_9allocatorIS3_EEE18__construct_at_endIPS3_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_j($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128 | 0);
 $15 = sp;
 $20 = sp + 121 | 0;
 $35 = sp + 120 | 0;
 $30 = $0;
 $31 = $1;
 $32 = $2;
 $33 = $3;
 $36 = $30;
 $29 = $36;
 $37 = $29;
 $38 = $37 + 8 | 0;
 $28 = $38;
 $39 = $28;
 $27 = $39;
 $40 = $27;
 $34 = $40;
 $41 = $33;
 $4 = $35;
 $5 = $36;
 $6 = $41;
 $42 = $34;
 $43 = $31;
 $44 = $32;
 $45 = $36 + 4 | 0;
 $22 = $42;
 $23 = $43;
 $24 = $44;
 $25 = $45;
 while (1) {
  $46 = $23;
  $47 = $24;
  $48 = ($46 | 0) != ($47 | 0);
  if (!$48) {
   break;
  }
  $49 = $22;
  $50 = $25;
  $51 = SAFE_HEAP_LOAD($50 | 0, 4, 0) | 0 | 0;
  $21 = $51;
  $52 = $21;
  $53 = $23;
  $17 = $49;
  $18 = $52;
  $19 = $53;
  $54 = $17;
  $55 = $18;
  $56 = $19;
  $16 = $56;
  $57 = $16;
  {}
  SAFE_HEAP_STORE($15 >> 0 | 0, SAFE_HEAP_LOAD($20 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
  $12 = $54;
  $13 = $55;
  $14 = $57;
  $58 = $12;
  $59 = $13;
  $60 = $14;
  $11 = $60;
  $61 = $11;
  $8 = $58;
  $9 = $59;
  $10 = $61;
  $62 = $9;
  $63 = $10;
  $7 = $63;
  $64 = $7;
  __ZN5Eigen5ArrayIfLi3ELi1ELi0ELi3ELi1EEC2ERKS1_($62, $64);
  $65 = $23;
  $66 = $65 + 12 | 0;
  $23 = $66;
  $67 = $25;
  $68 = SAFE_HEAP_LOAD($67 | 0, 4, 0) | 0 | 0;
  $69 = $68 + 12 | 0;
  SAFE_HEAP_STORE($67 | 0, $69 | 0, 4);
 }
 $26 = $35;
 STACKTOP = sp;
 return;
}

function __ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE10resizeLikeINS_13MatrixWrapperIKNS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESC_EEEEEEvRKNS_9EigenBaseIT_EE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
 $4 = $0;
 $5 = $1;
 $8 = $4;
 $9 = $5;
 $10 = __ZNK5Eigen9EigenBaseINS_13MatrixWrapperIKNS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES8_EEEEE7derivedEv($9) | 0;
 $6 = $10;
 $11 = $6;
 $12 = __ZNK5Eigen13MatrixWrapperIKNS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES7_EEE4rowsEv($11) | 0;
 $13 = $6;
 $14 = __ZNK5Eigen13MatrixWrapperIKNS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES7_EEE4colsEv($13) | 0;
 $2 = $12;
 $3 = $14;
 $15 = $6;
 $16 = __ZNK5Eigen13MatrixWrapperIKNS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES7_EEE4rowsEv($15) | 0;
 $17 = $6;
 $18 = __ZNK5Eigen13MatrixWrapperIKNS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES7_EEE4colsEv($17) | 0;
 $19 = Math_imul($16, $18) | 0;
 $7 = $19;
 $20 = $6;
 $21 = __ZNK5Eigen13MatrixWrapperIKNS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES7_EEE4rowsEv($20) | 0;
 $22 = ($21 | 0) == 1;
 if ($22) {
  $26 = $7;
  __ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii($8, $26, 1);
  STACKTOP = sp;
  return;
 }
 $23 = $6;
 $24 = __ZNK5Eigen13MatrixWrapperIKNS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES7_EEE4colsEv($23) | 0;
 $25 = ($24 | 0) == 1;
 if ($25) {
  $26 = $7;
  __ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii($8, $26, 1);
  STACKTOP = sp;
  return;
 } else {
  ___assert_fail(2529 | 0, 1656 | 0, 374, 2568 | 0);
 }
}

function __ZNSt3__26vectorIN5Eigen5ArrayIjLi3ELi1ELi0ELi3ELi1EEENS_9allocatorIS3_EEE13__move_assignERS6_NS_17integral_constantIbLb1EEE($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96 | 0);
 $21 = sp;
 $24 = sp + 92 | 0;
 $25 = $0;
 $26 = $1;
 $27 = $25;
 __ZNSt3__26vectorIN5Eigen5ArrayIjLi3ELi1ELi0ELi3ELi1EEENS_9allocatorIS3_EEE10deallocateEv($27);
 $28 = $26;
 $22 = $27;
 $23 = $28;
 $29 = $22;
 $30 = $23;
 {}
 SAFE_HEAP_STORE($21 >> 0 | 0, SAFE_HEAP_LOAD($24 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
 $19 = $29;
 $20 = $30;
 $31 = $19;
 $32 = $20;
 $18 = $32;
 $33 = $18;
 $34 = $33 + 8 | 0;
 $17 = $34;
 $35 = $17;
 $16 = $35;
 $36 = $16;
 $12 = $36;
 $15 = $31;
 $37 = $15;
 $38 = $37 + 8 | 0;
 $14 = $38;
 $39 = $14;
 $13 = $39;
 $40 = $26;
 $41 = SAFE_HEAP_LOAD($40 | 0, 4, 0) | 0 | 0;
 SAFE_HEAP_STORE($27 | 0, $41 | 0, 4);
 $42 = $26;
 $43 = $42 + 4 | 0;
 $44 = SAFE_HEAP_LOAD($43 | 0, 4, 0) | 0 | 0;
 $45 = $27 + 4 | 0;
 SAFE_HEAP_STORE($45 | 0, $44 | 0, 4);
 $46 = $26;
 $5 = $46;
 $47 = $5;
 $48 = $47 + 8 | 0;
 $4 = $48;
 $49 = $4;
 $3 = $49;
 $50 = $3;
 $51 = SAFE_HEAP_LOAD($50 | 0, 4, 0) | 0 | 0;
 $8 = $27;
 $52 = $8;
 $53 = $52 + 8 | 0;
 $7 = $53;
 $54 = $7;
 $6 = $54;
 $55 = $6;
 SAFE_HEAP_STORE($55 | 0, $51 | 0, 4);
 $56 = $26;
 $11 = $56;
 $57 = $11;
 $58 = $57 + 8 | 0;
 $10 = $58;
 $59 = $10;
 $9 = $59;
 $60 = $9;
 SAFE_HEAP_STORE($60 | 0, 0 | 0, 4);
 $61 = $26;
 $62 = $61 + 4 | 0;
 SAFE_HEAP_STORE($62 | 0, 0 | 0, 4);
 $63 = $26;
 SAFE_HEAP_STORE($63 | 0, 0 | 0, 4);
 STACKTOP = sp;
 return;
}

function __ZNSt3__26vectorIN5Eigen5ArrayIfLi3ELi1ELi0ELi3ELi1EEENS_9allocatorIS3_EEE13__move_assignERS6_NS_17integral_constantIbLb1EEE($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96 | 0);
 $21 = sp;
 $24 = sp + 92 | 0;
 $25 = $0;
 $26 = $1;
 $27 = $25;
 __ZNSt3__26vectorIN5Eigen5ArrayIfLi3ELi1ELi0ELi3ELi1EEENS_9allocatorIS3_EEE10deallocateEv($27);
 $28 = $26;
 $22 = $27;
 $23 = $28;
 $29 = $22;
 $30 = $23;
 {}
 SAFE_HEAP_STORE($21 >> 0 | 0, SAFE_HEAP_LOAD($24 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
 $19 = $29;
 $20 = $30;
 $31 = $19;
 $32 = $20;
 $18 = $32;
 $33 = $18;
 $34 = $33 + 8 | 0;
 $17 = $34;
 $35 = $17;
 $16 = $35;
 $36 = $16;
 $12 = $36;
 $15 = $31;
 $37 = $15;
 $38 = $37 + 8 | 0;
 $14 = $38;
 $39 = $14;
 $13 = $39;
 $40 = $26;
 $41 = SAFE_HEAP_LOAD($40 | 0, 4, 0) | 0 | 0;
 SAFE_HEAP_STORE($27 | 0, $41 | 0, 4);
 $42 = $26;
 $43 = $42 + 4 | 0;
 $44 = SAFE_HEAP_LOAD($43 | 0, 4, 0) | 0 | 0;
 $45 = $27 + 4 | 0;
 SAFE_HEAP_STORE($45 | 0, $44 | 0, 4);
 $46 = $26;
 $5 = $46;
 $47 = $5;
 $48 = $47 + 8 | 0;
 $4 = $48;
 $49 = $4;
 $3 = $49;
 $50 = $3;
 $51 = SAFE_HEAP_LOAD($50 | 0, 4, 0) | 0 | 0;
 $8 = $27;
 $52 = $8;
 $53 = $52 + 8 | 0;
 $7 = $53;
 $54 = $7;
 $6 = $54;
 $55 = $6;
 SAFE_HEAP_STORE($55 | 0, $51 | 0, 4);
 $56 = $26;
 $11 = $56;
 $57 = $11;
 $58 = $57 + 8 | 0;
 $10 = $58;
 $59 = $10;
 $9 = $59;
 $60 = $9;
 SAFE_HEAP_STORE($60 | 0, 0 | 0, 4);
 $61 = $26;
 $62 = $61 + 4 | 0;
 SAFE_HEAP_STORE($62 | 0, 0 | 0, 4);
 $63 = $26;
 SAFE_HEAP_STORE($63 | 0, 0 | 0, 4);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen8internal17resize_if_allowedINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS0_17scalar_product_opIffEEKS3_KNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEES9_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = $4;
 $9 = __ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS1_17scalar_product_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEES8_E4rowsEv($8) | 0;
 $6 = $9;
 $10 = $4;
 $11 = __ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS1_17scalar_product_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEES8_E4colsEv($10) | 0;
 $7 = $11;
 $12 = $3;
 $13 = __ZNK5Eigen15PlainObjectBaseINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv($12) | 0;
 $14 = $6;
 $15 = ($13 | 0) != ($14 | 0);
 if ($15) {
  label = 3;
 } else {
  $16 = $3;
  $17 = __ZNK5Eigen15PlainObjectBaseINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv($16) | 0;
  $18 = $7;
  $19 = ($17 | 0) != ($18 | 0);
  if ($19) {
   label = 3;
  }
 }
 if ((label | 0) == 3) {
  $20 = $3;
  $21 = $6;
  $22 = $7;
  __ZN5Eigen15PlainObjectBaseINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii($20, $21, $22);
 }
 $23 = $3;
 $24 = __ZNK5Eigen15PlainObjectBaseINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv($23) | 0;
 $25 = $6;
 $26 = ($24 | 0) == ($25 | 0);
 if (!$26) {
  ___assert_fail(1086 | 0, 1133 | 0, 721, 1239 | 0);
 }
 $27 = $3;
 $28 = __ZNK5Eigen15PlainObjectBaseINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv($27) | 0;
 $29 = $7;
 $30 = ($28 | 0) == ($29 | 0);
 if ($30) {
  STACKTOP = sp;
  return;
 } else {
  ___assert_fail(1086 | 0, 1133 | 0, 721, 1239 | 0);
 }
}

function __ZNSt3__26vectorIN5Eigen5ArrayIfLi3ELi1ELi0ELi3ELi1EEENS_9allocatorIS3_EEEC2EjRKS5_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80 | 0);
 $7 = sp + 56 | 0;
 $8 = sp + 8 | 0;
 $11 = sp + 44 | 0;
 $12 = sp + 77 | 0;
 $13 = sp;
 $17 = sp + 76 | 0;
 $18 = $0;
 $19 = $1;
 $20 = $2;
 $23 = $18;
 $24 = $20;
 $15 = $23;
 $16 = $24;
 $25 = $15;
 $14 = $25;
 SAFE_HEAP_STORE($25 | 0, 0 | 0, 4);
 $26 = $25 + 4 | 0;
 SAFE_HEAP_STORE($26 | 0, 0 | 0, 4);
 $27 = $25 + 8 | 0;
 {}
 SAFE_HEAP_STORE($13 >> 0 | 0, SAFE_HEAP_LOAD($17 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
 $10 = $27;
 SAFE_HEAP_STORE($11 | 0, 0 | 0, 4);
 $28 = $10;
 $9 = $11;
 $29 = $9;
 $30 = SAFE_HEAP_LOAD($29 | 0, 4, 0) | 0 | 0;
 $3 = $13;
 {}
 SAFE_HEAP_STORE($8 >> 0 | 0, SAFE_HEAP_LOAD($12 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
 $6 = $28;
 SAFE_HEAP_STORE($7 | 0, $30 | 0, 4);
 $31 = $6;
 $5 = $8;
 $4 = $7;
 $32 = $4;
 $33 = SAFE_HEAP_LOAD($32 | 0, 4, 0) | 0 | 0;
 SAFE_HEAP_STORE($31 | 0, $33 | 0, 4);
 $34 = $19;
 $35 = $34 >>> 0 > 0;
 if (!$35) {
  STACKTOP = sp;
  return;
 }
 $36 = $19;
 __THREW__ = 0;
 invoke_vii(26, $23 | 0, $36 | 0);
 $37 = __THREW__;
 __THREW__ = 0;
 $38 = $37 & 1;
 if (!$38) {
  $39 = $19;
  __THREW__ = 0;
  invoke_vii(55, $23 | 0, $39 | 0);
  $40 = __THREW__;
  __THREW__ = 0;
  $41 = $40 & 1;
  if (!$41) {
   STACKTOP = sp;
   return;
  }
 }
 $42 = ___cxa_find_matching_catch_2() | 0;
 $43 = tempRet0;
 $21 = $42;
 $22 = $43;
 __ZNSt3__213__vector_baseIN5Eigen5ArrayIfLi3ELi1ELi0ELi3ELi1EEENS_9allocatorIS3_EEED2Ev($23);
 $44 = $21;
 $45 = $22;
 ___resumeException($44 | 0);
}

function __ZNK5Eigen10MatrixBaseINS_13MatrixWrapperIKNS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES8_EEEEEdvIfEENS3_9enable_ifILb1EKNS2_INS3_18scalar_quotient_opIfNS3_18promote_scalar_argIfT_Xsr5Eigen8internal14has_ReturnTypeINS_20ScalarBinaryOpTraitsIfSH_NSF_IfSH_EEEEEE5valueEE4typeEEEKSB_KNS3_19plain_constant_typeISB_SM_E4typeEEEE4typeERKSH_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
 $5 = sp + 8 | 0;
 $6 = sp;
 $7 = sp + 24 | 0;
 $3 = $1;
 $4 = $2;
 $8 = $3;
 $9 = __ZNK5Eigen9EigenBaseINS_13MatrixWrapperIKNS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES8_EEEEE7derivedEv($8) | 0;
 $10 = __ZNK5Eigen9EigenBaseINS_13MatrixWrapperIKNS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES8_EEEEE7derivedEv($8) | 0;
 $11 = __ZNK5Eigen13MatrixWrapperIKNS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES7_EEE4rowsEv($10) | 0;
 $12 = __ZNK5Eigen9EigenBaseINS_13MatrixWrapperIKNS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES8_EEEEE7derivedEv($8) | 0;
 $13 = __ZNK5Eigen13MatrixWrapperIKNS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES7_EEE4colsEv($12) | 0;
 $14 = $4;
 __ZN5Eigen8internal18scalar_constant_opIfEC2ERKf($6, $14);
 __ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC2EiiRKS3_($5, $11, $13, $6);
 __ZN5Eigen8internal18scalar_quotient_opIffEC2Ev($7);
 __ZN5Eigen13CwiseBinaryOpINS_8internal18scalar_quotient_opIffEEKNS_13MatrixWrapperIKNS0_INS1_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES9_EEEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC2ERSD_RSL_RKS3_($0, $9, $5, $7);
 STACKTOP = sp;
 return;
}

function __ZNSt3__26vectorIN5Eigen5ArrayIjLi3ELi1ELi0ELi3ELi1EEENS_9allocatorIS3_EEE7reserveEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80 | 0);
 $14 = sp + 8 | 0;
 $11 = $0;
 $12 = $1;
 $17 = $11;
 $18 = $12;
 $10 = $17;
 $19 = $10;
 $9 = $19;
 $20 = $9;
 $8 = $20;
 $21 = $8;
 $22 = $21 + 8 | 0;
 $7 = $22;
 $23 = $7;
 $6 = $23;
 $24 = $6;
 $25 = SAFE_HEAP_LOAD($24 | 0, 4, 0) | 0 | 0;
 $26 = SAFE_HEAP_LOAD($20 | 0, 4, 0) | 0 | 0;
 $27 = $25;
 $28 = $26;
 $29 = $27 - $28 | 0;
 $30 = ($29 | 0) / 12 & -1;
 $31 = $18 >>> 0 > $30 >>> 0;
 if (!$31) {
  STACKTOP = sp;
  return;
 }
 $5 = $17;
 $32 = $5;
 $33 = $32 + 8 | 0;
 $4 = $33;
 $34 = $4;
 $3 = $34;
 $35 = $3;
 $13 = $35;
 $36 = $12;
 $2 = $17;
 $37 = $2;
 $38 = $37 + 4 | 0;
 $39 = SAFE_HEAP_LOAD($38 | 0, 4, 0) | 0 | 0;
 $40 = SAFE_HEAP_LOAD($37 | 0, 4, 0) | 0 | 0;
 $41 = $39;
 $42 = $40;
 $43 = $41 - $42 | 0;
 $44 = ($43 | 0) / 12 & -1;
 $45 = $13;
 __ZNSt3__214__split_bufferIN5Eigen5ArrayIjLi3ELi1ELi0ELi3ELi1EEERNS_9allocatorIS3_EEEC2EjjS6_($14, $36, $44, $45);
 __THREW__ = 0;
 invoke_vii(53, $17 | 0, $14 | 0);
 $46 = __THREW__;
 __THREW__ = 0;
 $47 = $46 & 1;
 if ($47) {
  $48 = ___cxa_find_matching_catch_2() | 0;
  $49 = tempRet0;
  $15 = $48;
  $16 = $49;
  __ZNSt3__214__split_bufferIN5Eigen5ArrayIjLi3ELi1ELi0ELi3ELi1EEERNS_9allocatorIS3_EEED2Ev($14);
  $50 = $15;
  $51 = $16;
  ___resumeException($50 | 0);
 }
 __ZNSt3__214__split_bufferIN5Eigen5ArrayIjLi3ELi1ELi0ELi3ELi1EEERNS_9allocatorIS3_EEED2Ev($14);
 STACKTOP = sp;
 return;
}

function __ZNSt3__26vectorIN5Eigen5ArrayIfLi3ELi1ELi0ELi3ELi1EEENS_9allocatorIS3_EEE7reserveEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80 | 0);
 $14 = sp + 8 | 0;
 $11 = $0;
 $12 = $1;
 $17 = $11;
 $18 = $12;
 $10 = $17;
 $19 = $10;
 $9 = $19;
 $20 = $9;
 $8 = $20;
 $21 = $8;
 $22 = $21 + 8 | 0;
 $7 = $22;
 $23 = $7;
 $6 = $23;
 $24 = $6;
 $25 = SAFE_HEAP_LOAD($24 | 0, 4, 0) | 0 | 0;
 $26 = SAFE_HEAP_LOAD($20 | 0, 4, 0) | 0 | 0;
 $27 = $25;
 $28 = $26;
 $29 = $27 - $28 | 0;
 $30 = ($29 | 0) / 12 & -1;
 $31 = $18 >>> 0 > $30 >>> 0;
 if (!$31) {
  STACKTOP = sp;
  return;
 }
 $5 = $17;
 $32 = $5;
 $33 = $32 + 8 | 0;
 $4 = $33;
 $34 = $4;
 $3 = $34;
 $35 = $3;
 $13 = $35;
 $36 = $12;
 $2 = $17;
 $37 = $2;
 $38 = $37 + 4 | 0;
 $39 = SAFE_HEAP_LOAD($38 | 0, 4, 0) | 0 | 0;
 $40 = SAFE_HEAP_LOAD($37 | 0, 4, 0) | 0 | 0;
 $41 = $39;
 $42 = $40;
 $43 = $41 - $42 | 0;
 $44 = ($43 | 0) / 12 & -1;
 $45 = $13;
 __ZNSt3__214__split_bufferIN5Eigen5ArrayIfLi3ELi1ELi0ELi3ELi1EEERNS_9allocatorIS3_EEEC2EjjS6_($14, $36, $44, $45);
 __THREW__ = 0;
 invoke_vii(54, $17 | 0, $14 | 0);
 $46 = __THREW__;
 __THREW__ = 0;
 $47 = $46 & 1;
 if ($47) {
  $48 = ___cxa_find_matching_catch_2() | 0;
  $49 = tempRet0;
  $15 = $48;
  $16 = $49;
  __ZNSt3__214__split_bufferIN5Eigen5ArrayIfLi3ELi1ELi0ELi3ELi1EEERNS_9allocatorIS3_EEED2Ev($14);
  $50 = $15;
  $51 = $16;
  ___resumeException($50 | 0);
 }
 __ZNSt3__214__split_bufferIN5Eigen5ArrayIfLi3ELi1ELi0ELi3ELi1EEERNS_9allocatorIS3_EEED2Ev($14);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS1_17scalar_product_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEES8_EC2ERSF_RS8_RKS3_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $4;
 __ZN5Eigen17CwiseBinaryOpImplINS_8internal13scalar_sum_opIffEEKNS_13CwiseBinaryOpINS1_17scalar_product_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES9_EEEES9_NS_5DenseEEC2Ev($8);
 $9 = $8 + 4 | 0;
 $10 = $5;
 __ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC2ERKSC_($9, $10);
 $11 = $8 + 20 | 0;
 $12 = $6;
 SAFE_HEAP_STORE($11 | 0, $12 | 0, 4);
 $13 = $8 + 24 | 0;
 $14 = $7;
 __ZN5Eigen8internal13scalar_sum_opIffEC2ERKS2_($13, $14);
 $15 = $5;
 $16 = __ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE4rowsEv($15) | 0;
 $17 = $6;
 $18 = __ZNK5Eigen15PlainObjectBaseINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv($17) | 0;
 $19 = ($16 | 0) == ($18 | 0);
 if (!$19) {
  ___assert_fail(1915 | 0, 1972 | 0, 110, 2076 | 0);
 }
 $20 = $5;
 $21 = __ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE4colsEv($20) | 0;
 $22 = $6;
 $23 = __ZNK5Eigen15PlainObjectBaseINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv($22) | 0;
 $24 = ($21 | 0) == ($23 | 0);
 if ($24) {
  STACKTOP = sp;
  return;
 } else {
  ___assert_fail(1915 | 0, 1972 | 0, 110, 2076 | 0);
 }
}

function __ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13MatrixWrapperIKNS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESA_EEEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = $4;
 $9 = __ZNK5Eigen13MatrixWrapperIKNS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES7_EEE4rowsEv($8) | 0;
 $6 = $9;
 $10 = $4;
 $11 = __ZNK5Eigen13MatrixWrapperIKNS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES7_EEE4colsEv($10) | 0;
 $7 = $11;
 $12 = $3;
 $13 = __ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv($12) | 0;
 $14 = $6;
 $15 = ($13 | 0) != ($14 | 0);
 if ($15) {
  label = 3;
 } else {
  $16 = $3;
  $17 = __ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv($16) | 0;
  $18 = $7;
  $19 = ($17 | 0) != ($18 | 0);
  if ($19) {
   label = 3;
  }
 }
 if ((label | 0) == 3) {
  $20 = $3;
  $21 = $6;
  $22 = $7;
  __ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii($20, $21, $22);
 }
 $23 = $3;
 $24 = __ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv($23) | 0;
 $25 = $6;
 $26 = ($24 | 0) == ($25 | 0);
 if (!$26) {
  ___assert_fail(1086 | 0, 1133 | 0, 721, 1239 | 0);
 }
 $27 = $3;
 $28 = __ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv($27) | 0;
 $29 = $7;
 $30 = ($28 | 0) == ($29 | 0);
 if ($30) {
  STACKTOP = sp;
  return;
 } else {
  ___assert_fail(1086 | 0, 1133 | 0, 721, 1239 | 0);
 }
}

function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = $1 + 8 | 0;
 $6 = SAFE_HEAP_LOAD($5 | 0, 4, 0) | 0 | 0;
 $7 = __ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, $6, $4) | 0;
 do {
  if ($7) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0, $1, $2, $3);
  } else {
   $8 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0;
   $9 = __ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, $8, $4) | 0;
   if ($9) {
    $10 = $1 + 16 | 0;
    $11 = SAFE_HEAP_LOAD($10 | 0, 4, 0) | 0 | 0;
    $12 = ($11 | 0) == ($2 | 0);
    $13 = $1 + 32 | 0;
    if (!$12) {
     $14 = $1 + 20 | 0;
     $15 = SAFE_HEAP_LOAD($14 | 0, 4, 0) | 0 | 0;
     $16 = ($15 | 0) == ($2 | 0);
     if (!$16) {
      SAFE_HEAP_STORE($13 | 0, $3 | 0, 4);
      SAFE_HEAP_STORE($14 | 0, $2 | 0, 4);
      $18 = $1 + 40 | 0;
      $19 = SAFE_HEAP_LOAD($18 | 0, 4, 0) | 0 | 0;
      $20 = $19 + 1 | 0;
      SAFE_HEAP_STORE($18 | 0, $20 | 0, 4);
      $21 = $1 + 36 | 0;
      $22 = SAFE_HEAP_LOAD($21 | 0, 4, 0) | 0 | 0;
      $23 = ($22 | 0) == 1;
      if ($23) {
       $24 = $1 + 24 | 0;
       $25 = SAFE_HEAP_LOAD($24 | 0, 4, 0) | 0 | 0;
       $26 = ($25 | 0) == 2;
       if ($26) {
        $27 = $1 + 54 | 0;
        SAFE_HEAP_STORE($27 >> 0 | 0, 1 | 0, 1);
       }
      }
      $28 = $1 + 44 | 0;
      SAFE_HEAP_STORE($28 | 0, 4 | 0, 4);
      break;
     }
    }
    $17 = ($3 | 0) == 1;
    if ($17) {
     SAFE_HEAP_STORE($13 | 0, 1 | 0, 4);
    }
   }
  }
 } while (0);
 return;
}

function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond22 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = $1 + 53 | 0;
 SAFE_HEAP_STORE($5 >> 0 | 0, 1 | 0, 1);
 $6 = $1 + 4 | 0;
 $7 = SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0;
 $8 = ($7 | 0) == ($3 | 0);
 do {
  if ($8) {
   $9 = $1 + 52 | 0;
   SAFE_HEAP_STORE($9 >> 0 | 0, 1 | 0, 1);
   $10 = $1 + 16 | 0;
   $11 = SAFE_HEAP_LOAD($10 | 0, 4, 0) | 0 | 0;
   $12 = ($11 | 0) == (0 | 0);
   $13 = $1 + 54 | 0;
   $14 = $1 + 48 | 0;
   $15 = $1 + 24 | 0;
   $16 = $1 + 36 | 0;
   if ($12) {
    SAFE_HEAP_STORE($10 | 0, $2 | 0, 4);
    SAFE_HEAP_STORE($15 | 0, $4 | 0, 4);
    SAFE_HEAP_STORE($16 | 0, 1 | 0, 4);
    $17 = SAFE_HEAP_LOAD($14 | 0, 4, 0) | 0 | 0;
    $18 = ($17 | 0) == 1;
    $19 = ($4 | 0) == 1;
    $or$cond = $18 & $19;
    if (!$or$cond) {
     break;
    }
    SAFE_HEAP_STORE($13 >> 0 | 0, 1 | 0, 1);
    break;
   }
   $20 = ($11 | 0) == ($2 | 0);
   if (!$20) {
    $27 = SAFE_HEAP_LOAD($16 | 0, 4, 0) | 0 | 0;
    $28 = $27 + 1 | 0;
    SAFE_HEAP_STORE($16 | 0, $28 | 0, 4);
    SAFE_HEAP_STORE($13 >> 0 | 0, 1 | 0, 1);
    break;
   }
   $21 = SAFE_HEAP_LOAD($15 | 0, 4, 0) | 0 | 0;
   $22 = ($21 | 0) == 2;
   if ($22) {
    SAFE_HEAP_STORE($15 | 0, $4 | 0, 4);
    $26 = $4;
   } else {
    $26 = $21;
   }
   $23 = SAFE_HEAP_LOAD($14 | 0, 4, 0) | 0 | 0;
   $24 = ($23 | 0) == 1;
   $25 = ($26 | 0) == 1;
   $or$cond22 = $24 & $25;
   if ($or$cond22) {
    SAFE_HEAP_STORE($13 >> 0 | 0, 1 | 0, 1);
   }
  }
 } while (0);
 return;
}

function _fputc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1 + 76 | 0;
 $3 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
 $4 = ($3 | 0) < 0;
 $5 = $0 & 255;
 $6 = $0 & 255;
 if ($4) {
  label = 3;
 } else {
  $7 = ___lockfile($1) | 0;
  $8 = ($7 | 0) == 0;
  if ($8) {
   label = 3;
  } else {
   $20 = $1 + 75 | 0;
   $21 = SAFE_HEAP_LOAD($20 >> 0 | 0, 1, 0) | 0 | 0;
   $22 = $21 << 24 >> 24;
   $23 = ($6 | 0) == ($22 | 0);
   if ($23) {
    label = 10;
   } else {
    $24 = $1 + 20 | 0;
    $25 = SAFE_HEAP_LOAD($24 | 0, 4, 0) | 0 | 0;
    $26 = $1 + 16 | 0;
    $27 = SAFE_HEAP_LOAD($26 | 0, 4, 0) | 0 | 0;
    $28 = $25 >>> 0 < $27 >>> 0;
    if ($28) {
     $29 = $25 + 1 | 0;
     SAFE_HEAP_STORE($24 | 0, $29 | 0, 4);
     SAFE_HEAP_STORE($25 >> 0 | 0, $5 | 0, 1);
     $31 = $6;
    } else {
     label = 10;
    }
   }
   if ((label | 0) == 10) {
    $30 = ___overflow($1, $0) | 0;
    $31 = $30;
   }
   ___unlockfile($1);
   $$0 = $31;
  }
 }
 do {
  if ((label | 0) == 3) {
   $9 = $1 + 75 | 0;
   $10 = SAFE_HEAP_LOAD($9 >> 0 | 0, 1, 0) | 0 | 0;
   $11 = $10 << 24 >> 24;
   $12 = ($6 | 0) == ($11 | 0);
   if (!$12) {
    $13 = $1 + 20 | 0;
    $14 = SAFE_HEAP_LOAD($13 | 0, 4, 0) | 0 | 0;
    $15 = $1 + 16 | 0;
    $16 = SAFE_HEAP_LOAD($15 | 0, 4, 0) | 0 | 0;
    $17 = $14 >>> 0 < $16 >>> 0;
    if ($17) {
     $18 = $14 + 1 | 0;
     SAFE_HEAP_STORE($13 | 0, $18 | 0, 4);
     SAFE_HEAP_STORE($14 >> 0 | 0, $5 | 0, 1);
     $$0 = $6;
     break;
    }
   }
   $19 = ___overflow($1, $0) | 0;
   $$0 = $19;
  }
 } while (0);
 return $$0 | 0;
}

function __ZN5Eigen8internal17resize_if_allowedINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEENS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = $4;
 $9 = __ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv($8) | 0;
 $6 = $9;
 $10 = $4;
 $11 = __ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv($10) | 0;
 $7 = $11;
 $12 = $3;
 $13 = __ZNK5Eigen15PlainObjectBaseINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv($12) | 0;
 $14 = $6;
 $15 = ($13 | 0) != ($14 | 0);
 if ($15) {
  label = 3;
 } else {
  $16 = $3;
  $17 = __ZNK5Eigen15PlainObjectBaseINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv($16) | 0;
  $18 = $7;
  $19 = ($17 | 0) != ($18 | 0);
  if ($19) {
   label = 3;
  }
 }
 if ((label | 0) == 3) {
  $20 = $3;
  $21 = $6;
  $22 = $7;
  __ZN5Eigen15PlainObjectBaseINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii($20, $21, $22);
 }
 $23 = $3;
 $24 = __ZNK5Eigen15PlainObjectBaseINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv($23) | 0;
 $25 = $6;
 $26 = ($24 | 0) == ($25 | 0);
 if (!$26) {
  ___assert_fail(1086 | 0, 1133 | 0, 721, 1239 | 0);
 }
 $27 = $3;
 $28 = __ZNK5Eigen15PlainObjectBaseINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv($27) | 0;
 $29 = $7;
 $30 = ($28 | 0) == ($29 | 0);
 if ($30) {
  STACKTOP = sp;
  return;
 } else {
  ___assert_fail(1086 | 0, 1133 | 0, 721, 1239 | 0);
 }
}

function __ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC2ERS6_RSB_RKS3_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $4;
 __ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EENS_5DenseEEC2Ev($8);
 $9 = $5;
 SAFE_HEAP_STORE($8 | 0, $9 | 0, 4);
 $10 = $8 + 4 | 0;
 $11 = $6;
 __ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEC2ERKS7_($10, $11);
 $12 = $8 + 12 | 0;
 $13 = $7;
 __ZN5Eigen8internal17scalar_product_opIffEC2ERKS2_($12, $13);
 $14 = $5;
 $15 = __ZNK5Eigen15PlainObjectBaseINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv($14) | 0;
 $16 = $6;
 $17 = __ZNK5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv($16) | 0;
 $18 = ($15 | 0) == ($17 | 0);
 if (!$18) {
  ___assert_fail(1915 | 0, 1972 | 0, 110, 2076 | 0);
 }
 $19 = $5;
 $20 = __ZNK5Eigen15PlainObjectBaseINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv($19) | 0;
 $21 = $6;
 $22 = __ZNK5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv($21) | 0;
 $23 = ($20 | 0) == ($22 | 0);
 if ($23) {
  STACKTOP = sp;
  return;
 } else {
  ___assert_fail(1915 | 0, 1972 | 0, 110, 2076 | 0);
 }
}

function __ZN5Eigen8internal17resize_if_allowedINS_5ArrayIjLi3ELi1ELi0ELi3ELi1EEES3_jjEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = $4;
 $9 = __ZNK5Eigen15PlainObjectBaseINS_5ArrayIjLi3ELi1ELi0ELi3ELi1EEEE4rowsEv($8) | 0;
 $6 = $9;
 $10 = $4;
 $11 = __ZNK5Eigen15PlainObjectBaseINS_5ArrayIjLi3ELi1ELi0ELi3ELi1EEEE4colsEv($10) | 0;
 $7 = $11;
 $12 = $3;
 $13 = __ZNK5Eigen15PlainObjectBaseINS_5ArrayIjLi3ELi1ELi0ELi3ELi1EEEE4rowsEv($12) | 0;
 $14 = $6;
 $15 = ($13 | 0) != ($14 | 0);
 if ($15) {
  label = 3;
 } else {
  $16 = $3;
  $17 = __ZNK5Eigen15PlainObjectBaseINS_5ArrayIjLi3ELi1ELi0ELi3ELi1EEEE4colsEv($16) | 0;
  $18 = $7;
  $19 = ($17 | 0) != ($18 | 0);
  if ($19) {
   label = 3;
  }
 }
 if ((label | 0) == 3) {
  $20 = $3;
  $21 = $6;
  $22 = $7;
  __ZN5Eigen15PlainObjectBaseINS_5ArrayIjLi3ELi1ELi0ELi3ELi1EEEE6resizeEii($20, $21, $22);
 }
 $23 = $3;
 $24 = __ZNK5Eigen15PlainObjectBaseINS_5ArrayIjLi3ELi1ELi0ELi3ELi1EEEE4rowsEv($23) | 0;
 $25 = $6;
 $26 = ($24 | 0) == ($25 | 0);
 if (!$26) {
  ___assert_fail(1086 | 0, 1133 | 0, 721, 1239 | 0);
 }
 $27 = $3;
 $28 = __ZNK5Eigen15PlainObjectBaseINS_5ArrayIjLi3ELi1ELi0ELi3ELi1EEEE4colsEv($27) | 0;
 $29 = $7;
 $30 = ($28 | 0) == ($29 | 0);
 if ($30) {
  STACKTOP = sp;
  return;
 } else {
  ___assert_fail(1086 | 0, 1133 | 0, 721, 1239 | 0);
 }
}

function __ZN5Eigen8internal17resize_if_allowedINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = $4;
 $9 = __ZNK5Eigen15PlainObjectBaseINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv($8) | 0;
 $6 = $9;
 $10 = $4;
 $11 = __ZNK5Eigen15PlainObjectBaseINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv($10) | 0;
 $7 = $11;
 $12 = $3;
 $13 = __ZNK5Eigen15PlainObjectBaseINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv($12) | 0;
 $14 = $6;
 $15 = ($13 | 0) != ($14 | 0);
 if ($15) {
  label = 3;
 } else {
  $16 = $3;
  $17 = __ZNK5Eigen15PlainObjectBaseINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv($16) | 0;
  $18 = $7;
  $19 = ($17 | 0) != ($18 | 0);
  if ($19) {
   label = 3;
  }
 }
 if ((label | 0) == 3) {
  $20 = $3;
  $21 = $6;
  $22 = $7;
  __ZN5Eigen15PlainObjectBaseINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii($20, $21, $22);
 }
 $23 = $3;
 $24 = __ZNK5Eigen15PlainObjectBaseINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv($23) | 0;
 $25 = $6;
 $26 = ($24 | 0) == ($25 | 0);
 if (!$26) {
  ___assert_fail(1086 | 0, 1133 | 0, 721, 1239 | 0);
 }
 $27 = $3;
 $28 = __ZNK5Eigen15PlainObjectBaseINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv($27) | 0;
 $29 = $7;
 $30 = ($28 | 0) == ($29 | 0);
 if ($30) {
  STACKTOP = sp;
  return;
 } else {
  ___assert_fail(1086 | 0, 1133 | 0, 721, 1239 | 0);
 }
}

function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64 | 0);
 $3 = sp;
 $4 = __ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, $1, 0) | 0;
 if ($4) {
  $$2 = 1;
 } else {
  $5 = ($1 | 0) == (0 | 0);
  if ($5) {
   $$2 = 0;
  } else {
   $6 = ___dynamic_cast($1, 32, 16, 0) | 0;
   $7 = ($6 | 0) == (0 | 0);
   if ($7) {
    $$2 = 0;
   } else {
    $8 = $3 + 4 | 0;
    dest = $8;
    stop = dest + 52 | 0;
    do {
     SAFE_HEAP_STORE(dest | 0, 0 | 0 | 0, 4);
     dest = dest + 4 | 0;
    } while ((dest | 0) < (stop | 0));
    SAFE_HEAP_STORE($3 | 0, $6 | 0, 4);
    $9 = $3 + 8 | 0;
    SAFE_HEAP_STORE($9 | 0, $0 | 0, 4);
    $10 = $3 + 12 | 0;
    SAFE_HEAP_STORE($10 | 0, -1 | 0, 4);
    $11 = $3 + 48 | 0;
    SAFE_HEAP_STORE($11 | 0, 1 | 0, 4);
    $12 = SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0;
    $13 = $12 + 28 | 0;
    $14 = SAFE_HEAP_LOAD($13 | 0, 4, 0) | 0 | 0;
    $15 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
    FUNCTION_TABLE_viiii[(SAFE_FT_MASK($14 | 0, 63 | 0) | 0) & 63]($6, $3, $15, 1);
    $16 = $3 + 24 | 0;
    $17 = SAFE_HEAP_LOAD($16 | 0, 4, 0) | 0 | 0;
    $18 = ($17 | 0) == 1;
    if ($18) {
     $19 = $3 + 16 | 0;
     $20 = SAFE_HEAP_LOAD($19 | 0, 4, 0) | 0 | 0;
     SAFE_HEAP_STORE($2 | 0, $20 | 0, 4);
     $$0 = 1;
    } else {
     $$0 = 0;
    }
    $$2 = $$0;
   }
  }
 }
 STACKTOP = sp;
 return $$2 | 0;
}

function __ZN5Eigen8internal15unary_evaluatorINS_12CwiseUnaryOpINS0_14scalar_abs2_opIfEEKNS_13MatrixWrapperIKNS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESB_EEEEEENS0_10IndexBasedEfEC2ERKSG_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $2 = $0;
 $3 = $1;
 $6 = $2;
 __ZN5Eigen8internal14evaluator_baseINS_12CwiseUnaryOpINS0_14scalar_abs2_opIfEEKNS_13MatrixWrapperIKNS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESB_EEEEEEEC2Ev($6);
 $7 = $3;
 __THREW__ = 0;
 $8 = invoke_ii(80, $7 | 0) | 0;
 $9 = __THREW__;
 __THREW__ = 0;
 $10 = $9 & 1;
 if (!$10) {
  __THREW__ = 0;
  invoke_vii(81, $6 | 0, $8 | 0);
  $11 = __THREW__;
  __THREW__ = 0;
  $12 = $11 & 1;
  if (!$12) {
   $13 = $6 + 4 | 0;
   $14 = $3;
   __THREW__ = 0;
   $15 = invoke_ii(82, $14 | 0) | 0;
   $16 = __THREW__;
   __THREW__ = 0;
   $17 = $16 & 1;
   if (!$17) {
    __THREW__ = 0;
    invoke_vii(83, $13 | 0, $15 | 0);
    $18 = __THREW__;
    __THREW__ = 0;
    $19 = $18 & 1;
    if (!$19) {
     STACKTOP = sp;
     return;
    }
   }
  }
 }
 $20 = ___cxa_find_matching_catch_2() | 0;
 $21 = tempRet0;
 $4 = $20;
 $5 = $21;
 __ZN5Eigen8internal14evaluator_baseINS_12CwiseUnaryOpINS0_14scalar_abs2_opIfEEKNS_13MatrixWrapperIKNS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESB_EEEEEEED2Ev($6);
 $22 = $4;
 $23 = $5;
 ___resumeException($22 | 0);
}

function __ZN5Eigen15PlainObjectBaseINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEE10resizeLikeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEvRKNS_9EigenBaseIT_EE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
 $4 = $0;
 $5 = $1;
 $8 = $4;
 $9 = $5;
 $10 = __ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv($9) | 0;
 $6 = $10;
 $11 = $6;
 $12 = __ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv($11) | 0;
 $13 = $6;
 $14 = __ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv($13) | 0;
 $2 = $12;
 $3 = $14;
 $15 = $6;
 $16 = __ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv($15) | 0;
 $17 = $6;
 $18 = __ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv($17) | 0;
 $19 = Math_imul($16, $18) | 0;
 $7 = $19;
 $20 = $6;
 $21 = __ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv($20) | 0;
 $22 = ($21 | 0) == 1;
 if ($22) {
  $26 = $7;
  __ZN5Eigen15PlainObjectBaseINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii($8, $26, 1);
  STACKTOP = sp;
  return;
 }
 $23 = $6;
 $24 = __ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv($23) | 0;
 $25 = ($24 | 0) == 1;
 if ($25) {
  $26 = $7;
  __ZN5Eigen15PlainObjectBaseINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii($8, $26, 1);
  STACKTOP = sp;
  return;
 } else {
  ___assert_fail(2529 | 0, 1656 | 0, 374, 2568 | 0);
 }
}

function ___overflow($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $2 = sp;
 $3 = $1 & 255;
 SAFE_HEAP_STORE($2 >> 0 | 0, $3 | 0, 1);
 $4 = $0 + 16 | 0;
 $5 = SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0;
 $6 = ($5 | 0) == (0 | 0);
 if ($6) {
  $7 = ___towrite($0) | 0;
  $8 = ($7 | 0) == 0;
  if ($8) {
   $$pre = SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0;
   $12 = $$pre;
   label = 4;
  } else {
   $$0 = -1;
  }
 } else {
  $12 = $5;
  label = 4;
 }
 do {
  if ((label | 0) == 4) {
   $9 = $0 + 20 | 0;
   $10 = SAFE_HEAP_LOAD($9 | 0, 4, 0) | 0 | 0;
   $11 = $10 >>> 0 < $12 >>> 0;
   if ($11) {
    $13 = $1 & 255;
    $14 = $0 + 75 | 0;
    $15 = SAFE_HEAP_LOAD($14 >> 0 | 0, 1, 0) | 0 | 0;
    $16 = $15 << 24 >> 24;
    $17 = ($13 | 0) == ($16 | 0);
    if (!$17) {
     $18 = $10 + 1 | 0;
     SAFE_HEAP_STORE($9 | 0, $18 | 0, 4);
     SAFE_HEAP_STORE($10 >> 0 | 0, $3 | 0, 1);
     $$0 = $13;
     break;
    }
   }
   $19 = $0 + 36 | 0;
   $20 = SAFE_HEAP_LOAD($19 | 0, 4, 0) | 0 | 0;
   $21 = FUNCTION_TABLE_iiii[(SAFE_FT_MASK($20 | 0, 15 | 0) | 0) & 15]($0, $2, 1) | 0;
   $22 = ($21 | 0) == 1;
   if ($22) {
    $23 = SAFE_HEAP_LOAD($2 >> 0 | 0, 1, 0) | 0 | 0;
    $24 = $23 & 255;
    $$0 = $24;
   } else {
    $$0 = -1;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _fmt_u($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$010$lcssa$off0 = 0, $$012 = 0, $$09$lcssa = 0, $$0914 = 0, $$1$lcssa = 0, $$111 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1 >>> 0 > 0;
 $4 = $0 >>> 0 > 4294967295;
 $5 = ($1 | 0) == 0;
 $6 = $5 & $4;
 $7 = $3 | $6;
 if ($7) {
  $$0914 = $2;
  $8 = $0;
  $9 = $1;
  while (1) {
   $10 = ___uremdi3($8 | 0, $9 | 0, 10, 0) | 0;
   $11 = tempRet0;
   $12 = $10 & 255;
   $13 = $12 | 48;
   $14 = $$0914 + -1 | 0;
   SAFE_HEAP_STORE($14 >> 0 | 0, $13 | 0, 1);
   $15 = ___udivdi3($8 | 0, $9 | 0, 10, 0) | 0;
   $16 = tempRet0;
   $17 = $9 >>> 0 > 9;
   $18 = $8 >>> 0 > 4294967295;
   $19 = ($9 | 0) == 9;
   $20 = $19 & $18;
   $21 = $17 | $20;
   if ($21) {
    $$0914 = $14;
    $8 = $15;
    $9 = $16;
   } else {
    break;
   }
  }
  $$010$lcssa$off0 = $15;
  $$09$lcssa = $14;
 } else {
  $$010$lcssa$off0 = $0;
  $$09$lcssa = $2;
 }
 $22 = ($$010$lcssa$off0 | 0) == 0;
 if ($22) {
  $$1$lcssa = $$09$lcssa;
 } else {
  $$012 = $$010$lcssa$off0;
  $$111 = $$09$lcssa;
  while (1) {
   $23 = ($$012 >>> 0) % 10 & -1;
   $24 = $23 | 48;
   $25 = $24 & 255;
   $26 = $$111 + -1 | 0;
   SAFE_HEAP_STORE($26 >> 0 | 0, $25 | 0, 1);
   $27 = ($$012 >>> 0) / 10 & -1;
   $28 = $$012 >>> 0 < 10;
   if ($28) {
    $$1$lcssa = $26;
    break;
   } else {
    $$012 = $27;
    $$111 = $26;
   }
  }
 }
 return $$1$lcssa | 0;
}

function _strlen($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$015$lcssa = 0, $$01519 = 0, $$1$lcssa = 0, $$pn = 0, $$pre = 0, $$sink = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0;
 $2 = $1 & 3;
 $3 = ($2 | 0) == 0;
 L1 : do {
  if ($3) {
   $$015$lcssa = $0;
   label = 4;
  } else {
   $$01519 = $0;
   $23 = $1;
   while (1) {
    $4 = SAFE_HEAP_LOAD($$01519 >> 0 | 0, 1, 0) | 0 | 0;
    $5 = $4 << 24 >> 24 == 0;
    if ($5) {
     $$sink = $23;
     break L1;
    }
    $6 = $$01519 + 1 | 0;
    $7 = $6;
    $8 = $7 & 3;
    $9 = ($8 | 0) == 0;
    if ($9) {
     $$015$lcssa = $6;
     label = 4;
     break;
    } else {
     $$01519 = $6;
     $23 = $7;
    }
   }
  }
 } while (0);
 if ((label | 0) == 4) {
  $$0 = $$015$lcssa;
  while (1) {
   $10 = SAFE_HEAP_LOAD($$0 | 0, 4, 0) | 0 | 0;
   $11 = $10 + -16843009 | 0;
   $12 = $10 & -2139062144;
   $13 = $12 ^ -2139062144;
   $14 = $13 & $11;
   $15 = ($14 | 0) == 0;
   $16 = $$0 + 4 | 0;
   if ($15) {
    $$0 = $16;
   } else {
    break;
   }
  }
  $17 = $10 & 255;
  $18 = $17 << 24 >> 24 == 0;
  if ($18) {
   $$1$lcssa = $$0;
  } else {
   $$pn = $$0;
   while (1) {
    $19 = $$pn + 1 | 0;
    $$pre = SAFE_HEAP_LOAD($19 >> 0 | 0, 1, 0) | 0 | 0;
    $20 = $$pre << 24 >> 24 == 0;
    if ($20) {
     $$1$lcssa = $19;
     break;
    } else {
     $$pn = $19;
    }
   }
  }
  $21 = $$1$lcssa;
  $$sink = $21;
 }
 $22 = $$sink - $1 | 0;
 return $22 | 0;
}

function __ZNK5Eigen9ArrayBaseINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEmlIfEENS_8internal9enable_ifILb1EKNS_13CwiseBinaryOpINS5_17scalar_product_opIfNS5_18promote_scalar_argIfT_Xsr5Eigen8internal14has_ReturnTypeINS_20ScalarBinaryOpTraitsIfSA_NS8_IfSA_EEEEEE5valueEE4typeEEEKS2_KNS5_19plain_constant_typeIS2_SF_E4typeEEEE4typeERKSA_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
 $5 = sp + 8 | 0;
 $6 = sp;
 $7 = sp + 24 | 0;
 $3 = $1;
 $4 = $2;
 $8 = $3;
 $9 = __ZNK5Eigen9EigenBaseINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv($8) | 0;
 $10 = __ZNK5Eigen9EigenBaseINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv($8) | 0;
 $11 = __ZNK5Eigen15PlainObjectBaseINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv($10) | 0;
 $12 = __ZNK5Eigen9EigenBaseINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv($8) | 0;
 $13 = __ZNK5Eigen15PlainObjectBaseINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv($12) | 0;
 $14 = $4;
 __ZN5Eigen8internal18scalar_constant_opIfEC2ERKf($6, $14);
 __ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEC2EiiRKS3_($5, $11, $13, $6);
 __ZN5Eigen8internal17scalar_product_opIffEC2Ev($7);
 __ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC2ERS6_RSB_RKS3_($0, $9, $5, $7);
 STACKTOP = sp;
 return;
}

function __ZNSt3__26vectorIN5Eigen5ArrayIfLi3ELi1ELi0ELi3ELi1EEENS_9allocatorIS3_EEE18__construct_at_endEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80 | 0);
 $10 = sp;
 $13 = sp + 73 | 0;
 $21 = sp + 72 | 0;
 $18 = $0;
 $19 = $1;
 $22 = $18;
 $17 = $22;
 $23 = $17;
 $24 = $23 + 8 | 0;
 $16 = $24;
 $25 = $16;
 $15 = $25;
 $26 = $15;
 $20 = $26;
 while (1) {
  $3 = $21;
  $4 = $22;
  $5 = 1;
  $27 = $20;
  $28 = $22 + 4 | 0;
  $29 = SAFE_HEAP_LOAD($28 | 0, 4, 0) | 0 | 0;
  $2 = $29;
  $30 = $2;
  $11 = $27;
  $12 = $30;
  $31 = $11;
  $32 = $12;
  {}
  SAFE_HEAP_STORE($10 >> 0 | 0, SAFE_HEAP_LOAD($13 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
  $8 = $31;
  $9 = $32;
  $33 = $8;
  $34 = $9;
  $6 = $33;
  $7 = $34;
  $35 = $7;
  __ZN5Eigen5ArrayIfLi3ELi1ELi0ELi3ELi1EEC2Ev($35);
  $36 = $22 + 4 | 0;
  $37 = SAFE_HEAP_LOAD($36 | 0, 4, 0) | 0 | 0;
  $38 = $37 + 12 | 0;
  SAFE_HEAP_STORE($36 | 0, $38 | 0, 4);
  $39 = $19;
  $40 = $39 + -1 | 0;
  $19 = $40;
  $14 = $21;
  $41 = $19;
  $42 = $41 >>> 0 > 0;
  if (!$42) {
   break;
  }
 }
 STACKTOP = sp;
 return;
}

function __ZNKSt3__26vectorIN5Eigen5ArrayIjLi3ELi1ELi0ELi3ELi1EEENS_9allocatorIS3_EEE8max_sizeEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80 | 0);
 $6 = sp + 8 | 0;
 $9 = sp + 77 | 0;
 $12 = sp;
 $14 = sp + 76 | 0;
 $19 = sp + 16 | 0;
 $20 = sp + 12 | 0;
 $18 = $0;
 $21 = $18;
 $17 = $21;
 $22 = $17;
 $23 = $22 + 8 | 0;
 $16 = $23;
 $24 = $16;
 $15 = $24;
 $25 = $15;
 $13 = $25;
 $26 = $13;
 {}
 SAFE_HEAP_STORE($12 >> 0 | 0, SAFE_HEAP_LOAD($14 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
 $11 = $26;
 $27 = $11;
 $10 = $27;
 SAFE_HEAP_STORE($19 | 0, 357913941 | 0, 4);
 SAFE_HEAP_STORE($20 | 0, 2147483647 | 0, 4);
 $7 = $19;
 $8 = $20;
 $28 = $7;
 $29 = $8;
 {}
 SAFE_HEAP_STORE($6 >> 0 | 0, SAFE_HEAP_LOAD($9 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
 $4 = $28;
 $5 = $29;
 $30 = $5;
 $31 = $4;
 $1 = $6;
 $2 = $30;
 $3 = $31;
 $32 = $2;
 $33 = SAFE_HEAP_LOAD($32 | 0, 4, 0) | 0 | 0;
 $34 = $3;
 $35 = SAFE_HEAP_LOAD($34 | 0, 4, 0) | 0 | 0;
 $36 = $33 >>> 0 < $35 >>> 0;
 $37 = $5;
 $38 = $4;
 $39 = $36 ? $37 : $38;
 $40 = SAFE_HEAP_LOAD($39 | 0, 4, 0) | 0 | 0;
 STACKTOP = sp;
 return $40 | 0;
}

function __ZNKSt3__26vectorIN5Eigen5ArrayIfLi3ELi1ELi0ELi3ELi1EEENS_9allocatorIS3_EEE8max_sizeEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80 | 0);
 $6 = sp + 8 | 0;
 $9 = sp + 77 | 0;
 $12 = sp;
 $14 = sp + 76 | 0;
 $19 = sp + 16 | 0;
 $20 = sp + 12 | 0;
 $18 = $0;
 $21 = $18;
 $17 = $21;
 $22 = $17;
 $23 = $22 + 8 | 0;
 $16 = $23;
 $24 = $16;
 $15 = $24;
 $25 = $15;
 $13 = $25;
 $26 = $13;
 {}
 SAFE_HEAP_STORE($12 >> 0 | 0, SAFE_HEAP_LOAD($14 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
 $11 = $26;
 $27 = $11;
 $10 = $27;
 SAFE_HEAP_STORE($19 | 0, 357913941 | 0, 4);
 SAFE_HEAP_STORE($20 | 0, 2147483647 | 0, 4);
 $7 = $19;
 $8 = $20;
 $28 = $7;
 $29 = $8;
 {}
 SAFE_HEAP_STORE($6 >> 0 | 0, SAFE_HEAP_LOAD($9 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
 $4 = $28;
 $5 = $29;
 $30 = $5;
 $31 = $4;
 $1 = $6;
 $2 = $30;
 $3 = $31;
 $32 = $2;
 $33 = SAFE_HEAP_LOAD($32 | 0, 4, 0) | 0 | 0;
 $34 = $3;
 $35 = SAFE_HEAP_LOAD($34 | 0, 4, 0) | 0 | 0;
 $36 = $33 >>> 0 < $35 >>> 0;
 $37 = $5;
 $38 = $4;
 $39 = $36 ? $37 : $38;
 $40 = SAFE_HEAP_LOAD($39 | 0, 4, 0) | 0 | 0;
 STACKTOP = sp;
 return $40 | 0;
}

function _memset(ptr, value, num) {
 ptr = ptr | 0;
 value = value | 0;
 num = num | 0;
 var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;
 end = ptr + num | 0;
 value = value & 255;
 if ((num | 0) >= 67) {
  while ((ptr & 3) != 0) {
   SAFE_HEAP_STORE(ptr | 0, value | 0, 1);
   ptr = ptr + 1 | 0;
  }
  aligned_end = end & -4 | 0;
  block_aligned_end = aligned_end - 64 | 0;
  value4 = value | value << 8 | value << 16 | value << 24;
  while ((ptr | 0) <= (block_aligned_end | 0)) {
   SAFE_HEAP_STORE(ptr | 0, value4 | 0, 4);
   SAFE_HEAP_STORE(ptr + 4 | 0, value4 | 0, 4);
   SAFE_HEAP_STORE(ptr + 8 | 0, value4 | 0, 4);
   SAFE_HEAP_STORE(ptr + 12 | 0, value4 | 0, 4);
   SAFE_HEAP_STORE(ptr + 16 | 0, value4 | 0, 4);
   SAFE_HEAP_STORE(ptr + 20 | 0, value4 | 0, 4);
   SAFE_HEAP_STORE(ptr + 24 | 0, value4 | 0, 4);
   SAFE_HEAP_STORE(ptr + 28 | 0, value4 | 0, 4);
   SAFE_HEAP_STORE(ptr + 32 | 0, value4 | 0, 4);
   SAFE_HEAP_STORE(ptr + 36 | 0, value4 | 0, 4);
   SAFE_HEAP_STORE(ptr + 40 | 0, value4 | 0, 4);
   SAFE_HEAP_STORE(ptr + 44 | 0, value4 | 0, 4);
   SAFE_HEAP_STORE(ptr + 48 | 0, value4 | 0, 4);
   SAFE_HEAP_STORE(ptr + 52 | 0, value4 | 0, 4);
   SAFE_HEAP_STORE(ptr + 56 | 0, value4 | 0, 4);
   SAFE_HEAP_STORE(ptr + 60 | 0, value4 | 0, 4);
   ptr = ptr + 64 | 0;
  }
  while ((ptr | 0) < (aligned_end | 0)) {
   SAFE_HEAP_STORE(ptr | 0, value4 | 0, 4);
   ptr = ptr + 4 | 0;
  }
 }
 while ((ptr | 0) < (end | 0)) {
  SAFE_HEAP_STORE(ptr | 0, value | 0, 1);
  ptr = ptr + 1 | 0;
 }
 return end - num | 0;
}

function __ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES6_EC2ERS6_S8_RKS3_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $4;
 __ZN5Eigen17CwiseBinaryOpImplINS_8internal13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES6_NS_5DenseEEC2Ev($8);
 $9 = $5;
 SAFE_HEAP_STORE($8 | 0, $9 | 0, 4);
 $10 = $8 + 4 | 0;
 $11 = $6;
 SAFE_HEAP_STORE($10 | 0, $11 | 0, 4);
 $12 = $8 + 8 | 0;
 $13 = $7;
 __ZN5Eigen8internal13scalar_sum_opIffEC2ERKS2_($12, $13);
 $14 = $5;
 $15 = __ZNK5Eigen15PlainObjectBaseINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv($14) | 0;
 $16 = $6;
 $17 = __ZNK5Eigen15PlainObjectBaseINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv($16) | 0;
 $18 = ($15 | 0) == ($17 | 0);
 if (!$18) {
  ___assert_fail(1915 | 0, 1972 | 0, 110, 2076 | 0);
 }
 $19 = $5;
 $20 = __ZNK5Eigen15PlainObjectBaseINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv($19) | 0;
 $21 = $6;
 $22 = __ZNK5Eigen15PlainObjectBaseINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv($21) | 0;
 $23 = ($20 | 0) == ($22 | 0);
 if ($23) {
  STACKTOP = sp;
  return;
 } else {
  ___assert_fail(1915 | 0, 1972 | 0, 110, 2076 | 0);
 }
}

function __ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE12_set_noaliasINS_13CwiseBinaryOpINS_8internal18scalar_quotient_opIffEEKNS_13MatrixWrapperIKNS5_INS6_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESE_EEEEKNS_14CwiseNullaryOpINS6_18scalar_constant_opIfEEKS2_EEEEEERS2_RKNS_9DenseBaseIT_EE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $4 = sp + 8 | 0;
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = __ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv($5) | 0;
 $7 = $3;
 $8 = __ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal18scalar_quotient_opIffEEKNS_13MatrixWrapperIKNS1_INS2_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESA_EEEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEEE7derivedEv($7) | 0;
 __ZN5Eigen8internal9assign_opIffEC2Ev($4);
 __ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_18scalar_quotient_opIffEEKNS_13MatrixWrapperIKNS4_INS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESC_EEEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKS3_EEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_($6, $8, $4);
 $9 = __ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv($5) | 0;
 STACKTOP = sp;
 return $9 | 0;
}

function __ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC2INS_13CwiseBinaryOpINS_8internal18scalar_quotient_opIffEEKNS_13MatrixWrapperIKNS5_INS6_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESE_EEEEKNS_14CwiseNullaryOpINS6_18scalar_constant_opIfEEKS2_EEEEEERKNS_9DenseBaseIT_EE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC2Ev($4);
 __ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EEC2Ev($4);
 __ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE22_check_template_paramsEv();
 $5 = $3;
 __ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE10resizeLikeINS_13CwiseBinaryOpINS_8internal18scalar_quotient_opIffEEKNS_13MatrixWrapperIKNS5_INS6_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESE_EEEEKNS_14CwiseNullaryOpINS6_18scalar_constant_opIfEEKS2_EEEEEEvRKNS_9EigenBaseIT_EE($4, $5);
 $6 = $3;
 __ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE12_set_noaliasINS_13CwiseBinaryOpINS_8internal18scalar_quotient_opIffEEKNS_13MatrixWrapperIKNS5_INS6_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESE_EEEEKNS_14CwiseNullaryOpINS6_18scalar_constant_opIfEEKS2_EEEEEERS2_RKNS_9DenseBaseIT_EE($4, $6) | 0;
 STACKTOP = sp;
 return;
}

function __ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_13CwiseBinaryOpINS0_18scalar_quotient_opIffEEKNS_13MatrixWrapperIKNS6_INS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESE_EEEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKS4_EEEEEENS0_9assign_opIffEELi0EE11assignCoeffEi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $4 = sp;
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = $5 + 8 | 0;
 $7 = SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0;
 $8 = SAFE_HEAP_LOAD($5 | 0, 4, 0) | 0 | 0;
 $9 = $3;
 $10 = __ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE8coeffRefEi($8, $9) | 0;
 $11 = $5 + 4 | 0;
 $12 = SAFE_HEAP_LOAD($11 | 0, 4, 0) | 0 | 0;
 $13 = $3;
 $14 = +__ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_18scalar_quotient_opIffEEKNS_13MatrixWrapperIKNS2_INS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESA_EEEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEENS0_10IndexBasedESO_ffE5coeffEi($12, $13);
 SAFE_HEAP_STORE_D($4 | 0, +$14, 4);
 __ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf($7, $10, $4);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_13CwiseBinaryOpINS0_18scalar_quotient_opIffEEKNS_13MatrixWrapperIKNS7_INS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESF_EEEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKS5_EEEEEENS0_9assign_opIffEELi0EEELi2ELi3EE3runERSU_($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 __ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_13CwiseBinaryOpINS0_18scalar_quotient_opIffEEKNS_13MatrixWrapperIKNS6_INS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESE_EEEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKS4_EEEEEENS0_9assign_opIffEELi0EE11assignCoeffEi($2, 2);
 $3 = $1;
 __ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_13CwiseBinaryOpINS0_18scalar_quotient_opIffEEKNS_13MatrixWrapperIKNS7_INS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESF_EEEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKS5_EEEEEENS0_9assign_opIffEELi0EEELi3ELi3EE3runERSU_($3);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_13CwiseBinaryOpINS0_18scalar_quotient_opIffEEKNS_13MatrixWrapperIKNS7_INS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESF_EEEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKS5_EEEEEENS0_9assign_opIffEELi0EEELi1ELi3EE3runERSU_($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 __ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_13CwiseBinaryOpINS0_18scalar_quotient_opIffEEKNS_13MatrixWrapperIKNS6_INS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESE_EEEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKS4_EEEEEENS0_9assign_opIffEELi0EE11assignCoeffEi($2, 1);
 $3 = $1;
 __ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_13CwiseBinaryOpINS0_18scalar_quotient_opIffEEKNS_13MatrixWrapperIKNS7_INS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESF_EEEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKS5_EEEEEENS0_9assign_opIffEELi0EEELi2ELi3EE3runERSU_($3);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_13CwiseBinaryOpINS0_18scalar_quotient_opIffEEKNS_13MatrixWrapperIKNS7_INS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESF_EEEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKS5_EEEEEENS0_9assign_opIffEELi0EEELi0ELi3EE3runERSU_($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 __ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_13CwiseBinaryOpINS0_18scalar_quotient_opIffEEKNS_13MatrixWrapperIKNS6_INS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESE_EEEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKS4_EEEEEENS0_9assign_opIffEELi0EE11assignCoeffEi($2, 0);
 $3 = $1;
 __ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_13CwiseBinaryOpINS0_18scalar_quotient_opIffEEKNS_13MatrixWrapperIKNS7_INS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESF_EEEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKS5_EEEEEENS0_9assign_opIffEELi0EEELi1ELi3EE3runERSU_($3);
 STACKTOP = sp;
 return;
}

function ___strerror_l($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$012$lcssa = 0, $$01214 = 0, $$016 = 0, $$113 = 0, $$115 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $$016 = 0;
 while (1) {
  $3 = 3113 + $$016 | 0;
  $4 = SAFE_HEAP_LOAD($3 >> 0 | 0, 1, 0) | 0 | 0;
  $5 = $4 & 255;
  $6 = ($5 | 0) == ($0 | 0);
  if ($6) {
   label = 2;
   break;
  }
  $7 = $$016 + 1 | 0;
  $8 = ($7 | 0) == 87;
  if ($8) {
   $$01214 = 3201;
   $$115 = 87;
   label = 5;
   break;
  } else {
   $$016 = $7;
  }
 }
 if ((label | 0) == 2) {
  $2 = ($$016 | 0) == 0;
  if ($2) {
   $$012$lcssa = 3201;
  } else {
   $$01214 = 3201;
   $$115 = $$016;
   label = 5;
  }
 }
 if ((label | 0) == 5) {
  while (1) {
   label = 0;
   $$113 = $$01214;
   while (1) {
    $9 = SAFE_HEAP_LOAD($$113 >> 0 | 0, 1, 0) | 0 | 0;
    $10 = $9 << 24 >> 24 == 0;
    $11 = $$113 + 1 | 0;
    if ($10) {
     break;
    } else {
     $$113 = $11;
    }
   }
   $12 = $$115 + -1 | 0;
   $13 = ($12 | 0) == 0;
   if ($13) {
    $$012$lcssa = $11;
    break;
   } else {
    $$01214 = $11;
    $$115 = $12;
    label = 5;
   }
  }
 }
 $14 = $1 + 20 | 0;
 $15 = SAFE_HEAP_LOAD($14 | 0, 4, 0) | 0 | 0;
 $16 = ___lctrans($$012$lcssa, $15) | 0;
 return $16 | 0;
}

function _frexp($0, $1) {
 $0 = +$0;
 $1 = $1 | 0;
 var $$0 = 0.0, $$016 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, $storemerge = 0, $trunc$clear = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 SAFE_HEAP_STORE_D(tempDoublePtr | 0, +$0, 8);
 $2 = SAFE_HEAP_LOAD(tempDoublePtr | 0, 4, 0) | 0 | 0;
 $3 = SAFE_HEAP_LOAD(tempDoublePtr + 4 | 0, 4, 0) | 0 | 0;
 $4 = _bitshift64Lshr($2 | 0, $3 | 0, 52) | 0;
 $5 = tempRet0;
 $6 = $4 & 65535;
 $trunc$clear = $6 & 2047;
 switch ($trunc$clear << 16 >> 16) {
 case 0:
  {
   $7 = $0 != 0.0;
   if ($7) {
    $8 = $0 * 18446744073709551616.0;
    $9 = +_frexp($8, $1);
    $10 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0;
    $11 = $10 + -64 | 0;
    $$016 = $9;
    $storemerge = $11;
   } else {
    $$016 = $0;
    $storemerge = 0;
   }
   SAFE_HEAP_STORE($1 | 0, $storemerge | 0, 4);
   $$0 = $$016;
   break;
  }
 case 2047:
  {
   $$0 = $0;
   break;
  }
 default:
  {
   $12 = $4 & 2047;
   $13 = $12 + -1022 | 0;
   SAFE_HEAP_STORE($1 | 0, $13 | 0, 4);
   $14 = $3 & -2146435073;
   $15 = $14 | 1071644672;
   SAFE_HEAP_STORE(tempDoublePtr | 0, $2 | 0, 4);
   SAFE_HEAP_STORE(tempDoublePtr + 4 | 0, $15 | 0, 4);
   $16 = +(+SAFE_HEAP_LOAD_D(tempDoublePtr | 0, 8));
   $$0 = $16;
  }
 }
 return +$$0;
}

function __ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS6_INS0_17scalar_product_opIffEEKS4_KNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEESB_EEEENS0_9assign_opIffEELi0EE11assignCoeffEi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $4 = sp;
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = $5 + 8 | 0;
 $7 = SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0;
 $8 = SAFE_HEAP_LOAD($5 | 0, 4, 0) | 0 | 0;
 $9 = $3;
 $10 = __ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEEE8coeffRefEi($8, $9) | 0;
 $11 = $5 + 4 | 0;
 $12 = SAFE_HEAP_LOAD($11 | 0, 4, 0) | 0 | 0;
 $13 = $3;
 $14 = +__ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS0_17scalar_product_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEES9_EENS0_10IndexBasedESI_ffE5coeffEi($12, $13);
 SAFE_HEAP_STORE_D($4 | 0, +$14, 4);
 __ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf($7, $10, $4);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_12CwiseUnaryOpINS0_14scalar_abs2_opIfEEKNS_13MatrixWrapperIKNS_13CwiseBinaryOpIS3_KNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESC_EEEEEEEELi1ELi2EE3runERKSI_RKS3_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $4 = sp + 4 | 0;
 $5 = sp;
 $2 = $0;
 $3 = $1;
 $6 = $3;
 $7 = $2;
 $8 = $3;
 $9 = +__ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_12CwiseUnaryOpINS0_14scalar_abs2_opIfEEKNS_13MatrixWrapperIKNS_13CwiseBinaryOpIS3_KNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESC_EEEEEEEELi1ELi1EE3runERKSI_RKS3_($7, $8);
 SAFE_HEAP_STORE_D($4 | 0, +$9, 4);
 $10 = $2;
 $11 = $3;
 $12 = +__ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_12CwiseUnaryOpINS0_14scalar_abs2_opIfEEKNS_13MatrixWrapperIKNS_13CwiseBinaryOpIS3_KNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESC_EEEEEEEELi2ELi1EE3runERKSI_RKS3_($10, $11);
 SAFE_HEAP_STORE_D($5 | 0, +$12, 4);
 $13 = +__ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_($6, $4, $5);
 STACKTOP = sp;
 return +$13;
}

function __ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_12CwiseUnaryOpINS0_14scalar_abs2_opIfEEKNS_13MatrixWrapperIKNS_13CwiseBinaryOpIS3_KNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESC_EEEEEEEELi0ELi3EE3runERKSI_RKS3_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $4 = sp + 4 | 0;
 $5 = sp;
 $2 = $0;
 $3 = $1;
 $6 = $3;
 $7 = $2;
 $8 = $3;
 $9 = +__ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_12CwiseUnaryOpINS0_14scalar_abs2_opIfEEKNS_13MatrixWrapperIKNS_13CwiseBinaryOpIS3_KNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESC_EEEEEEEELi0ELi1EE3runERKSI_RKS3_($7, $8);
 SAFE_HEAP_STORE_D($4 | 0, +$9, 4);
 $10 = $2;
 $11 = $3;
 $12 = +__ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_12CwiseUnaryOpINS0_14scalar_abs2_opIfEEKNS_13MatrixWrapperIKNS_13CwiseBinaryOpIS3_KNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESC_EEEEEEEELi1ELi2EE3runERKSI_RKS3_($10, $11);
 SAFE_HEAP_STORE_D($5 | 0, +$12, 4);
 $13 = +__ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_($6, $4, $5);
 STACKTOP = sp;
 return +$13;
}

function __ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_18scalar_quotient_opIffEEKNS_13MatrixWrapperIKNS4_INS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESC_EEEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKS3_EEEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSN_RKSP_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = $4;
 __ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_18scalar_quotient_opIffEEKNS_13MatrixWrapperIKNS4_INS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESC_EEEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKS3_EEEEEEvRKT_RKT0_($6, $7);
 $8 = $3;
 $9 = $4;
 $10 = $5;
 __ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_18scalar_quotient_opIffEEKNS_13MatrixWrapperIKNS4_INS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESC_EEEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKS3_EEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_($8, $9, $10);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC2EiiRKS3_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0;
 var $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $4;
 __ZN5Eigen10MatrixBaseINS_14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC2Ev($8);
 $9 = $5;
 __ZN5Eigen8internal19variable_if_dynamicIiLi3EEC2Ei($8, $9);
 $10 = $8 + 1 | 0;
 $11 = $6;
 __ZN5Eigen8internal19variable_if_dynamicIiLi1EEC2Ei($10, $11);
 $12 = $8 + 4 | 0;
 $13 = $7;
 __ZN5Eigen8internal18scalar_constant_opIfEC2ERKS2_($12, $13);
 $14 = $5;
 $15 = ($14 | 0) >= 0;
 $16 = $5;
 $17 = 3 == ($16 | 0);
 $or$cond = $15 & $17;
 $18 = $6;
 $19 = ($18 | 0) >= 0;
 $or$cond3 = $or$cond & $19;
 $20 = $6;
 $21 = 1 == ($20 | 0);
 $or$cond5 = $or$cond3 & $21;
 if ($or$cond5) {
  STACKTOP = sp;
  return;
 } else {
  ___assert_fail(2260 | 0, 2409 | 0, 74, 2514 | 0);
 }
}

function __ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEC2EiiRKS3_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0;
 var $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $4;
 __ZN5Eigen9ArrayBaseINS_14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEEEC2Ev($8);
 $9 = $5;
 __ZN5Eigen8internal19variable_if_dynamicIiLi3EEC2Ei($8, $9);
 $10 = $8 + 1 | 0;
 $11 = $6;
 __ZN5Eigen8internal19variable_if_dynamicIiLi1EEC2Ei($10, $11);
 $12 = $8 + 4 | 0;
 $13 = $7;
 __ZN5Eigen8internal18scalar_constant_opIfEC2ERKS2_($12, $13);
 $14 = $5;
 $15 = ($14 | 0) >= 0;
 $16 = $5;
 $17 = 3 == ($16 | 0);
 $or$cond = $15 & $17;
 $18 = $6;
 $19 = ($18 | 0) >= 0;
 $or$cond3 = $or$cond & $19;
 $20 = $6;
 $21 = 1 == ($20 | 0);
 $or$cond5 = $or$cond3 & $21;
 if ($or$cond5) {
  STACKTOP = sp;
  return;
 } else {
  ___assert_fail(2260 | 0, 2409 | 0, 74, 2514 | 0);
 }
}

function __ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS0_17scalar_product_opIffEEKS5_KNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEESC_EEEENS0_9assign_opIffEELi0EEELi2ELi3EE3runERSO_($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 __ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS6_INS0_17scalar_product_opIffEEKS4_KNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEESB_EEEENS0_9assign_opIffEELi0EE11assignCoeffEi($2, 2);
 $3 = $1;
 __ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS0_17scalar_product_opIffEEKS5_KNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEESC_EEEENS0_9assign_opIffEELi0EEELi3ELi3EE3runERSO_($3);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS0_17scalar_product_opIffEEKS5_KNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEESC_EEEENS0_9assign_opIffEELi0EEELi1ELi3EE3runERSO_($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 __ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS6_INS0_17scalar_product_opIffEEKS4_KNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEESB_EEEENS0_9assign_opIffEELi0EE11assignCoeffEi($2, 1);
 $3 = $1;
 __ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS0_17scalar_product_opIffEEKS5_KNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEESC_EEEENS0_9assign_opIffEELi0EEELi2ELi3EE3runERSO_($3);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS0_17scalar_product_opIffEEKS5_KNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEESC_EEEENS0_9assign_opIffEELi0EEELi0ELi3EE3runERSO_($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 __ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS6_INS0_17scalar_product_opIffEEKS4_KNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEESB_EEEENS0_9assign_opIffEELi0EE11assignCoeffEi($2, 0);
 $3 = $1;
 __ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS0_17scalar_product_opIffEEKS5_KNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEESC_EEEENS0_9assign_opIffEELi0EEELi1ELi3EE3runERSO_($3);
 STACKTOP = sp;
 return;
}

function __ZN14CreateGeometry18createSphereBufferEPviS0_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
 $vararg_buffer = sp;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $9 = $5;
 $8 = $9;
 $10 = $8;
 __ZN5flint8geometry12SphereBufferILj3EfE6CreateEPNS2_10CreateArgsE($10);
 $11 = $8;
 $12 = $11 + 36 | 0;
 $13 = SAFE_HEAP_LOAD($12 | 0, 4, 0) | 0 | 0;
 $14 = __ZNK5flint8geometry16SphereBufferBaseILj3EfE12GetPositionsEv($13) | 0;
 $4 = $14;
 $15 = $4;
 $16 = $15 + 4 | 0;
 $17 = SAFE_HEAP_LOAD($16 | 0, 4, 0) | 0 | 0;
 $18 = SAFE_HEAP_LOAD($15 | 0, 4, 0) | 0 | 0;
 $19 = $17;
 $20 = $18;
 $21 = $19 - $20 | 0;
 $22 = ($21 | 0) / 12 & -1;
 SAFE_HEAP_STORE($vararg_buffer | 0, $22 | 0, 4);
 _printf(843, $vararg_buffer) | 0;
 $23 = $5;
 SAFE_HEAP_STORE($0 | 0, $23 | 0, 4);
 $24 = $0 + 4 | 0;
 $25 = $6;
 SAFE_HEAP_STORE($24 | 0, $25 | 0, 4);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_13MatrixWrapperIKNS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESC_EEEEEENS0_9assign_opIffEELi0EE11assignCoeffEi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $4 = sp;
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = $5 + 8 | 0;
 $7 = SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0;
 $8 = SAFE_HEAP_LOAD($5 | 0, 4, 0) | 0 | 0;
 $9 = $3;
 $10 = __ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE8coeffRefEi($8, $9) | 0;
 $11 = $5 + 4 | 0;
 $12 = SAFE_HEAP_LOAD($11 | 0, 4, 0) | 0 | 0;
 $13 = $3;
 $14 = +__ZNK5Eigen8internal22evaluator_wrapper_baseINS_13MatrixWrapperIKNS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES8_EEEEE5coeffEi($12, $13);
 SAFE_HEAP_STORE_D($4 | 0, +$14, 4);
 __ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf($7, $10, $4);
 STACKTOP = sp;
 return;
}

function __ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_18scalar_quotient_opIffEEKNS_13MatrixWrapperIKNS2_INS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESA_EEEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEENS0_10IndexBasedESO_ffE5coeffEi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $4 = sp + 4 | 0;
 $5 = sp;
 $2 = $0;
 $3 = $1;
 $6 = $2;
 $7 = $6 + 4 | 0;
 $8 = $3;
 $9 = +__ZNK5Eigen8internal22evaluator_wrapper_baseINS_13MatrixWrapperIKNS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES8_EEEEE5coeffEi($7, $8);
 SAFE_HEAP_STORE_D($4 | 0, +$9, 4);
 $10 = $6 + 28 | 0;
 $11 = $3;
 $12 = +__ZNK5Eigen8internal9evaluatorINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE5coeffIiEEfT_($10, $11);
 SAFE_HEAP_STORE_D($5 | 0, +$12, 4);
 $13 = +__ZNK5Eigen8internal18scalar_quotient_opIffEclERKfS4_($6, $4, $5);
 STACKTOP = sp;
 return +$13;
}

function __ZN5Eigen15PlainObjectBaseINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEE4_setINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS5_INS6_17scalar_product_opIffEEKS2_KNS_14CwiseNullaryOpINS6_18scalar_constant_opIfEESB_EEEESB_EEEERS2_RKNS_9DenseBaseIT_EE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = __ZN5Eigen9EigenBaseINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv($4) | 0;
 $6 = $3;
 $7 = __ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS2_17scalar_product_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEES9_EEE7derivedEv($6) | 0;
 __ZN5Eigen8internal15call_assignmentINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS0_17scalar_product_opIffEEKS3_KNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEES9_EEEEvRT_RKT0_($5, $7);
 $8 = __ZN5Eigen9EigenBaseINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv($4) | 0;
 STACKTOP = sp;
 return $8 | 0;
}

function __ZN5Eigen5ArrayIjLi3ELi1ELi0ELi3ELi1EEC2ERKjS3_S3_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $4;
 __ZN5Eigen15PlainObjectBaseINS_5ArrayIjLi3ELi1ELi0ELi3ELi1EEEEC2Ev($8);
 __ZN5Eigen15PlainObjectBaseINS_5ArrayIjLi3ELi1ELi0ELi3ELi1EEEE22_check_template_paramsEv();
 $9 = $5;
 $10 = SAFE_HEAP_LOAD($9 | 0, 4, 0) | 0 | 0;
 $11 = __ZN5Eigen12DenseStorageIjLi3ELi3ELi1ELi0EE4dataEv($8) | 0;
 SAFE_HEAP_STORE($11 | 0, $10 | 0, 4);
 $12 = $6;
 $13 = SAFE_HEAP_LOAD($12 | 0, 4, 0) | 0 | 0;
 $14 = __ZN5Eigen12DenseStorageIjLi3ELi3ELi1ELi0EE4dataEv($8) | 0;
 $15 = $14 + 4 | 0;
 SAFE_HEAP_STORE($15 | 0, $13 | 0, 4);
 $16 = $7;
 $17 = SAFE_HEAP_LOAD($16 | 0, 4, 0) | 0 | 0;
 $18 = __ZN5Eigen12DenseStorageIjLi3ELi3ELi1ELi0EE4dataEv($8) | 0;
 $19 = $18 + 8 | 0;
 SAFE_HEAP_STORE($19 | 0, $17 | 0, 4);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC2INS_13MatrixWrapperIKNS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESC_EEEEEERKNS_9DenseBaseIT_EE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC2Ev($4);
 __ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EEC2Ev($4);
 __ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE22_check_template_paramsEv();
 $5 = $3;
 __ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE10resizeLikeINS_13MatrixWrapperIKNS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESC_EEEEEEvRKNS_9EigenBaseIT_EE($4, $5);
 $6 = $3;
 __ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE12_set_noaliasINS_13MatrixWrapperIKNS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESC_EEEEEERS2_RKNS_9DenseBaseIT_EE($4, $6) | 0;
 STACKTOP = sp;
 return;
}

function ___stdio_seek($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$pre = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
 $vararg_buffer = sp;
 $3 = sp + 20 | 0;
 $4 = $0 + 60 | 0;
 $5 = SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0;
 $6 = $3;
 SAFE_HEAP_STORE($vararg_buffer | 0, $5 | 0, 4);
 $vararg_ptr1 = $vararg_buffer + 4 | 0;
 SAFE_HEAP_STORE($vararg_ptr1 | 0, 0 | 0, 4);
 $vararg_ptr2 = $vararg_buffer + 8 | 0;
 SAFE_HEAP_STORE($vararg_ptr2 | 0, $1 | 0, 4);
 $vararg_ptr3 = $vararg_buffer + 12 | 0;
 SAFE_HEAP_STORE($vararg_ptr3 | 0, $6 | 0, 4);
 $vararg_ptr4 = $vararg_buffer + 16 | 0;
 SAFE_HEAP_STORE($vararg_ptr4 | 0, $2 | 0, 4);
 $7 = ___syscall140(140, $vararg_buffer | 0) | 0;
 $8 = ___syscall_ret($7) | 0;
 $9 = ($8 | 0) < 0;
 if ($9) {
  SAFE_HEAP_STORE($3 | 0, -1 | 0, 4);
  $10 = -1;
 } else {
  $$pre = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0;
  $10 = $$pre;
 }
 STACKTOP = sp;
 return $10 | 0;
}

function __ZN5Eigen5ArrayIfLi3ELi1ELi0ELi3ELi1EEC2ERKfS3_S3_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $4;
 __ZN5Eigen15PlainObjectBaseINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEC2Ev($8);
 __ZN5Eigen15PlainObjectBaseINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEE22_check_template_paramsEv();
 $9 = $5;
 $10 = +(+SAFE_HEAP_LOAD_D($9 | 0, 4));
 $11 = __ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE4dataEv($8) | 0;
 SAFE_HEAP_STORE_D($11 | 0, +$10, 4);
 $12 = $6;
 $13 = +(+SAFE_HEAP_LOAD_D($12 | 0, 4));
 $14 = __ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE4dataEv($8) | 0;
 $15 = $14 + 4 | 0;
 SAFE_HEAP_STORE_D($15 | 0, +$13, 4);
 $16 = $7;
 $17 = +(+SAFE_HEAP_LOAD_D($16 | 0, 4));
 $18 = __ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE4dataEv($8) | 0;
 $19 = $18 + 8 | 0;
 SAFE_HEAP_STORE_D($19 | 0, +$17, 4);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE12_set_noaliasINS_13MatrixWrapperIKNS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESC_EEEEEERS2_RKNS_9DenseBaseIT_EE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $4 = sp + 8 | 0;
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = __ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv($5) | 0;
 $7 = $3;
 $8 = __ZNK5Eigen9EigenBaseINS_13MatrixWrapperIKNS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES8_EEEEE7derivedEv($7) | 0;
 __ZN5Eigen8internal9assign_opIffEC2Ev($4);
 __ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13MatrixWrapperIKNS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESA_EEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_($6, $8, $4);
 $9 = __ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv($5) | 0;
 STACKTOP = sp;
 return $9 | 0;
}

function __ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_13MatrixWrapperIKNS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESD_EEEEEENS0_9assign_opIffEELi0EEELi2ELi3EE3runERSK_($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 __ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_13MatrixWrapperIKNS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESC_EEEEEENS0_9assign_opIffEELi0EE11assignCoeffEi($2, 2);
 $3 = $1;
 __ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_13MatrixWrapperIKNS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESD_EEEEEENS0_9assign_opIffEELi0EEELi3ELi3EE3runERSK_($3);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_13MatrixWrapperIKNS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESD_EEEEEENS0_9assign_opIffEELi0EEELi1ELi3EE3runERSK_($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 __ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_13MatrixWrapperIKNS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESC_EEEEEENS0_9assign_opIffEELi0EE11assignCoeffEi($2, 1);
 $3 = $1;
 __ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_13MatrixWrapperIKNS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESD_EEEEEENS0_9assign_opIffEELi0EEELi2ELi3EE3runERSK_($3);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_13MatrixWrapperIKNS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESD_EEEEEENS0_9assign_opIffEELi0EEELi0ELi3EE3runERSK_($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 __ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_13MatrixWrapperIKNS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESC_EEEEEENS0_9assign_opIffEELi0EE11assignCoeffEi($2, 0);
 $3 = $1;
 __ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_13MatrixWrapperIKNS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESD_EEEEEENS0_9assign_opIffEELi0EEELi1ELi3EE3runERSK_($3);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen8internal10AssignmentINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS0_17scalar_product_opIffEEKS3_KNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEES9_EENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSH_RKSJ_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = $4;
 __ZN5Eigen8internal18check_for_aliasingINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS0_17scalar_product_opIffEEKS3_KNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEES9_EEEEvRKT_RKT0_($6, $7);
 $8 = $3;
 $9 = $4;
 $10 = $5;
 __ZN5Eigen8internal26call_dense_assignment_loopINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS0_17scalar_product_opIffEEKS3_KNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEES9_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_($8, $9, $10);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC2INS_13CwiseBinaryOpINS_8internal18scalar_quotient_opIffEEKNS_13MatrixWrapperIKNS3_INS4_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESC_EEEEKNS_14CwiseNullaryOpINS4_18scalar_constant_opIfEEKS1_EEEEEERKNS_9EigenBaseIT_EE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 $6 = __ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal18scalar_quotient_opIffEEKNS_13MatrixWrapperIKNS1_INS2_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESA_EEEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEEE7derivedEv($5) | 0;
 __ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC2INS_13CwiseBinaryOpINS_8internal18scalar_quotient_opIffEEKNS_13MatrixWrapperIKNS5_INS6_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESE_EEEEKNS_14CwiseNullaryOpINS6_18scalar_constant_opIfEEKS2_EEEEEERKNS_9DenseBaseIT_EE($4, $6);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen8internal9evaluatorINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC2ERKS8_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $2 = $0;
 $3 = $1;
 $6 = $2;
 __ZN5Eigen8internal14evaluator_baseINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC2Ev($6);
 $7 = $3;
 __THREW__ = 0;
 $8 = invoke_ii(100, $7 | 0) | 0;
 $9 = __THREW__;
 __THREW__ = 0;
 $10 = $9 & 1;
 if (!$10) {
  __THREW__ = 0;
  invoke_vii(101, $6 | 0, $8 | 0);
  $11 = __THREW__;
  __THREW__ = 0;
  $12 = $11 & 1;
  if (!$12) {
   STACKTOP = sp;
   return;
  }
 }
 $13 = ___cxa_find_matching_catch_2() | 0;
 $14 = tempRet0;
 $4 = $13;
 $5 = $14;
 __ZN5Eigen8internal14evaluator_baseINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED2Ev($6);
 $15 = $4;
 $16 = $5;
 ___resumeException($15 | 0);
}

function __ZN5Eigen8internal9evaluatorINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEEEC2ERKS8_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $2 = $0;
 $3 = $1;
 $6 = $2;
 __ZN5Eigen8internal14evaluator_baseINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEEEC2Ev($6);
 $7 = $3;
 __THREW__ = 0;
 $8 = invoke_ii(121, $7 | 0) | 0;
 $9 = __THREW__;
 __THREW__ = 0;
 $10 = $9 & 1;
 if (!$10) {
  __THREW__ = 0;
  invoke_vii(101, $6 | 0, $8 | 0);
  $11 = __THREW__;
  __THREW__ = 0;
  $12 = $11 & 1;
  if (!$12) {
   STACKTOP = sp;
   return;
  }
 }
 $13 = ___cxa_find_matching_catch_2() | 0;
 $14 = tempRet0;
 $4 = $13;
 $5 = $14;
 __ZN5Eigen8internal14evaluator_baseINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEEED2Ev($6);
 $15 = $4;
 $16 = $5;
 ___resumeException($15 | 0);
}

function __ZNK5Eigen9ArrayBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEEplIS6_EEKNS1_INS2_13scalar_sum_opIfNS2_6traitsIT_E6ScalarEEEKSD_KSI_EERKNS0_ISI_EE($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $5 = sp + 8 | 0;
 $3 = $1;
 $4 = $2;
 $6 = $3;
 $7 = __ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEE7derivedEv($6) | 0;
 $8 = $4;
 $9 = __ZNK5Eigen9EigenBaseINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv($8) | 0;
 __ZN5Eigen8internal13scalar_sum_opIffEC2Ev($5);
 __ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS1_17scalar_product_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEES8_EC2ERSF_RS8_RKS3_($0, $7, $9, $5);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_18scalar_quotient_opIffEEKNS_13MatrixWrapperIKNS2_INS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESA_EEEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEENS0_10IndexBasedESO_ffED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 $3 = $2 + 28 | 0;
 __ZN5Eigen8internal9evaluatorIKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED2Ev($3);
 $4 = $2 + 4 | 0;
 __ZN5Eigen8internal9evaluatorIKNS_13MatrixWrapperIKNS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES8_EEEEED2Ev($4);
 __ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_18scalar_quotient_opIffEEKNS_13MatrixWrapperIKNS2_INS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESA_EEEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEEED2Ev($2);
 STACKTOP = sp;
 return;
}

function ___stdout_write($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
 $vararg_buffer = sp;
 $3 = sp + 16 | 0;
 $4 = $0 + 36 | 0;
 SAFE_HEAP_STORE($4 | 0, 2 | 0, 4);
 $5 = SAFE_HEAP_LOAD($0 | 0, 4, 0) | 0 | 0;
 $6 = $5 & 64;
 $7 = ($6 | 0) == 0;
 if ($7) {
  $8 = $0 + 60 | 0;
  $9 = SAFE_HEAP_LOAD($8 | 0, 4, 0) | 0 | 0;
  $10 = $3;
  SAFE_HEAP_STORE($vararg_buffer | 0, $9 | 0, 4);
  $vararg_ptr1 = $vararg_buffer + 4 | 0;
  SAFE_HEAP_STORE($vararg_ptr1 | 0, 21523 | 0, 4);
  $vararg_ptr2 = $vararg_buffer + 8 | 0;
  SAFE_HEAP_STORE($vararg_ptr2 | 0, $10 | 0, 4);
  $11 = ___syscall54(54, $vararg_buffer | 0) | 0;
  $12 = ($11 | 0) == 0;
  if (!$12) {
   $13 = $0 + 75 | 0;
   SAFE_HEAP_STORE($13 >> 0 | 0, -1 | 0, 1);
  }
 }
 $14 = ___stdio_write($0, $1, $2) | 0;
 STACKTOP = sp;
 return $14 | 0;
}

function ___towrite($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0 + 74 | 0;
 $2 = SAFE_HEAP_LOAD($1 >> 0 | 0, 1, 0) | 0 | 0;
 $3 = $2 << 24 >> 24;
 $4 = $3 + 255 | 0;
 $5 = $4 | $3;
 $6 = $5 & 255;
 SAFE_HEAP_STORE($1 >> 0 | 0, $6 | 0, 1);
 $7 = SAFE_HEAP_LOAD($0 | 0, 4, 0) | 0 | 0;
 $8 = $7 & 8;
 $9 = ($8 | 0) == 0;
 if ($9) {
  $11 = $0 + 8 | 0;
  SAFE_HEAP_STORE($11 | 0, 0 | 0, 4);
  $12 = $0 + 4 | 0;
  SAFE_HEAP_STORE($12 | 0, 0 | 0, 4);
  $13 = $0 + 44 | 0;
  $14 = SAFE_HEAP_LOAD($13 | 0, 4, 0) | 0 | 0;
  $15 = $0 + 28 | 0;
  SAFE_HEAP_STORE($15 | 0, $14 | 0, 4);
  $16 = $0 + 20 | 0;
  SAFE_HEAP_STORE($16 | 0, $14 | 0, 4);
  $17 = $0 + 48 | 0;
  $18 = SAFE_HEAP_LOAD($17 | 0, 4, 0) | 0 | 0;
  $19 = $14 + $18 | 0;
  $20 = $0 + 16 | 0;
  SAFE_HEAP_STORE($20 | 0, $19 | 0, 4);
  $$0 = 0;
 } else {
  $10 = $7 | 32;
  SAFE_HEAP_STORE($0 | 0, $10 | 0, 4);
  $$0 = -1;
 }
 return $$0 | 0;
}

function __ZN5Eigen8internal22evaluator_wrapper_baseINS_13MatrixWrapperIKNS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES8_EEEEEC2ERSA_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $2 = $0;
 $3 = $1;
 $6 = $2;
 __ZN5Eigen8internal14evaluator_baseINS_13MatrixWrapperIKNS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES8_EEEEEC2Ev($6);
 $7 = $6 + 4 | 0;
 $8 = $3;
 __THREW__ = 0;
 invoke_vii(84, $7 | 0, $8 | 0);
 $9 = __THREW__;
 __THREW__ = 0;
 $10 = $9 & 1;
 if ($10) {
  $11 = ___cxa_find_matching_catch_2() | 0;
  $12 = tempRet0;
  $4 = $11;
  $5 = $12;
  __ZN5Eigen8internal14evaluator_baseINS_13MatrixWrapperIKNS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES8_EEEEED2Ev($6);
  $13 = $4;
  $14 = $5;
  ___resumeException($13 | 0);
 } else {
  STACKTOP = sp;
  return;
 }
}

function __ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS0_17scalar_product_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEES9_EENS0_10IndexBasedESI_ffE5coeffEi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $4 = sp;
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = $5 + 4 | 0;
 $7 = $3;
 $8 = +__ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffE5coeffEi($6, $7);
 SAFE_HEAP_STORE_D($4 | 0, +$8, 4);
 $9 = $5 + 24 | 0;
 $10 = $3;
 $11 = __ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEEE5coeffEi($9, $10) | 0;
 $12 = +__ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_($5, $4, $11);
 STACKTOP = sp;
 return +$12;
}

function __ZNK5Eigen15DenseCoeffsBaseINS_5ArrayIjLi3ELi1ELi0ELi3ELi1EEELi0EE5coeffEi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
 $4 = sp + 8 | 0;
 $2 = $0;
 $3 = $1;
 $7 = $2;
 $8 = __ZNK5Eigen9EigenBaseINS_5ArrayIjLi3ELi1ELi0ELi3ELi1EEEE7derivedEv($7) | 0;
 __ZN5Eigen8internal9evaluatorINS_5ArrayIjLi3ELi1ELi0ELi3ELi1EEEEC2ERKS3_($4, $8);
 $9 = $3;
 __THREW__ = 0;
 $10 = invoke_iii(78, $4 | 0, $9 | 0) | 0;
 $11 = __THREW__;
 __THREW__ = 0;
 $12 = $11 & 1;
 if ($12) {
  $13 = ___cxa_find_matching_catch_2() | 0;
  $14 = tempRet0;
  $5 = $13;
  $6 = $14;
  __ZN5Eigen8internal9evaluatorINS_5ArrayIjLi3ELi1ELi0ELi3ELi1EEEED2Ev($4);
  $15 = $5;
  $16 = $6;
  ___resumeException($15 | 0);
 } else {
  __ZN5Eigen8internal9evaluatorINS_5ArrayIjLi3ELi1ELi0ELi3ELi1EEEED2Ev($4);
  STACKTOP = sp;
  return $10 | 0;
 }
 return 0 | 0;
}

function __ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $5;
 $9 = $6;
 $10 = ($9 | 0) == 3;
 $11 = $7;
 $12 = ($11 | 0) == 1;
 $or$cond = $10 & $12;
 $13 = $6;
 $14 = ($13 | 0) >= 0;
 $or$cond3 = $or$cond & $14;
 $15 = $7;
 $16 = ($15 | 0) >= 0;
 $or$cond5 = $or$cond3 & $16;
 if ($or$cond5) {
  $17 = $6;
  $18 = $7;
  $3 = $17;
  $4 = $18;
  $19 = $6;
  $20 = $7;
  $21 = Math_imul($19, $20) | 0;
  $22 = $6;
  $23 = $7;
  __ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE6resizeEiii($8, $21, $22, $23);
  STACKTOP = sp;
  return;
 } else {
  ___assert_fail(1257 | 0, 1656 | 0, 285, 1762 | 0);
 }
}

function __ZN5Eigen15PlainObjectBaseINS_5ArrayIjLi3ELi1ELi0ELi3ELi1EEEE6resizeEii($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $5;
 $9 = $6;
 $10 = ($9 | 0) == 3;
 $11 = $7;
 $12 = ($11 | 0) == 1;
 $or$cond = $10 & $12;
 $13 = $6;
 $14 = ($13 | 0) >= 0;
 $or$cond3 = $or$cond & $14;
 $15 = $7;
 $16 = ($15 | 0) >= 0;
 $or$cond5 = $or$cond3 & $16;
 if ($or$cond5) {
  $17 = $6;
  $18 = $7;
  $3 = $17;
  $4 = $18;
  $19 = $6;
  $20 = $7;
  $21 = Math_imul($19, $20) | 0;
  $22 = $6;
  $23 = $7;
  __ZN5Eigen12DenseStorageIjLi3ELi3ELi1ELi0EE6resizeEiii($8, $21, $22, $23);
  STACKTOP = sp;
  return;
 } else {
  ___assert_fail(1257 | 0, 1656 | 0, 285, 1762 | 0);
 }
}

function __ZN5Eigen15PlainObjectBaseINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $5;
 $9 = $6;
 $10 = ($9 | 0) == 3;
 $11 = $7;
 $12 = ($11 | 0) == 1;
 $or$cond = $10 & $12;
 $13 = $6;
 $14 = ($13 | 0) >= 0;
 $or$cond3 = $or$cond & $14;
 $15 = $7;
 $16 = ($15 | 0) >= 0;
 $or$cond5 = $or$cond3 & $16;
 if ($or$cond5) {
  $17 = $6;
  $18 = $7;
  $3 = $17;
  $4 = $18;
  $19 = $6;
  $20 = $7;
  $21 = Math_imul($19, $20) | 0;
  $22 = $6;
  $23 = $7;
  __ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE6resizeEiii($8, $21, $22, $23);
  STACKTOP = sp;
  return;
 } else {
  ___assert_fail(1257 | 0, 1656 | 0, 285, 1762 | 0);
 }
}

function __ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC2ERKS5_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $2 = $0;
 $3 = $1;
 $6 = $2;
 __ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC2Ev($6);
 $7 = $3;
 __THREW__ = 0;
 $8 = invoke_ii(102, $7 | 0) | 0;
 $9 = __THREW__;
 __THREW__ = 0;
 $10 = $9 & 1;
 if (!$10) {
  SAFE_HEAP_STORE($6 | 0, $8 | 0, 4);
  $11 = $6 + 4 | 0;
  __THREW__ = 0;
  invoke_vii(67, $11 | 0, 0);
  $12 = __THREW__;
  __THREW__ = 0;
  $13 = $12 & 1;
  if (!$13) {
   STACKTOP = sp;
   return;
  }
 }
 $14 = ___cxa_find_matching_catch_2() | 0;
 $15 = tempRet0;
 $4 = $14;
 $5 = $15;
 __ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED2Ev($6);
 $16 = $4;
 $17 = $5;
 ___resumeException($16 | 0);
}

function __ZSt11__terminatePFvvE($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 __THREW__ = 0;
 invoke_v($0 | 0);
 $1 = __THREW__;
 __THREW__ = 0;
 $2 = $1 & 1;
 if (!$2) {
  __THREW__ = 0;
  invoke_vii(126, 5439 | 0, $vararg_buffer | 0);
  $3 = __THREW__;
  __THREW__ = 0;
 }
 $4 = ___cxa_find_matching_catch_3(0 | 0) | 0;
 $5 = tempRet0;
 ___cxa_begin_catch($4 | 0) | 0;
 __THREW__ = 0;
 invoke_vii(126, 5479 | 0, $vararg_buffer1 | 0);
 $6 = __THREW__;
 __THREW__ = 0;
 $7 = ___cxa_find_matching_catch_3(0 | 0) | 0;
 $8 = tempRet0;
 __THREW__ = 0;
 invoke_v(127);
 $9 = __THREW__;
 __THREW__ = 0;
 $10 = $9 & 1;
 if ($10) {
  $11 = ___cxa_find_matching_catch_3(0 | 0) | 0;
  $12 = tempRet0;
  ___clang_call_terminate($11);
 } else {
  ___clang_call_terminate($7);
 }
}

function __ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_5ArrayIjLi3ELi1ELi0ELi3ELi1EEEEEEC2ERKS5_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $2 = $0;
 $3 = $1;
 $6 = $2;
 __ZN5Eigen8internal14evaluator_baseINS_5ArrayIjLi3ELi1ELi0ELi3ELi1EEEEC2Ev($6);
 $7 = $3;
 __THREW__ = 0;
 $8 = invoke_ii(66, $7 | 0) | 0;
 $9 = __THREW__;
 __THREW__ = 0;
 $10 = $9 & 1;
 if (!$10) {
  SAFE_HEAP_STORE($6 | 0, $8 | 0, 4);
  $11 = $6 + 4 | 0;
  __THREW__ = 0;
  invoke_vii(67, $11 | 0, 0);
  $12 = __THREW__;
  __THREW__ = 0;
  $13 = $12 & 1;
  if (!$13) {
   STACKTOP = sp;
   return;
  }
 }
 $14 = ___cxa_find_matching_catch_2() | 0;
 $15 = tempRet0;
 $4 = $14;
 $5 = $15;
 __ZN5Eigen8internal14evaluator_baseINS_5ArrayIjLi3ELi1ELi0ELi3ELi1EEEED2Ev($6);
 $16 = $4;
 $17 = $5;
 ___resumeException($16 | 0);
}

function __ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEEEC2ERKS5_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $2 = $0;
 $3 = $1;
 $6 = $2;
 __ZN5Eigen8internal14evaluator_baseINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEC2Ev($6);
 $7 = $3;
 __THREW__ = 0;
 $8 = invoke_ii(77, $7 | 0) | 0;
 $9 = __THREW__;
 __THREW__ = 0;
 $10 = $9 & 1;
 if (!$10) {
  SAFE_HEAP_STORE($6 | 0, $8 | 0, 4);
  $11 = $6 + 4 | 0;
  __THREW__ = 0;
  invoke_vii(67, $11 | 0, 0);
  $12 = __THREW__;
  __THREW__ = 0;
  $13 = $12 & 1;
  if (!$13) {
   STACKTOP = sp;
   return;
  }
 }
 $14 = ___cxa_find_matching_catch_2() | 0;
 $15 = tempRet0;
 $4 = $14;
 $5 = $15;
 __ZN5Eigen8internal14evaluator_baseINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEED2Ev($6);
 $16 = $4;
 $17 = $5;
 ___resumeException($16 | 0);
}

function __ZSt9terminatev() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $0 = invoke_i(125) | 0;
 $1 = __THREW__;
 __THREW__ = 0;
 $2 = $1 & 1;
 if ($2) {
  $20 = ___cxa_find_matching_catch_3(0 | 0) | 0;
  $21 = tempRet0;
  ___clang_call_terminate($20);
 }
 $3 = ($0 | 0) == (0 | 0);
 if (!$3) {
  $4 = SAFE_HEAP_LOAD($0 | 0, 4, 0) | 0 | 0;
  $5 = ($4 | 0) == (0 | 0);
  if (!$5) {
   $6 = $4 + 48 | 0;
   $7 = $6;
   $8 = $7;
   $9 = SAFE_HEAP_LOAD($8 | 0, 4, 0) | 0 | 0;
   $10 = $7 + 4 | 0;
   $11 = $10;
   $12 = SAFE_HEAP_LOAD($11 | 0, 4, 0) | 0 | 0;
   $13 = $9 & -256;
   $14 = ($13 | 0) == 1126902528;
   $15 = ($12 | 0) == 1129074247;
   $16 = $14 & $15;
   if ($16) {
    $17 = $4 + 12 | 0;
    $18 = SAFE_HEAP_LOAD($17 | 0, 4, 0) | 0 | 0;
    __ZSt11__terminatePFvvE($18);
   }
  }
 }
 $19 = __ZSt13get_terminatev() | 0;
 __ZSt11__terminatePFvvE($19);
}

function __ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_13CwiseBinaryOpINS0_18scalar_quotient_opIffEEKNS_13MatrixWrapperIKNS6_INS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESE_EEEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKS4_EEEEEENS0_9assign_opIffEELi0EEC2ERS5_RKSQ_RKSS_RS4_($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = $5;
 $11 = $6;
 SAFE_HEAP_STORE($10 | 0, $11 | 0, 4);
 $12 = $10 + 4 | 0;
 $13 = $7;
 SAFE_HEAP_STORE($12 | 0, $13 | 0, 4);
 $14 = $10 + 8 | 0;
 $15 = $8;
 SAFE_HEAP_STORE($14 | 0, $15 | 0, 4);
 $16 = $10 + 12 | 0;
 $17 = $9;
 SAFE_HEAP_STORE($16 | 0, $17 | 0, 4);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13MatrixWrapperIKNS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESA_EEEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSD_RKSF_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = $4;
 __ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13MatrixWrapperIKNS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESA_EEEEEEvRKT_RKT0_($6, $7);
 $8 = $3;
 $9 = $4;
 $10 = $5;
 __ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13MatrixWrapperIKNS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESA_EEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_($8, $9, $10);
 STACKTOP = sp;
 return;
}

function _strcmp($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$011 = 0, $$0710 = 0, $$lcssa = 0, $$lcssa8 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = SAFE_HEAP_LOAD($0 >> 0 | 0, 1, 0) | 0 | 0;
 $3 = SAFE_HEAP_LOAD($1 >> 0 | 0, 1, 0) | 0 | 0;
 $4 = $2 << 24 >> 24 != $3 << 24 >> 24;
 $5 = $2 << 24 >> 24 == 0;
 $or$cond9 = $5 | $4;
 if ($or$cond9) {
  $$lcssa = $3;
  $$lcssa8 = $2;
 } else {
  $$011 = $1;
  $$0710 = $0;
  while (1) {
   $6 = $$0710 + 1 | 0;
   $7 = $$011 + 1 | 0;
   $8 = SAFE_HEAP_LOAD($6 >> 0 | 0, 1, 0) | 0 | 0;
   $9 = SAFE_HEAP_LOAD($7 >> 0 | 0, 1, 0) | 0 | 0;
   $10 = $8 << 24 >> 24 != $9 << 24 >> 24;
   $11 = $8 << 24 >> 24 == 0;
   $or$cond = $11 | $10;
   if ($or$cond) {
    $$lcssa = $9;
    $$lcssa8 = $8;
    break;
   } else {
    $$011 = $7;
    $$0710 = $6;
   }
  }
 }
 $12 = $$lcssa8 & 255;
 $13 = $$lcssa & 255;
 $14 = $12 - $13 | 0;
 return $14 | 0;
}

function __ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_13CwiseBinaryOpINS0_18scalar_quotient_opIffEEKNS_13MatrixWrapperIKNS7_INS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESF_EEEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKS5_EEEEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSU_($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 __ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_13CwiseBinaryOpINS0_18scalar_quotient_opIffEEKNS_13MatrixWrapperIKNS7_INS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESF_EEEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKS5_EEEEEENS0_9assign_opIffEELi0EEELi0ELi3EE3runERSU_($2);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $4 + 8 | 0;
 $6 = SAFE_HEAP_LOAD($5 | 0, 4, 0) | 0 | 0;
 $7 = SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0;
 $8 = $3;
 $9 = __ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEEE8coeffRefEi($7, $8) | 0;
 $10 = $4 + 4 | 0;
 $11 = SAFE_HEAP_LOAD($10 | 0, 4, 0) | 0 | 0;
 $12 = $3;
 $13 = __ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE5coeffEi($11, $12) | 0;
 __ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf($6, $9, $13);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_18scalar_quotient_opIffEEKNS_13MatrixWrapperIKNS4_INS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESC_EEEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKS3_EEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $3;
 $6 = $7;
 $8 = $6;
 $9 = $4;
 $10 = $5;
 __ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_18scalar_quotient_opIffEEKNS_13MatrixWrapperIKNS4_INS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESC_EEEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKS3_EEEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSN_RKSP_($8, $9, $10);
 STACKTOP = sp;
 return;
}

function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = $1 + 16 | 0;
 $5 = SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0;
 $6 = ($5 | 0) == (0 | 0);
 $7 = $1 + 36 | 0;
 $8 = $1 + 24 | 0;
 do {
  if ($6) {
   SAFE_HEAP_STORE($4 | 0, $2 | 0, 4);
   SAFE_HEAP_STORE($8 | 0, $3 | 0, 4);
   SAFE_HEAP_STORE($7 | 0, 1 | 0, 4);
  } else {
   $9 = ($5 | 0) == ($2 | 0);
   if (!$9) {
    $12 = SAFE_HEAP_LOAD($7 | 0, 4, 0) | 0 | 0;
    $13 = $12 + 1 | 0;
    SAFE_HEAP_STORE($7 | 0, $13 | 0, 4);
    SAFE_HEAP_STORE($8 | 0, 2 | 0, 4);
    $14 = $1 + 54 | 0;
    SAFE_HEAP_STORE($14 >> 0 | 0, 1 | 0, 1);
    break;
   }
   $10 = SAFE_HEAP_LOAD($8 | 0, 4, 0) | 0 | 0;
   $11 = ($10 | 0) == 2;
   if ($11) {
    SAFE_HEAP_STORE($8 | 0, $3 | 0, 4);
   }
  }
 } while (0);
 return;
}

function __ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS6_INS0_17scalar_product_opIffEEKS4_KNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEESB_EEEENS0_9assign_opIffEELi0EEC2ERS5_RKSK_RKSM_RS4_($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = $5;
 $11 = $6;
 SAFE_HEAP_STORE($10 | 0, $11 | 0, 4);
 $12 = $10 + 4 | 0;
 $13 = $7;
 SAFE_HEAP_STORE($12 | 0, $13 | 0, 4);
 $14 = $10 + 8 | 0;
 $15 = $8;
 SAFE_HEAP_STORE($14 | 0, $15 | 0, 4);
 $16 = $10 + 12 | 0;
 $17 = $9;
 SAFE_HEAP_STORE($16 | 0, $17 | 0, 4);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS0_17scalar_product_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEES9_EENS0_10IndexBasedESI_ffED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 $3 = $2 + 24 | 0;
 __ZN5Eigen8internal9evaluatorIKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEED2Ev($3);
 $4 = $2 + 4 | 0;
 __ZN5Eigen8internal9evaluatorIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEED2Ev($4);
 __ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS0_17scalar_product_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEES9_EEED2Ev($2);
 STACKTOP = sp;
 return;
}

function __ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffE5coeffEi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0.0, $12 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $4 = sp;
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = $5 + 4 | 0;
 $7 = $3;
 $8 = __ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEEE5coeffEi($6, $7) | 0;
 $9 = $5 + 12 | 0;
 $10 = $3;
 $11 = +__ZNK5Eigen8internal9evaluatorINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEEE5coeffIiEEfT_($9, $10);
 SAFE_HEAP_STORE_D($4 | 0, +$11, 4);
 $12 = +__ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_($5, $8, $4);
 STACKTOP = sp;
 return +$12;
}

function __ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_5ArrayIjLi3ELi1ELi0ELi3ELi1EEEEES5_NS0_9assign_opIjjEELi0EE11assignCoeffEi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $4 + 8 | 0;
 $6 = SAFE_HEAP_LOAD($5 | 0, 4, 0) | 0 | 0;
 $7 = SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0;
 $8 = $3;
 $9 = __ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_5ArrayIjLi3ELi1ELi0ELi3ELi1EEEEEE8coeffRefEi($7, $8) | 0;
 $10 = $4 + 4 | 0;
 $11 = SAFE_HEAP_LOAD($10 | 0, 4, 0) | 0 | 0;
 $12 = $3;
 $13 = __ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_5ArrayIjLi3ELi1ELi0ELi3ELi1EEEEEE5coeffEi($11, $12) | 0;
 __ZNK5Eigen8internal9assign_opIjjE11assignCoeffERjRKj($6, $9, $13);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $4 + 8 | 0;
 $6 = SAFE_HEAP_LOAD($5 | 0, 4, 0) | 0 | 0;
 $7 = SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0;
 $8 = $3;
 $9 = __ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEEE8coeffRefEi($7, $8) | 0;
 $10 = $4 + 4 | 0;
 $11 = SAFE_HEAP_LOAD($10 | 0, 4, 0) | 0 | 0;
 $12 = $3;
 $13 = __ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEEE5coeffEi($11, $12) | 0;
 __ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf($6, $9, $13);
 STACKTOP = sp;
 return;
}

function _pad_674($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0$lcssa = 0, $$011 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(256 | 0);
 $5 = sp;
 $6 = $4 & 73728;
 $7 = ($6 | 0) == 0;
 $8 = ($2 | 0) > ($3 | 0);
 $or$cond = $8 & $7;
 if ($or$cond) {
  $9 = $2 - $3 | 0;
  $10 = $9 >>> 0 < 256;
  $11 = $10 ? $9 : 256;
  _memset($5 | 0, $1 | 0, $11 | 0) | 0;
  $12 = $9 >>> 0 > 255;
  if ($12) {
   $13 = $2 - $3 | 0;
   $$011 = $9;
   while (1) {
    _out($0, $5, 256);
    $14 = $$011 + -256 | 0;
    $15 = $14 >>> 0 > 255;
    if ($15) {
     $$011 = $14;
    } else {
     break;
    }
   }
   $16 = $13 & 255;
   $$0$lcssa = $16;
  } else {
   $$0$lcssa = $9;
  }
  _out($0, $5, $$0$lcssa);
 }
 STACKTOP = sp;
 return;
}

function __ZNK5Eigen10MatrixBaseINS_13MatrixWrapperIKNS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES8_EEEEE11squaredNormEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
 $2 = sp + 20 | 0;
 $3 = sp;
 $1 = $0;
 $4 = $1;
 __ZNK5Eigen10MatrixBaseINS_13MatrixWrapperIKNS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES8_EEEEE9cwiseAbs2Ev($3, $4);
 $5 = +__ZNK5Eigen9DenseBaseINS_12CwiseUnaryOpINS_8internal14scalar_abs2_opIfEEKNS_13MatrixWrapperIKNS_13CwiseBinaryOpINS2_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESB_EEEEEEE3sumEv($3);
 SAFE_HEAP_STORE_D($2 | 0, +$5, 4);
 $6 = +__ZN5Eigen6numext4realIfEENS_8internal11real_retvalINS2_36global_math_functions_filtering_baseIT_vE4typeEE4typeERKS5_($2);
 STACKTOP = sp;
 return +$6;
}

function _getint($0) {
 $0 = $0 | 0;
 var $$0$lcssa = 0, $$06 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isdigit = 0, $isdigit5 = 0, $isdigittmp = 0, $isdigittmp4 = 0, $isdigittmp7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = SAFE_HEAP_LOAD($0 | 0, 4, 0) | 0 | 0;
 $2 = SAFE_HEAP_LOAD($1 >> 0 | 0, 1, 0) | 0 | 0;
 $3 = $2 << 24 >> 24;
 $isdigittmp4 = $3 + -48 | 0;
 $isdigit5 = $isdigittmp4 >>> 0 < 10;
 if ($isdigit5) {
  $$06 = 0;
  $7 = $1;
  $isdigittmp7 = $isdigittmp4;
  while (1) {
   $4 = $$06 * 10 | 0;
   $5 = $isdigittmp7 + $4 | 0;
   $6 = $7 + 1 | 0;
   SAFE_HEAP_STORE($0 | 0, $6 | 0, 4);
   $8 = SAFE_HEAP_LOAD($6 >> 0 | 0, 1, 0) | 0 | 0;
   $9 = $8 << 24 >> 24;
   $isdigittmp = $9 + -48 | 0;
   $isdigit = $isdigittmp >>> 0 < 10;
   if ($isdigit) {
    $$06 = $5;
    $7 = $6;
    $isdigittmp7 = $isdigittmp;
   } else {
    $$0$lcssa = $5;
    break;
   }
  }
 } else {
  $$0$lcssa = 0;
 }
 return $$0$lcssa | 0;
}

function __ZN5Eigen8internal15call_assignmentINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS0_17scalar_product_opIffEEKS3_KNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEES9_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXntsr25evaluator_assume_aliasingISM_EE5valueEPvE4typeE($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $4;
 $9 = $5;
 $10 = $6;
 __ZN5Eigen8internal24call_assignment_no_aliasINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS0_17scalar_product_opIffEEKS3_KNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEES9_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_($8, $9, $10);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_13MatrixWrapperIKNS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESC_EEEEEENS0_9assign_opIffEELi0EEC2ERS5_RKSG_RKSI_RS4_($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = $5;
 $11 = $6;
 SAFE_HEAP_STORE($10 | 0, $11 | 0, 4);
 $12 = $10 + 4 | 0;
 $13 = $7;
 SAFE_HEAP_STORE($12 | 0, $13 | 0, 4);
 $14 = $10 + 8 | 0;
 $15 = $8;
 SAFE_HEAP_STORE($14 | 0, $15 | 0, 4);
 $16 = $10 + 12 | 0;
 $17 = $9;
 SAFE_HEAP_STORE($16 | 0, $17 | 0, 4);
 STACKTOP = sp;
 return;
}

function _fmt_x($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$05$lcssa = 0, $$056 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $4 = ($0 | 0) == 0;
 $5 = ($1 | 0) == 0;
 $6 = $4 & $5;
 if ($6) {
  $$05$lcssa = $2;
 } else {
  $$056 = $2;
  $15 = $1;
  $8 = $0;
  while (1) {
   $7 = $8 & 15;
   $9 = 3095 + $7 | 0;
   $10 = SAFE_HEAP_LOAD($9 >> 0 | 0, 1, 0) | 0 | 0;
   $11 = $10 & 255;
   $12 = $11 | $3;
   $13 = $12 & 255;
   $14 = $$056 + -1 | 0;
   SAFE_HEAP_STORE($14 >> 0 | 0, $13 | 0, 1);
   $16 = _bitshift64Lshr($8 | 0, $15 | 0, 4) | 0;
   $17 = tempRet0;
   $18 = ($16 | 0) == 0;
   $19 = ($17 | 0) == 0;
   $20 = $18 & $19;
   if ($20) {
    $$05$lcssa = $14;
    break;
   } else {
    $$056 = $14;
    $15 = $17;
    $8 = $16;
   }
  }
 }
 return $$05$lcssa | 0;
}

function __ZN5Eigen12CwiseUnaryOpINS_8internal14scalar_abs2_opIfEEKNS_13MatrixWrapperIKNS_13CwiseBinaryOpINS1_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESA_EEEEEC2ERSE_RKS3_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 __ZN5Eigen16CwiseUnaryOpImplINS_8internal14scalar_abs2_opIfEEKNS_13MatrixWrapperIKNS_13CwiseBinaryOpINS1_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESA_EEEENS_5DenseEEC2Ev($6);
 $7 = $6 + 4 | 0;
 $8 = $4;
 __ZN5Eigen13MatrixWrapperIKNS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES7_EEEC2ERKSA_($7, $8);
 $9 = $6 + 16 | 0;
 $10 = $5;
 __ZN5Eigen8internal14scalar_abs2_opIfEC2ERKS2_($9, $10);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS0_9assign_opIffEELi0EEELi2ELi3EE3runERSC_($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 __ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi($2, 2);
 $3 = $1;
 __ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS0_9assign_opIffEELi0EEELi3ELi3EE3runERSC_($3);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi3EE3runERSC_($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 __ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi($2, 1);
 $3 = $1;
 __ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS0_9assign_opIffEELi0EEELi2ELi3EE3runERSC_($3);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi3EE3runERSC_($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 __ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi($2, 0);
 $3 = $1;
 __ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi3EE3runERSC_($3);
 STACKTOP = sp;
 return;
}

function __ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES7_EENS0_10IndexBasedES9_ffE5coeffEii($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = $6 + 4 | 0;
 $8 = $4;
 $9 = $5;
 $10 = __ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEEE5coeffEii($7, $8, $9) | 0;
 $11 = $6 + 12 | 0;
 $12 = $4;
 $13 = $5;
 $14 = __ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEEE5coeffEii($11, $12, $13) | 0;
 $15 = +__ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_($6, $10, $14);
 STACKTOP = sp;
 return +$15;
}

function __ZNK5Eigen9DenseBaseINS_12CwiseUnaryOpINS_8internal14scalar_abs2_opIfEEKNS_13MatrixWrapperIKNS_13CwiseBinaryOpINS2_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESB_EEEEEEE3sumEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $2 = sp + 4 | 0;
 $1 = $0;
 $3 = $1;
 $4 = __ZNK5Eigen9EigenBaseINS_12CwiseUnaryOpINS_8internal14scalar_abs2_opIfEEKNS_13MatrixWrapperIKNS_13CwiseBinaryOpINS2_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESB_EEEEEEE7derivedEv($3) | 0;
 __ZN5Eigen8internal13scalar_sum_opIffEC2Ev($2);
 $5 = +__ZNK5Eigen9DenseBaseINS_12CwiseUnaryOpINS_8internal14scalar_abs2_opIfEEKNS_13MatrixWrapperIKNS_13CwiseBinaryOpINS2_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESB_EEEEEEE5reduxIS8_EEfRKT_($4, $2);
 STACKTOP = sp;
 return +$5;
}

function __ZN5Eigen15PlainObjectBaseINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEC2INS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEERKNS_9DenseBaseIT_EE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN5Eigen9ArrayBaseINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEC2Ev($4);
 __ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EEC2Ev($4);
 __ZN5Eigen15PlainObjectBaseINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEE22_check_template_paramsEv();
 $5 = $3;
 __ZN5Eigen15PlainObjectBaseINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEE10resizeLikeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEvRKNS_9EigenBaseIT_EE($4, $5);
 $6 = $3;
 __ZN5Eigen15PlainObjectBaseINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEE12_set_noaliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEERS2_RKNS_9DenseBaseIT_EE($4, $6) | 0;
 STACKTOP = sp;
 return;
}

function __ZN5Eigen15PlainObjectBaseINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEE12_set_noaliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEERS2_RKNS_9DenseBaseIT_EE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $4 = sp + 8 | 0;
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = __ZN5Eigen9EigenBaseINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv($5) | 0;
 $7 = $3;
 $8 = __ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv($7) | 0;
 __ZN5Eigen8internal9assign_opIffEC2Ev($4);
 __ZN5Eigen8internal24call_assignment_no_aliasINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEENS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_($6, $8, $4);
 $9 = __ZN5Eigen9EigenBaseINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv($5) | 0;
 STACKTOP = sp;
 return $9 | 0;
}

function __ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS0_17scalar_product_opIffEEKS5_KNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEESC_EEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSO_($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 __ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS0_17scalar_product_opIffEEKS5_KNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEESC_EEEENS0_9assign_opIffEELi0EEELi0ELi3EE3runERSO_($2);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen8internal24call_assignment_no_aliasINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS0_17scalar_product_opIffEEKS3_KNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEES9_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $3;
 $6 = $7;
 $8 = $6;
 $9 = $4;
 $10 = $5;
 __ZN5Eigen8internal10AssignmentINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS0_17scalar_product_opIffEEKS3_KNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEES9_EENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSH_RKSJ_($8, $9, $10);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen8internal15call_assignmentINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS0_17scalar_product_opIffEEKS3_KNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEES9_EEEEvRT_RKT0_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $4 = sp + 8 | 0;
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = $3;
 __ZN5Eigen8internal9assign_opIffEC2Ev($4);
 __ZN5Eigen8internal15call_assignmentINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS0_17scalar_product_opIffEEKS3_KNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEES9_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXntsr25evaluator_assume_aliasingISM_EE5valueEPvE4typeE($5, $6, $4, 0);
 STACKTOP = sp;
 return;
}

function __ZNK5Eigen8internal15unary_evaluatorINS_12CwiseUnaryOpINS0_14scalar_abs2_opIfEEKNS_13MatrixWrapperIKNS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESB_EEEEEENS0_10IndexBasedEfE5coeffEii($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $11 = 0.0, $12 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $6 = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $3;
 $8 = $7 + 4 | 0;
 $9 = $4;
 $10 = $5;
 $11 = +__ZNK5Eigen8internal22evaluator_wrapper_baseINS_13MatrixWrapperIKNS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES8_EEEEE5coeffEii($8, $9, $10);
 SAFE_HEAP_STORE_D($6 | 0, +$11, 4);
 $12 = +__ZNK5Eigen8internal14scalar_abs2_opIfEclERKf($7, $6);
 STACKTOP = sp;
 return +$12;
}

function __ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS0_9assign_opIffEELi0EEC2ERS5_RKS8_RKSA_RS4_($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = $5;
 $11 = $6;
 SAFE_HEAP_STORE($10 | 0, $11 | 0, 4);
 $12 = $10 + 4 | 0;
 $13 = $7;
 SAFE_HEAP_STORE($12 | 0, $13 | 0, 4);
 $14 = $10 + 8 | 0;
 $15 = $8;
 SAFE_HEAP_STORE($14 | 0, $15 | 0, 4);
 $16 = $10 + 12 | 0;
 $17 = $9;
 SAFE_HEAP_STORE($16 | 0, $17 | 0, 4);
 STACKTOP = sp;
 return;
}

function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = $1 + 8 | 0;
 $7 = SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0;
 $8 = __ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, $7, $5) | 0;
 if ($8) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $1, $2, $3, $4);
 } else {
  $9 = $0 + 8 | 0;
  $10 = SAFE_HEAP_LOAD($9 | 0, 4, 0) | 0 | 0;
  $11 = SAFE_HEAP_LOAD($10 | 0, 4, 0) | 0 | 0;
  $12 = $11 + 20 | 0;
  $13 = SAFE_HEAP_LOAD($12 | 0, 4, 0) | 0 | 0;
  FUNCTION_TABLE_viiiiii[(SAFE_FT_MASK($13 | 0, 15 | 0) | 0) & 15]($10, $1, $2, $3, $4, $5);
 }
 return;
}

function __ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_18scalar_quotient_opIffEEKNS_13MatrixWrapperIKNS4_INS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESC_EEEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKS3_EEEEEEvRKT_RKT0_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 __ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_18scalar_quotient_opIffEEKNS_13MatrixWrapperIKNS4_INS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESC_EEEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKS3_EEEELb0EE3runERSK_RKSN_($4, $5);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 $3 = $2 + 12 | 0;
 __ZN5Eigen8internal9evaluatorIKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEEED2Ev($3);
 $4 = $2 + 4 | 0;
 __ZN5Eigen8internal9evaluatorIKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEED2Ev($4);
 __ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEED2Ev($2);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen15PlainObjectBaseINS_5ArrayIjLi3ELi1ELi0ELi3ELi1EEEE12_set_noaliasIS2_EERS2_RKNS_9DenseBaseIT_EE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $4 = sp + 8 | 0;
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = __ZN5Eigen9EigenBaseINS_5ArrayIjLi3ELi1ELi0ELi3ELi1EEEE7derivedEv($5) | 0;
 $7 = $3;
 $8 = __ZNK5Eigen9EigenBaseINS_5ArrayIjLi3ELi1ELi0ELi3ELi1EEEE7derivedEv($7) | 0;
 __ZN5Eigen8internal9assign_opIjjEC2Ev($4);
 __ZN5Eigen8internal24call_assignment_no_aliasINS_5ArrayIjLi3ELi1ELi0ELi3ELi1EEES3_NS0_9assign_opIjjEEEEvRT_RKT0_RKT1_($6, $8, $4);
 $9 = __ZN5Eigen9EigenBaseINS_5ArrayIjLi3ELi1ELi0ELi3ELi1EEEE7derivedEv($5) | 0;
 STACKTOP = sp;
 return $9 | 0;
}

function __ZN5Eigen15PlainObjectBaseINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEE12_set_noaliasIS2_EERS2_RKNS_9DenseBaseIT_EE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $4 = sp + 8 | 0;
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = __ZN5Eigen9EigenBaseINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv($5) | 0;
 $7 = $3;
 $8 = __ZNK5Eigen9EigenBaseINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv($7) | 0;
 __ZN5Eigen8internal9assign_opIffEC2Ev($4);
 __ZN5Eigen8internal24call_assignment_no_aliasINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_($6, $8, $4);
 $9 = __ZN5Eigen9EigenBaseINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv($5) | 0;
 STACKTOP = sp;
 return $9 | 0;
}

function __ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC2ERKSC_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 $6 = SAFE_HEAP_LOAD($5 | 0, 4, 0) | 0 | 0;
 SAFE_HEAP_STORE($4 | 0, $6 | 0, 4);
 $7 = $4 + 4 | 0;
 $8 = $3;
 $9 = $8 + 4 | 0;
 __ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEC2ERKS7_($7, $9);
 $10 = $4 + 12 | 0;
 $11 = $3;
 $12 = $11 + 12 | 0;
 __ZN5Eigen8internal17scalar_product_opIffEC2ERKS2_($10, $12);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_18scalar_quotient_opIffEEKNS_13MatrixWrapperIKNS2_INS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESA_EEEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEEEC2ERKSN_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 __ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_18scalar_quotient_opIffEEKNS_13MatrixWrapperIKNS2_INS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESA_EEEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEENS0_10IndexBasedESO_ffEC2ERKSN_($4, $5);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_5ArrayIjLi3ELi1ELi0ELi3ELi1EEEEES5_NS0_9assign_opIjjEELi0EEC2ERS5_RKS5_RKS7_RS4_($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = $5;
 $11 = $6;
 SAFE_HEAP_STORE($10 | 0, $11 | 0, 4);
 $12 = $10 + 4 | 0;
 $13 = $7;
 SAFE_HEAP_STORE($12 | 0, $13 | 0, 4);
 $14 = $10 + 8 | 0;
 $15 = $8;
 SAFE_HEAP_STORE($14 | 0, $15 | 0, 4);
 $16 = $10 + 12 | 0;
 $17 = $9;
 SAFE_HEAP_STORE($16 | 0, $17 | 0, 4);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEES5_NS0_9assign_opIffEELi0EEC2ERS5_RKS5_RKS7_RS4_($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = $5;
 $11 = $6;
 SAFE_HEAP_STORE($10 | 0, $11 | 0, 4);
 $12 = $10 + 4 | 0;
 $13 = $7;
 SAFE_HEAP_STORE($12 | 0, $13 | 0, 4);
 $14 = $10 + 8 | 0;
 $15 = $8;
 SAFE_HEAP_STORE($14 | 0, $15 | 0, 4);
 $16 = $10 + 12 | 0;
 $17 = $9;
 SAFE_HEAP_STORE($16 | 0, $17 | 0, 4);
 STACKTOP = sp;
 return;
}

function __ZNK5Eigen9ArrayBaseINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEplIS2_EEKNS_13CwiseBinaryOpINS_8internal13scalar_sum_opIfNS6_6traitsIT_E6ScalarEEEKS2_KS9_EERKNS0_IS9_EE($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $5 = sp + 8 | 0;
 $3 = $1;
 $4 = $2;
 $6 = $3;
 $7 = __ZNK5Eigen9EigenBaseINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv($6) | 0;
 $8 = $4;
 $9 = __ZNK5Eigen9EigenBaseINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv($8) | 0;
 __ZN5Eigen8internal13scalar_sum_opIffEC2Ev($5);
 __ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES6_EC2ERS6_S8_RKS3_($0, $7, $9, $5);
 STACKTOP = sp;
 return;
}

function __ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES7_EENS0_10IndexBasedES9_ffE5coeffEi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $4 + 4 | 0;
 $6 = $3;
 $7 = __ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEEE5coeffEi($5, $6) | 0;
 $8 = $4 + 12 | 0;
 $9 = $3;
 $10 = __ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEEE5coeffEi($8, $9) | 0;
 $11 = +__ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_($4, $7, $10);
 STACKTOP = sp;
 return +$11;
}

function __ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_13MatrixWrapperIKNS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESD_EEEEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSK_($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 __ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_13MatrixWrapperIKNS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESD_EEEEEENS0_9assign_opIffEELi0EEELi0ELi3EE3runERSK_($2);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC2INS_13MatrixWrapperIKNS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESA_EEEEEERKNS_9EigenBaseIT_EE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 $6 = __ZNK5Eigen9EigenBaseINS_13MatrixWrapperIKNS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES8_EEEEE7derivedEv($5) | 0;
 __ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC2INS_13MatrixWrapperIKNS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESC_EEEEEERKNS_9DenseBaseIT_EE($4, $6);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13MatrixWrapperIKNS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESA_EEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $3;
 $6 = $7;
 $8 = $6;
 $9 = $4;
 $10 = $5;
 __ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13MatrixWrapperIKNS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESA_EEEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSD_RKSF_($8, $9, $10);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen5ArrayIjLi3ELi1ELi0ELi3ELi1EEC2EOS1_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $3 = $0;
 $4 = $1;
 $5 = $3;
 $6 = $4;
 $2 = $6;
 $7 = $2;
 __ZN5Eigen15PlainObjectBaseINS_5ArrayIjLi3ELi1ELi0ELi3ELi1EEEEC2EOS3_($5, $7);
 __THREW__ = 0;
 invoke_v(57);
 $8 = __THREW__;
 __THREW__ = 0;
 $9 = $8 & 1;
 if (!$9) {
  $10 = $4;
  __THREW__ = 0;
  invoke_iii(58, $5 | 0, $10 | 0) | 0;
  $11 = __THREW__;
  __THREW__ = 0;
  $12 = $11 & 1;
  if (!$12) {
   STACKTOP = sp;
   return;
  }
 }
 $13 = ___cxa_find_matching_catch_3(0 | 0) | 0;
 $14 = tempRet0;
 ___clang_call_terminate($13);
}

function __ZN5Eigen5ArrayIfLi3ELi1ELi0ELi3ELi1EEC2EOS1_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $3 = $0;
 $4 = $1;
 $5 = $3;
 $6 = $4;
 $2 = $6;
 $7 = $2;
 __ZN5Eigen15PlainObjectBaseINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEC2EOS3_($5, $7);
 __THREW__ = 0;
 invoke_v(68);
 $8 = __THREW__;
 __THREW__ = 0;
 $9 = $8 & 1;
 if (!$9) {
  $10 = $4;
  __THREW__ = 0;
  invoke_iii(69, $5 | 0, $10 | 0) | 0;
  $11 = __THREW__;
  __THREW__ = 0;
  $12 = $11 & 1;
  if (!$12) {
   STACKTOP = sp;
   return;
  }
 }
 $13 = ___cxa_find_matching_catch_3(0 | 0) | 0;
 $14 = tempRet0;
 ___clang_call_terminate($13);
}

function __ZNK5Eigen9EigenBaseINS_12CwiseUnaryOpINS_8internal14scalar_abs2_opIfEEKNS_13MatrixWrapperIKNS_13CwiseBinaryOpINS2_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESB_EEEEEEE4rowsEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 $3 = __ZNK5Eigen9EigenBaseINS_12CwiseUnaryOpINS_8internal14scalar_abs2_opIfEEKNS_13MatrixWrapperIKNS_13CwiseBinaryOpINS2_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESB_EEEEEEE7derivedEv($2) | 0;
 $4 = __ZNK5Eigen12CwiseUnaryOpINS_8internal14scalar_abs2_opIfEEKNS_13MatrixWrapperIKNS_13CwiseBinaryOpINS1_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESA_EEEEE4rowsEv($3) | 0;
 STACKTOP = sp;
 return $4 | 0;
}

function __ZNK5Eigen9EigenBaseINS_12CwiseUnaryOpINS_8internal14scalar_abs2_opIfEEKNS_13MatrixWrapperIKNS_13CwiseBinaryOpINS2_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESB_EEEEEEE4colsEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 $3 = __ZNK5Eigen9EigenBaseINS_12CwiseUnaryOpINS_8internal14scalar_abs2_opIfEEKNS_13MatrixWrapperIKNS_13CwiseBinaryOpINS2_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESB_EEEEEEE7derivedEv($2) | 0;
 $4 = __ZNK5Eigen12CwiseUnaryOpINS_8internal14scalar_abs2_opIfEEKNS_13MatrixWrapperIKNS_13CwiseBinaryOpINS1_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESA_EEEEE4colsEv($3) | 0;
 STACKTOP = sp;
 return $4 | 0;
}

function __ZNK5Eigen10MatrixBaseINS_13MatrixWrapperIKNS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES8_EEEEE9cwiseAbs2Ev($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $3 = sp + 4 | 0;
 $2 = $1;
 $4 = $2;
 $5 = __ZNK5Eigen9EigenBaseINS_13MatrixWrapperIKNS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES8_EEEEE7derivedEv($4) | 0;
 __ZN5Eigen8internal14scalar_abs2_opIfEC2Ev($3);
 __ZN5Eigen12CwiseUnaryOpINS_8internal14scalar_abs2_opIfEEKNS_13MatrixWrapperIKNS_13CwiseBinaryOpINS1_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESA_EEEEEC2ERSE_RKS3_($0, $5, $3);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_5ArrayIjLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIjjEELi0EEELi2ELi3EE3runERS9_($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 __ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_5ArrayIjLi3ELi1ELi0ELi3ELi1EEEEES5_NS0_9assign_opIjjEELi0EE11assignCoeffEi($2, 2);
 $3 = $1;
 __ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_5ArrayIjLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIjjEELi0EEELi3ELi3EE3runERS9_($3);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_5ArrayIjLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIjjEELi0EEELi1ELi3EE3runERS9_($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 __ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_5ArrayIjLi3ELi1ELi0ELi3ELi1EEEEES5_NS0_9assign_opIjjEELi0EE11assignCoeffEi($2, 1);
 $3 = $1;
 __ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_5ArrayIjLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIjjEELi0EEELi2ELi3EE3runERS9_($3);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_5ArrayIjLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIjjEELi0EEELi0ELi3EE3runERS9_($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 __ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_5ArrayIjLi3ELi1ELi0ELi3ELi1EEEEES5_NS0_9assign_opIjjEELi0EE11assignCoeffEi($2, 0);
 $3 = $1;
 __ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_5ArrayIjLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIjjEELi0EEELi1ELi3EE3runERS9_($3);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi2ELi3EE3runERS9_($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 __ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi($2, 2);
 $3 = $1;
 __ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi3ELi3EE3runERS9_($3);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi3EE3runERS9_($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 __ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi($2, 1);
 $3 = $1;
 __ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi2ELi3EE3runERS9_($3);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi0ELi3EE3runERS9_($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 __ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi($2, 0);
 $3 = $1;
 __ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi3EE3runERS9_($3);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen8internal10AssignmentINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEENS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS5_RKS7_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = $4;
 __ZN5Eigen8internal18check_for_aliasingINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEENS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEvRKT_RKT0_($6, $7);
 $8 = $3;
 $9 = $4;
 $10 = $5;
 __ZN5Eigen8internal26call_dense_assignment_loopINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEENS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_($8, $9, $10);
 STACKTOP = sp;
 return;
}

function __ZNK5Eigen15DenseCoeffsBaseINS_5ArrayIjLi3ELi1ELi0ELi3ELi1EEELi0EEixEi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 $6 = ($5 | 0) >= 0;
 if (!$6) {
  ___assert_fail(1769 | 0, 1798 | 0, 162, 1904 | 0);
 }
 $7 = $3;
 $8 = __ZNK5Eigen9EigenBaseINS_5ArrayIjLi3ELi1ELi0ELi3ELi1EEEE4sizeEv($4) | 0;
 $9 = ($7 | 0) < ($8 | 0);
 if ($9) {
  $10 = $3;
  $11 = __ZNK5Eigen15DenseCoeffsBaseINS_5ArrayIjLi3ELi1ELi0ELi3ELi1EEELi0EE5coeffEi($4, $10) | 0;
  STACKTOP = sp;
  return $11 | 0;
 } else {
  ___assert_fail(1769 | 0, 1798 | 0, 162, 1904 | 0);
 }
 return 0 | 0;
}

function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $11 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = $1 + 8 | 0;
 $5 = SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0;
 $6 = __ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, $5, 0) | 0;
 if ($6) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $1, $2, $3);
 } else {
  $7 = $0 + 8 | 0;
  $8 = SAFE_HEAP_LOAD($7 | 0, 4, 0) | 0 | 0;
  $9 = SAFE_HEAP_LOAD($8 | 0, 4, 0) | 0 | 0;
  $10 = $9 + 28 | 0;
  $11 = SAFE_HEAP_LOAD($10 | 0, 4, 0) | 0 | 0;
  FUNCTION_TABLE_viiii[(SAFE_FT_MASK($11 | 0, 63 | 0) | 0) & 63]($8, $1, $2, $3);
 }
 return;
}

function __ZN5Eigen8internal15unary_evaluatorINS_12CwiseUnaryOpINS0_14scalar_abs2_opIfEEKNS_13MatrixWrapperIKNS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESB_EEEEEENS0_10IndexBasedEfED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 $3 = $2 + 4 | 0;
 __ZN5Eigen8internal9evaluatorIKNS_13MatrixWrapperIKNS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES8_EEEEED2Ev($3);
 __ZN5Eigen8internal14evaluator_baseINS_12CwiseUnaryOpINS0_14scalar_abs2_opIfEEKNS_13MatrixWrapperIKNS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESB_EEEEEEED2Ev($2);
 STACKTOP = sp;
 return;
}

function _fmt_o($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$06 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0 | 0) == 0;
 $4 = ($1 | 0) == 0;
 $5 = $3 & $4;
 if ($5) {
  $$0$lcssa = $2;
 } else {
  $$06 = $2;
  $11 = $1;
  $7 = $0;
  while (1) {
   $6 = $7 & 255;
   $8 = $6 & 7;
   $9 = $8 | 48;
   $10 = $$06 + -1 | 0;
   SAFE_HEAP_STORE($10 >> 0 | 0, $9 | 0, 1);
   $12 = _bitshift64Lshr($7 | 0, $11 | 0, 3) | 0;
   $13 = tempRet0;
   $14 = ($12 | 0) == 0;
   $15 = ($13 | 0) == 0;
   $16 = $14 & $15;
   if ($16) {
    $$0$lcssa = $10;
    break;
   } else {
    $$06 = $10;
    $11 = $13;
    $7 = $12;
   }
  }
 }
 return $$0$lcssa | 0;
}

function __ZNK5Eigen8internal15redux_evaluatorINS_12CwiseUnaryOpINS0_14scalar_abs2_opIfEEKNS_13MatrixWrapperIKNS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESB_EEEEEEE17coeffByOuterInnerEii($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = $5;
 $8 = $4;
 $9 = +__ZNK5Eigen8internal15unary_evaluatorINS_12CwiseUnaryOpINS0_14scalar_abs2_opIfEEKNS_13MatrixWrapperIKNS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESB_EEEEEENS0_10IndexBasedEfE5coeffEii($6, $7, $8);
 STACKTOP = sp;
 return +$9;
}

function __ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_18scalar_quotient_opIffEEKNS_13MatrixWrapperIKNS2_INS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESA_EEEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEEED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 __ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_18scalar_quotient_opIffEEKNS_13MatrixWrapperIKNS2_INS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESA_EEEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEENS0_10IndexBasedESO_ffED2Ev($2);
 STACKTOP = sp;
 return;
}

function _sbrk(increment) {
 increment = increment | 0;
 var oldDynamicTop = 0;
 var oldDynamicTopOnChange = 0;
 var newDynamicTop = 0;
 var totalMemory = 0;
 increment = increment + 15 & -16 | 0;
 oldDynamicTop = SAFE_HEAP_LOAD(DYNAMICTOP_PTR | 0, 4, 0) | 0 | 0;
 newDynamicTop = oldDynamicTop + increment | 0;
 if ((increment | 0) > 0 & (newDynamicTop | 0) < (oldDynamicTop | 0) | (newDynamicTop | 0) < 0) {
  abortOnCannotGrowMemory() | 0;
  ___setErrNo(12);
  return -1;
 }
 SAFE_HEAP_STORE(DYNAMICTOP_PTR | 0, newDynamicTop | 0, 4);
 totalMemory = getTotalMemory() | 0;
 if ((newDynamicTop | 0) > (totalMemory | 0)) {
  if ((enlargeMemory() | 0) == 0) {
   SAFE_HEAP_STORE(DYNAMICTOP_PTR | 0, oldDynamicTop | 0, 4);
   ___setErrNo(12);
   return -1;
  }
 }
 return oldDynamicTop | 0;
}

function __ZN5Eigen8internal15unary_evaluatorINS_13MatrixWrapperIKNS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES8_EEEENS0_10IndexBasedEfEC2ERKSB_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 $6 = __ZNK5Eigen13MatrixWrapperIKNS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES7_EEE16nestedExpressionEv($5) | 0;
 __ZN5Eigen8internal22evaluator_wrapper_baseINS_13MatrixWrapperIKNS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES8_EEEEEC2ERSA_($4, $6);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen5ArrayIfLi3ELi1ELi0ELi3ELi1EEaSINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS3_INS4_17scalar_product_opIffEEKS1_KNS_14CwiseNullaryOpINS4_18scalar_constant_opIfEES9_EEEES9_EEEERS1_RKNS_9DenseBaseIT_EE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 $6 = __ZN5Eigen15PlainObjectBaseINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEE4_setINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS5_INS6_17scalar_product_opIffEEKS2_KNS_14CwiseNullaryOpINS6_18scalar_constant_opIfEESB_EEEESB_EEEERS2_RKNS_9DenseBaseIT_EE($4, $5) | 0;
 STACKTOP = sp;
 return $6 | 0;
}

function __ZN5Eigen17CwiseBinaryOpImplINS_8internal18scalar_quotient_opIffEEKNS_13MatrixWrapperIKNS_13CwiseBinaryOpINS1_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESA_EEEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS_5DenseEEC2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 __ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal18scalar_quotient_opIffEEKNS_13MatrixWrapperIKNS1_INS2_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESA_EEEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEEEC2Ev($2);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen15PlainObjectBaseINS_5ArrayIjLi3ELi1ELi0ELi3ELi1EEEEC2EOS3_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $3 = $0;
 $4 = $1;
 $5 = $3;
 __THREW__ = 0;
 invoke_vi(59, $5 | 0);
 $6 = __THREW__;
 __THREW__ = 0;
 $7 = $6 & 1;
 if (!$7) {
  $8 = $4;
  $2 = $8;
  $9 = $2;
  __THREW__ = 0;
  invoke_vii(60, $5 | 0, $9 | 0);
  $10 = __THREW__;
  __THREW__ = 0;
  $11 = $10 & 1;
  if (!$11) {
   STACKTOP = sp;
   return;
  }
 }
 $12 = ___cxa_find_matching_catch_3(0 | 0) | 0;
 $13 = tempRet0;
 ___clang_call_terminate($12);
}

function __ZN5Eigen15PlainObjectBaseINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEC2EOS3_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $3 = $0;
 $4 = $1;
 $5 = $3;
 __THREW__ = 0;
 invoke_vi(70, $5 | 0);
 $6 = __THREW__;
 __THREW__ = 0;
 $7 = $6 & 1;
 if (!$7) {
  $8 = $4;
  $2 = $8;
  $9 = $2;
  __THREW__ = 0;
  invoke_vii(71, $5 | 0, $9 | 0);
  $10 = __THREW__;
  __THREW__ = 0;
  $11 = $10 & 1;
  if (!$11) {
   STACKTOP = sp;
   return;
  }
 }
 $12 = ___cxa_find_matching_catch_3(0 | 0) | 0;
 $13 = tempRet0;
 ___clang_call_terminate($12);
}

function __ZN5Eigen8internal18check_for_aliasingINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS0_17scalar_product_opIffEEKS3_KNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEES9_EEEEvRKT_RKT0_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 __ZN5Eigen8internal27checkTransposeAliasing_implINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS0_17scalar_product_opIffEEKS3_KNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEES9_EELb0EE3runERS9_RKSH_($4, $5);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal18scalar_quotient_opIffEEKNS_13MatrixWrapperIKNS1_INS2_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESA_EEEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEEEC2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 __ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal18scalar_quotient_opIffEEKNS_13MatrixWrapperIKNS1_INS2_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESA_EEEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEEEC2Ev($2);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen8internal15redux_evaluatorINS_12CwiseUnaryOpINS0_14scalar_abs2_opIfEEKNS_13MatrixWrapperIKNS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESB_EEEEEEEC2ERKSG_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 __ZN5Eigen8internal9evaluatorINS_12CwiseUnaryOpINS0_14scalar_abs2_opIfEEKNS_13MatrixWrapperIKNS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESB_EEEEEEEC2ERKSG_($4, $5);
 $6 = $4 + 28 | 0;
 $7 = $3;
 SAFE_HEAP_STORE($6 | 0, $7 | 0, 4);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_12CwiseUnaryOpINS0_14scalar_abs2_opIfEEKNS_13MatrixWrapperIKNS_13CwiseBinaryOpIS3_KNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESC_EEEEEEEELi2ELi1EE3runERKSI_RKS3_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = +__ZNK5Eigen8internal15redux_evaluatorINS_12CwiseUnaryOpINS0_14scalar_abs2_opIfEEKNS_13MatrixWrapperIKNS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESB_EEEEEEE17coeffByOuterInnerEii($4, 0, 2);
 STACKTOP = sp;
 return +$5;
}

function __ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_12CwiseUnaryOpINS0_14scalar_abs2_opIfEEKNS_13MatrixWrapperIKNS_13CwiseBinaryOpIS3_KNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESC_EEEEEEEELi1ELi1EE3runERKSI_RKS3_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = +__ZNK5Eigen8internal15redux_evaluatorINS_12CwiseUnaryOpINS0_14scalar_abs2_opIfEEKNS_13MatrixWrapperIKNS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESB_EEEEEEE17coeffByOuterInnerEii($4, 0, 1);
 STACKTOP = sp;
 return +$5;
}

function __ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_12CwiseUnaryOpINS0_14scalar_abs2_opIfEEKNS_13MatrixWrapperIKNS_13CwiseBinaryOpIS3_KNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESC_EEEEEEEELi0ELi1EE3runERKSI_RKS3_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = +__ZNK5Eigen8internal15redux_evaluatorINS_12CwiseUnaryOpINS0_14scalar_abs2_opIfEEKNS_13MatrixWrapperIKNS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESB_EEEEEEE17coeffByOuterInnerEii($4, 0, 0);
 STACKTOP = sp;
 return +$5;
}

function __ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS0_17scalar_product_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEES9_EEEC2ERKSH_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 __ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS0_17scalar_product_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEES9_EENS0_10IndexBasedESI_ffEC2ERKSH_($4, $5);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen8internal10AssignmentINS_5ArrayIjLi3ELi1ELi0ELi3ELi1EEES3_NS0_9assign_opIjjEENS0_11Dense2DenseEvE3runERS3_RKS3_RKS5_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = $4;
 __ZN5Eigen8internal18check_for_aliasingINS_5ArrayIjLi3ELi1ELi0ELi3ELi1EEES3_EEvRKT_RKT0_($6, $7);
 $8 = $3;
 $9 = $4;
 $10 = $5;
 __ZN5Eigen8internal26call_dense_assignment_loopINS_5ArrayIjLi3ELi1ELi0ELi3ELi1EEES3_NS0_9assign_opIjjEEEEvRT_RKT0_RKT1_($8, $9, $10);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen8internal10AssignmentINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES3_NS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS3_RKS5_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = $4;
 __ZN5Eigen8internal18check_for_aliasingINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES3_EEvRKT_RKT0_($6, $7);
 $8 = $3;
 $9 = $4;
 $10 = $5;
 __ZN5Eigen8internal26call_dense_assignment_loopINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_($8, $9, $10);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC2ERKS7_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 __ZN5Eigen8internal19variable_if_dynamicIiLi3EEC2ERKS2_($4, $5);
 $6 = $4 + 1 | 0;
 $7 = $3;
 $8 = $7 + 1 | 0;
 __ZN5Eigen8internal19variable_if_dynamicIiLi1EEC2ERKS2_($6, $8);
 $9 = $4 + 4 | 0;
 $10 = $3;
 $11 = $10 + 4 | 0;
 __ZN5Eigen8internal18scalar_constant_opIfEC2ERKS2_($9, $11);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEC2ERKS7_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 __ZN5Eigen8internal19variable_if_dynamicIiLi3EEC2ERKS2_($4, $5);
 $6 = $4 + 1 | 0;
 $7 = $3;
 $8 = $7 + 1 | 0;
 __ZN5Eigen8internal19variable_if_dynamicIiLi1EEC2ERKS2_($6, $8);
 $9 = $4 + 4 | 0;
 $10 = $3;
 $11 = $10 + 4 | 0;
 __ZN5Eigen8internal18scalar_constant_opIfEC2ERKS2_($9, $11);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen5ArrayIfLi3ELi1ELi0ELi3ELi1EEC2INS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEERKNS_9EigenBaseIT_EENS_8internal9enable_ifIXsr8internal14is_convertibleINS6_6ScalarEfEE5valueENS1_11PrivateTypeEE4typeE($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $3 = $0;
 $4 = $1;
 $5 = $3;
 $6 = $4;
 $7 = __ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv($6) | 0;
 __ZN5Eigen15PlainObjectBaseINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEC2INS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEERKNS_9DenseBaseIT_EE($5, $7);
 STACKTOP = sp;
 return;
}

function __ZNK5Eigen8internal22evaluator_wrapper_baseINS_13MatrixWrapperIKNS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES8_EEEEE5coeffEii($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = $6 + 4 | 0;
 $8 = $4;
 $9 = $5;
 $10 = +__ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES7_EENS0_10IndexBasedES9_ffE5coeffEii($7, $8, $9);
 STACKTOP = sp;
 return +$10;
}

function ___cxa_can_catch($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $3 = sp;
 $4 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
 SAFE_HEAP_STORE($3 | 0, $4 | 0, 4);
 $5 = SAFE_HEAP_LOAD($0 | 0, 4, 0) | 0 | 0;
 $6 = $5 + 16 | 0;
 $7 = SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0;
 $8 = FUNCTION_TABLE_iiii[(SAFE_FT_MASK($7 | 0, 15 | 0) | 0) & 15]($0, $1, $3) | 0;
 $9 = $8 & 1;
 if ($8) {
  $10 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0;
  SAFE_HEAP_STORE($2 | 0, $10 | 0, 4);
 }
 STACKTOP = sp;
 return $9 | 0;
}

function __ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES7_EENS0_10IndexBasedES9_ffED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 $3 = $2 + 12 | 0;
 __ZN5Eigen8internal9evaluatorIKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEED2Ev($3);
 $4 = $2 + 4 | 0;
 __ZN5Eigen8internal9evaluatorIKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEED2Ev($4);
 __ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES7_EEED2Ev($2);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSC_($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 __ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi3EE3runERSC_($2);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen8internal24call_assignment_no_aliasINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEENS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $3;
 $6 = $7;
 $8 = $6;
 $9 = $4;
 $10 = $5;
 __ZN5Eigen8internal10AssignmentINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEENS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS5_RKS7_($8, $9, $10);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen8internal9evaluatorINS_12CwiseUnaryOpINS0_14scalar_abs2_opIfEEKNS_13MatrixWrapperIKNS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESB_EEEEEEEC2ERKSG_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 __ZN5Eigen8internal15unary_evaluatorINS_12CwiseUnaryOpINS0_14scalar_abs2_opIfEEKNS_13MatrixWrapperIKNS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESB_EEEEEENS0_10IndexBasedEfEC2ERKSG_($4, $5);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13MatrixWrapperIKNS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESA_EEEEEEvRKT_RKT0_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 __ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13MatrixWrapperIKNS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESA_EEEELb0EE3runERKS3_RKSD_($4, $5);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen8internal22evaluator_wrapper_baseINS_13MatrixWrapperIKNS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES8_EEEEED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 $3 = $2 + 4 | 0;
 __ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES7_EEED2Ev($3);
 __ZN5Eigen8internal14evaluator_baseINS_13MatrixWrapperIKNS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES8_EEEEED2Ev($2);
 STACKTOP = sp;
 return;
}

function _CreateGeometry__createSphereBuffer($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
 $8 = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $9 = $4;
 $10 = $5;
 $11 = $6;
 __ZN14CreateGeometry18createSphereBufferEPviS0_($8, $9, $10, $11);
 $12 = SAFE_HEAP_LOAD($8 | 0, 4, 0) | 0 | 0;
 $13 = $8 + 4 | 0;
 $14 = SAFE_HEAP_LOAD($13 | 0, 4, 0) | 0 | 0;
 _emscripten_worker_respond($12 | 0, $14 | 0);
 STACKTOP = sp;
 return;
}

function __ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEEE5coeffEii($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0;
 $8 = $4;
 $9 = $5;
 $10 = __ZN5Eigen8internal19variable_if_dynamicIiLi0EE5valueEv() | 0;
 $11 = Math_imul($9, $10) | 0;
 $12 = $8 + $11 | 0;
 $13 = $7 + ($12 << 2) | 0;
 STACKTOP = sp;
 return $13 | 0;
}

function __ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS0_17scalar_product_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEES9_EEED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 __ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS0_17scalar_product_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEES9_EENS0_10IndexBasedESI_ffED2Ev($2);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEEC2ERKSD_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 __ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffEC2ERKSD_($4, $5);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen13MatrixWrapperIKNS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES7_EEEC2ERS9_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN5Eigen10MatrixBaseINS_13MatrixWrapperIKNS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES8_EEEEEC2Ev($4);
 $5 = $3;
 __ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES6_EC2ERKS7_($4, $5);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES6_EC2ERKS7_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 {}
 SAFE_HEAP_STORE($4 | 0, SAFE_HEAP_LOAD($5 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($4 + 4 | 0, SAFE_HEAP_LOAD($5 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
 $6 = $4 + 8 | 0;
 $7 = $3;
 $8 = $7 + 8 | 0;
 __ZN5Eigen8internal13scalar_sum_opIffEC2ERKS2_($6, $8);
 STACKTOP = sp;
 return;
}

function __ZNK5Eigen13CwiseBinaryOpINS_8internal18scalar_quotient_opIffEEKNS_13MatrixWrapperIKNS0_INS1_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES9_EEEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE4rowsEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 $3 = $2 + 4 | 0;
 $4 = __ZNK5Eigen13MatrixWrapperIKNS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES7_EEE4rowsEv($3) | 0;
 STACKTOP = sp;
 return $4 | 0;
}

function __ZNK5Eigen13CwiseBinaryOpINS_8internal18scalar_quotient_opIffEEKNS_13MatrixWrapperIKNS0_INS1_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES9_EEEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE4colsEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 $3 = $2 + 4 | 0;
 $4 = __ZNK5Eigen13MatrixWrapperIKNS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES7_EEE4colsEv($3) | 0;
 STACKTOP = sp;
 return $4 | 0;
}

function __ZN5Eigen17CwiseBinaryOpImplINS_8internal13scalar_sum_opIffEEKNS_13CwiseBinaryOpINS1_17scalar_product_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES9_EEEES9_NS_5DenseEEC2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 __ZN5Eigen9ArrayBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS2_17scalar_product_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEES9_EEEC2Ev($2);
 STACKTOP = sp;
 return;
}

function __Znwj($0) {
 $0 = $0 | 0;
 var $$ = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0 | 0) == 0;
 $$ = $1 ? 1 : $0;
 while (1) {
  $2 = _malloc($$) | 0;
  $3 = ($2 | 0) == (0 | 0);
  if (!$3) {
   label = 6;
   break;
  }
  $4 = __ZSt15get_new_handlerv() | 0;
  $5 = ($4 | 0) == (0 | 0);
  if ($5) {
   label = 5;
   break;
  }
  FUNCTION_TABLE_v[(SAFE_FT_MASK($4 | 0, 127 | 0) | 0) & 127]();
 }
 if ((label | 0) == 5) {
  $6 = ___cxa_allocate_exception(4) | 0;
  __ZNSt9bad_allocC2Ev($6);
  ___cxa_throw($6 | 0, 72 | 0, 18 | 0);
 } else if ((label | 0) == 6) {
  return $2 | 0;
 }
 return 0 | 0;
}

function __ZNK5Eigen9ArrayBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES7_EEE6matrixEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $2 = $1;
 $3 = $2;
 $4 = __ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES7_EEE7derivedEv($3) | 0;
 __ZN5Eigen13MatrixWrapperIKNS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES7_EEEC2ERS9_($0, $4);
 STACKTOP = sp;
 return;
}

function __ZNK5Eigen8internal22evaluator_wrapper_baseINS_13MatrixWrapperIKNS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES8_EEEEE5coeffEi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $4 + 4 | 0;
 $6 = $3;
 $7 = +__ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES7_EENS0_10IndexBasedES9_ffE5coeffEi($5, $6);
 STACKTOP = sp;
 return +$7;
}

function __ZN5Eigen9ArrayBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS2_17scalar_product_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEES9_EEEC2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 __ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS2_17scalar_product_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEES9_EEEC2Ev($2);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen8internal9evaluatorIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEEC2ERSE_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 __ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEEC2ERKSD_($4, $5);
 STACKTOP = sp;
 return;
}

function __ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS1_17scalar_product_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEES8_E4rowsEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 $3 = $2 + 4 | 0;
 $4 = __ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE4rowsEv($3) | 0;
 STACKTOP = sp;
 return $4 | 0;
}

function __ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS1_17scalar_product_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEES8_E4colsEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 $3 = $2 + 4 | 0;
 $4 = __ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE4colsEv($3) | 0;
 STACKTOP = sp;
 return $4 | 0;
}

function __ZN5Eigen8internal24call_assignment_no_aliasINS_5ArrayIjLi3ELi1ELi0ELi3ELi1EEES3_NS0_9assign_opIjjEEEEvRT_RKT0_RKT1_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $3;
 $6 = $7;
 $8 = $6;
 $9 = $4;
 $10 = $5;
 __ZN5Eigen8internal10AssignmentINS_5ArrayIjLi3ELi1ELi0ELi3ELi1EEES3_NS0_9assign_opIjjEENS0_11Dense2DenseEvE3runERS3_RKS3_RKS5_($8, $9, $10);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen8internal24call_assignment_no_aliasINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $3;
 $6 = $7;
 $8 = $6;
 $9 = $4;
 $10 = $5;
 __ZN5Eigen8internal10AssignmentINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES3_NS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS3_RKS5_($8, $9, $10);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen8internal9evaluatorINS_12CwiseUnaryOpINS0_14scalar_abs2_opIfEEKNS_13MatrixWrapperIKNS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESB_EEEEEEED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 __ZN5Eigen8internal15unary_evaluatorINS_12CwiseUnaryOpINS0_14scalar_abs2_opIfEEKNS_13MatrixWrapperIKNS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESB_EEEEEENS0_10IndexBasedEfED2Ev($2);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_5ArrayIjLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIjjEELi0EEELi1ELi2EE3runERS9_($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 __ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_5ArrayIjLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIjjEELi0EEELi0ELi3EE3runERS9_($2);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi2EE3runERS9_($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 __ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi0ELi3EE3runERS9_($2);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_13CwiseBinaryOpINS0_18scalar_quotient_opIffEEKNS_13MatrixWrapperIKNS7_INS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESF_EEEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKS5_EEEEEENS0_9assign_opIffEELi0EEELi3ELi3EE3runERSU_($0) {
 $0 = $0 | 0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 STACKTOP = sp;
 return;
}

function __ZN5Eigen8internal15redux_evaluatorINS_12CwiseUnaryOpINS0_14scalar_abs2_opIfEEKNS_13MatrixWrapperIKNS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESB_EEEEEEED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 __ZN5Eigen8internal9evaluatorINS_12CwiseUnaryOpINS0_14scalar_abs2_opIfEEKNS_13MatrixWrapperIKNS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESB_EEEEEEED2Ev($2);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 __ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffED2Ev($2);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen8internal9evaluatorINS_13MatrixWrapperIKNS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES8_EEEEEC2ERKSB_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 __ZN5Eigen8internal15unary_evaluatorINS_13MatrixWrapperIKNS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES8_EEEENS0_10IndexBasedEfEC2ERKSB_($4, $5);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen10MatrixBaseINS_12CwiseUnaryOpINS_8internal14scalar_abs2_opIfEEKNS_13MatrixWrapperIKNS_13CwiseBinaryOpINS2_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESB_EEEEEEEC2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 __ZN5Eigen9DenseBaseINS_12CwiseUnaryOpINS_8internal14scalar_abs2_opIfEEKNS_13MatrixWrapperIKNS_13CwiseBinaryOpINS2_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESB_EEEEEEEC2Ev($2);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen16CwiseUnaryOpImplINS_8internal14scalar_abs2_opIfEEKNS_13MatrixWrapperIKNS_13CwiseBinaryOpINS1_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESA_EEEENS_5DenseEEC2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 __ZN5Eigen10MatrixBaseINS_12CwiseUnaryOpINS_8internal14scalar_abs2_opIfEEKNS_13MatrixWrapperIKNS_13CwiseBinaryOpINS2_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESB_EEEEEEEC2Ev($2);
 STACKTOP = sp;
 return;
}

function __ZNK5Eigen12CwiseUnaryOpINS_8internal14scalar_abs2_opIfEEKNS_13MatrixWrapperIKNS_13CwiseBinaryOpINS1_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESA_EEEEE4rowsEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 $3 = $2 + 4 | 0;
 $4 = __ZNK5Eigen13MatrixWrapperIKNS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES7_EEE4rowsEv($3) | 0;
 STACKTOP = sp;
 return $4 | 0;
}

function __ZNK5Eigen12CwiseUnaryOpINS_8internal14scalar_abs2_opIfEEKNS_13MatrixWrapperIKNS_13CwiseBinaryOpINS1_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESA_EEEEE4colsEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 $3 = $2 + 4 | 0;
 $4 = __ZNK5Eigen13MatrixWrapperIKNS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES7_EEE4colsEv($3) | 0;
 STACKTOP = sp;
 return $4 | 0;
}

function __ZN5Eigen8internal9evaluatorIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 __ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEED2Ev($2);
 STACKTOP = sp;
 return;
}

function __ZNSt3__218__libcpp_refstringC2EPKc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = _strlen($1) | 0;
 $3 = $2 + 13 | 0;
 $4 = __Znwj($3) | 0;
 SAFE_HEAP_STORE($4 | 0, $2 | 0, 4);
 $5 = $4 + 4 | 0;
 SAFE_HEAP_STORE($5 | 0, $2 | 0, 4);
 $6 = $4 + 8 | 0;
 SAFE_HEAP_STORE($6 | 0, 0 | 0, 4);
 $7 = __ZNSt3__215__refstring_imp12_GLOBAL__N_113data_from_repEPNS1_9_Rep_baseE($4) | 0;
 $8 = $2 + 1 | 0;
 _memcpy($7 | 0, $1 | 0, $8 | 0) | 0;
 SAFE_HEAP_STORE($0 | 0, $7 | 0, 4);
 return;
}

function __ZN5Eigen8internal9evaluatorIKNS_13MatrixWrapperIKNS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES8_EEEEEC2ERSC_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 __ZN5Eigen8internal9evaluatorINS_13MatrixWrapperIKNS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES8_EEEEEC2ERKSB_($4, $5);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen9ArrayBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEEC2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 __ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEEC2Ev($2);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EENS_5DenseEEC2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 __ZN5Eigen9ArrayBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEEC2Ev($2);
 STACKTOP = sp;
 return;
}

function __ZNK5Eigen8internal9evaluatorINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE5coeffIiEEfT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $4 + 4 | 0;
 $6 = $3;
 $7 = +__ZNK5Eigen8internal15nullary_wrapperIfNS0_18scalar_constant_opIfEELb1ELb0ELb0EEclIiEEfRKS3_T_S8_($5, $4, $6, 0);
 STACKTOP = sp;
 return +$7;
}

function __ZNK5Eigen8internal9evaluatorINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEEE5coeffIiEEfT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $4 + 4 | 0;
 $6 = $3;
 $7 = +__ZNK5Eigen8internal15nullary_wrapperIfNS0_18scalar_constant_opIfEELb1ELb0ELb0EEclIiEEfRKS3_T_S8_($5, $4, $6, 0);
 STACKTOP = sp;
 return +$7;
}

function __ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS0_17scalar_product_opIffEEKS5_KNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEESC_EEEENS0_9assign_opIffEELi0EEELi3ELi3EE3runERSO_($0) {
 $0 = $0 | 0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 STACKTOP = sp;
 return;
}

function __ZN5Eigen12DenseStorageIjLi3ELi3ELi1ELi0EEC2ERKS1_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 {}
 SAFE_HEAP_STORE($4 | 0, SAFE_HEAP_LOAD($5 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($4 + 4 | 0, SAFE_HEAP_LOAD($5 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($4 + 8 | 0, SAFE_HEAP_LOAD($5 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EEC2ERKS1_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 {}
 SAFE_HEAP_STORE($4 | 0, SAFE_HEAP_LOAD($5 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($4 + 4 | 0, SAFE_HEAP_LOAD($5 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($4 + 8 | 0, SAFE_HEAP_LOAD($5 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES7_EEEC2ERKS8_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 __ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES7_EENS0_10IndexBasedES9_ffEC2ERKS8_($4, $5);
 STACKTOP = sp;
 return;
}

function __ZNSt3__218__libcpp_refstringD2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = __ZNKSt3__218__libcpp_refstring15__uses_refcountEv($0) | 0;
 if ($1) {
  $2 = SAFE_HEAP_LOAD($0 | 0, 4, 0) | 0 | 0;
  $3 = __ZNSt3__215__refstring_imp12_GLOBAL__N_113rep_from_dataEPKc_295($2) | 0;
  $4 = $3 + 8 | 0;
  $5 = SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0;
  SAFE_HEAP_STORE($4 | 0, $5 + -1 | 0 | 0, 4);
  $6 = $5 + -1 | 0;
  $7 = ($6 | 0) < 0;
  if ($7) {
   __ZdlPv($3);
  }
 }
 return;
}

function __ZN5Eigen8internal15unary_evaluatorINS_13MatrixWrapperIKNS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES8_EEEENS0_10IndexBasedEfED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 __ZN5Eigen8internal22evaluator_wrapper_baseINS_13MatrixWrapperIKNS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES8_EEEEED2Ev($2);
 STACKTOP = sp;
 return;
}

function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = $1 + 8 | 0;
 $7 = SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0;
 $8 = __ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, $7, $5) | 0;
 if ($8) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $1, $2, $3, $4);
 }
 return;
}

function __ZN5Eigen8internal18check_for_aliasingINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEENS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEvRKT_RKT0_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 __ZN5Eigen8internal27checkTransposeAliasing_implINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEENS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELb0EE3runERKS3_RKS5_($4, $5);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_18scalar_quotient_opIffEEKNS_13MatrixWrapperIKNS4_INS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESC_EEEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKS3_EEEELb0EE3runERSK_RKSN_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $2 = $0;
 $3 = $1;
 STACKTOP = sp;
 return;
}

function SAFE_HEAP_LOAD(dest, bytes, unsigned) {
 dest = dest | 0;
 bytes = bytes | 0;
 unsigned = unsigned | 0;
 if ((dest | 0) <= 0) segfault();
 if ((dest + bytes | 0) > (HEAP32[DYNAMICTOP_PTR >> 2] | 0)) segfault();
 if ((bytes | 0) == 4) {
  if (dest & 3) alignfault();
  return HEAP32[dest >> 2] | 0;
 } else if ((bytes | 0) == 1) {
  if (unsigned) {
   return HEAPU8[dest >> 0] | 0;
  } else {
   return HEAP8[dest >> 0] | 0;
  }
 }
 if (dest & 1) alignfault();
 if (unsigned) return HEAPU16[dest >> 1] | 0;
 return HEAP16[dest >> 1] | 0;
}

function __ZN5Eigen8internal9evaluatorIKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC2ERS9_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 __ZN5Eigen8internal9evaluatorINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC2ERKS8_($4, $5);
 STACKTOP = sp;
 return;
}

function __ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE4rowsEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 $3 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
 $4 = __ZNK5Eigen15PlainObjectBaseINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv($3) | 0;
 STACKTOP = sp;
 return $4 | 0;
}

function __ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE4colsEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 $3 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
 $4 = __ZNK5Eigen15PlainObjectBaseINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv($3) | 0;
 STACKTOP = sp;
 return $4 | 0;
}

function __ZN5Eigen8internal9evaluatorIKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEEEC2ERS9_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 __ZN5Eigen8internal9evaluatorINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEEEC2ERKS8_($4, $5);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_18scalar_quotient_opIffEEKNS_13MatrixWrapperIKNS2_INS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESA_EEEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEEED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 __ZN5Eigen8internal11noncopyableD2Ev($2);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_18scalar_quotient_opIffEEKNS_13MatrixWrapperIKNS2_INS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESA_EEEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEEEC2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 __ZN5Eigen8internal11noncopyableC2Ev($2);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen8internal9evaluatorINS_13MatrixWrapperIKNS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES8_EEEEED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 __ZN5Eigen8internal15unary_evaluatorINS_13MatrixWrapperIKNS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES8_EEEENS0_10IndexBasedEfED2Ev($2);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ___cxa_allocate_exception(8) | 0;
 __THREW__ = 0;
 invoke_vii(56, $1 | 0, 5005 | 0);
 $2 = __THREW__;
 __THREW__ = 0;
 $3 = $2 & 1;
 if ($3) {
  $4 = ___cxa_find_matching_catch_2() | 0;
  $5 = tempRet0;
  ___cxa_free_exception($1 | 0);
  ___resumeException($4 | 0);
 } else {
  SAFE_HEAP_STORE($1 | 0, 796 | 0, 4);
  ___cxa_throw($1 | 0, 104 | 0, 21 | 0);
 }
}

function __ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_13MatrixWrapperIKNS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESD_EEEEEENS0_9assign_opIffEELi0EEELi3ELi3EE3runERSK_($0) {
 $0 = $0 | 0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 STACKTOP = sp;
 return;
}

function __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = $1 + 4 | 0;
 $5 = SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0;
 $6 = ($5 | 0) == ($2 | 0);
 if ($6) {
  $7 = $1 + 28 | 0;
  $8 = SAFE_HEAP_LOAD($7 | 0, 4, 0) | 0 | 0;
  $9 = ($8 | 0) == 1;
  if (!$9) {
   SAFE_HEAP_STORE($7 | 0, $3 | 0, 4);
  }
 }
 return;
}

function __ZN5Eigen13MatrixWrapperIKNS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES7_EEEC2ERKSA_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 __ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES6_EC2ERKS7_($4, $5);
 STACKTOP = sp;
 return;
}

function ___cxa_get_globals_fast() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $vararg_buffer = sp;
 $0 = _pthread_once(6268 | 0, 123 | 0) | 0;
 $1 = ($0 | 0) == 0;
 if ($1) {
  $2 = SAFE_HEAP_LOAD(1568 * 4 | 0, 4, 0) | 0 | 0;
  $3 = _pthread_getspecific($2 | 0) | 0;
  STACKTOP = sp;
  return $3 | 0;
 } else {
  _abort_message(5287, $vararg_buffer);
 }
 return 0 | 0;
}

function __ZNK5Eigen13CwiseBinaryOpINS_8internal18scalar_quotient_opIffEEKNS_13MatrixWrapperIKNS0_INS1_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES9_EEEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE7functorEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 $3 = $2 + 24 | 0;
 STACKTOP = sp;
 return $3 | 0;
}

function __ZN5Eigen8internal9evaluatorIKNS_13MatrixWrapperIKNS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES8_EEEEED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 __ZN5Eigen8internal9evaluatorINS_13MatrixWrapperIKNS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES8_EEEEED2Ev($2);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen10MatrixBaseINS_13MatrixWrapperIKNS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES8_EEEEEC2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 __ZN5Eigen9DenseBaseINS_13MatrixWrapperIKNS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES8_EEEEEC2Ev($2);
 STACKTOP = sp;
 return;
}

function __ZNK5Eigen13CwiseBinaryOpINS_8internal18scalar_quotient_opIffEEKNS_13MatrixWrapperIKNS0_INS1_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES9_EEEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE3rhsEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 $3 = $2 + 16 | 0;
 STACKTOP = sp;
 return $3 | 0;
}

function ___stdio_close($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $vararg_buffer = sp;
 $1 = $0 + 60 | 0;
 $2 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0;
 $3 = _dummy_738($2) | 0;
 SAFE_HEAP_STORE($vararg_buffer | 0, $3 | 0, 4);
 $4 = ___syscall6(6, $vararg_buffer | 0) | 0;
 $5 = ___syscall_ret($4) | 0;
 STACKTOP = sp;
 return $5 | 0;
}

function __ZNK5Eigen9EigenBaseINS_5ArrayIjLi3ELi1ELi0ELi3ELi1EEEE4sizeEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 $3 = __ZNK5Eigen9EigenBaseINS_5ArrayIjLi3ELi1ELi0ELi3ELi1EEEE4rowsEv($2) | 0;
 $4 = __ZNK5Eigen9EigenBaseINS_5ArrayIjLi3ELi1ELi0ELi3ELi1EEEE4colsEv($2) | 0;
 $5 = Math_imul($3, $4) | 0;
 STACKTOP = sp;
 return $5 | 0;
}

function __ZNK5Eigen13CwiseBinaryOpINS_8internal18scalar_quotient_opIffEEKNS_13MatrixWrapperIKNS0_INS1_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES9_EEEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE3lhsEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 $3 = $2 + 4 | 0;
 STACKTOP = sp;
 return $3 | 0;
}

function __ZNK5Eigen8internal15nullary_wrapperIfNS0_18scalar_constant_opIfEELb1ELb0ELb0EEclIiEEfRKS3_T_S8_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $5;
 $9 = +__ZNK5Eigen8internal18scalar_constant_opIfEclEv($8);
 STACKTOP = sp;
 return +$9;
}

function __ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS1_17scalar_product_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEES8_E3rhsEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 $3 = $2 + 20 | 0;
 $4 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0;
 STACKTOP = sp;
 return $4 | 0;
}

function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = $1 + 8 | 0;
 $5 = SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0;
 $6 = __ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, $5, 0) | 0;
 if ($6) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $1, $2, $3);
 }
 return;
}

function __ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal18scalar_quotient_opIffEEKNS_13MatrixWrapperIKNS1_INS2_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESA_EEEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEEE7derivedEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 STACKTOP = sp;
 return $2 | 0;
}

function __ZNK5Eigen8internal18scalar_quotient_opIffEclERKfS4_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $4;
 $7 = +(+SAFE_HEAP_LOAD_D($6 | 0, 4));
 $8 = $5;
 $9 = +(+SAFE_HEAP_LOAD_D($8 | 0, 4));
 $10 = $7 / $9;
 STACKTOP = sp;
 return +$10;
}

function __ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $4;
 $7 = +(+SAFE_HEAP_LOAD_D($6 | 0, 4));
 $8 = $5;
 $9 = +(+SAFE_HEAP_LOAD_D($8 | 0, 4));
 $10 = $7 * $9;
 STACKTOP = sp;
 return +$10;
}

function __ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES7_EEED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 __ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES7_EENS0_10IndexBasedES9_ffED2Ev($2);
 STACKTOP = sp;
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $vararg_buffer = sp;
 _free($0);
 $1 = SAFE_HEAP_LOAD(1568 * 4 | 0, 4, 0) | 0 | 0;
 $2 = _pthread_setspecific($1 | 0, 0 | 0) | 0;
 $3 = ($2 | 0) == 0;
 if ($3) {
  STACKTOP = sp;
  return;
 } else {
  _abort_message(5386, $vararg_buffer);
 }
}

function __ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $4;
 $7 = +(+SAFE_HEAP_LOAD_D($6 | 0, 4));
 $8 = $5;
 $9 = +(+SAFE_HEAP_LOAD_D($8 | 0, 4));
 $10 = $7 + $9;
 STACKTOP = sp;
 return +$10;
}

function __ZNK5Eigen13MatrixWrapperIKNS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES7_EEE4rowsEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 $3 = __ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES6_E4rowsEv($2) | 0;
 STACKTOP = sp;
 return $3 | 0;
}

function __ZNK5Eigen13MatrixWrapperIKNS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES7_EEE4colsEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 $3 = __ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES6_E4colsEv($2) | 0;
 STACKTOP = sp;
 return $3 | 0;
}

function __ZN5Eigen8internal27checkTransposeAliasing_implINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS0_17scalar_product_opIffEEKS3_KNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEES9_EELb0EE3runERS9_RKSH_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $2 = $0;
 $3 = $1;
 STACKTOP = sp;
 return;
}

function __ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES6_E4rowsEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 $3 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
 $4 = __ZNK5Eigen15PlainObjectBaseINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv($3) | 0;
 STACKTOP = sp;
 return $4 | 0;
}

function __ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES6_E4colsEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 $3 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
 $4 = __ZNK5Eigen15PlainObjectBaseINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv($3) | 0;
 STACKTOP = sp;
 return $4 | 0;
}

function __ZN5Eigen8internal18check_for_aliasingINS_5ArrayIjLi3ELi1ELi0ELi3ELi1EEES3_EEvRKT_RKT0_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 __ZN5Eigen8internal27checkTransposeAliasing_implINS_5ArrayIjLi3ELi1ELi0ELi3ELi1EEES3_Lb0EE3runERKS3_S6_($4, $5);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen8internal18check_for_aliasingINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES3_EEvRKT_RKT0_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 __ZN5Eigen8internal27checkTransposeAliasing_implINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES3_Lb0EE3runERKS3_S6_($4, $5);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS0_17scalar_product_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEES9_EEED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 __ZN5Eigen8internal11noncopyableD2Ev($2);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS0_17scalar_product_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEES9_EEEC2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 __ZN5Eigen8internal11noncopyableC2Ev($2);
 STACKTOP = sp;
 return;
}

function __ZNK5Eigen9EigenBaseINS_5ArrayIjLi3ELi1ELi0ELi3ELi1EEEE4rowsEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 $3 = __ZNK5Eigen9EigenBaseINS_5ArrayIjLi3ELi1ELi0ELi3ELi1EEEE7derivedEv($2) | 0;
 $4 = __ZNK5Eigen15PlainObjectBaseINS_5ArrayIjLi3ELi1ELi0ELi3ELi1EEEE4rowsEv($3) | 0;
 STACKTOP = sp;
 return $4 | 0;
}

function __ZNK5Eigen9EigenBaseINS_5ArrayIjLi3ELi1ELi0ELi3ELi1EEEE4colsEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 $3 = __ZNK5Eigen9EigenBaseINS_5ArrayIjLi3ELi1ELi0ELi3ELi1EEEE7derivedEv($2) | 0;
 $4 = __ZNK5Eigen15PlainObjectBaseINS_5ArrayIjLi3ELi1ELi0ELi3ELi1EEEE4colsEv($3) | 0;
 STACKTOP = sp;
 return $4 | 0;
}

function __ZN5Eigen8internal9evaluatorINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 __ZN5Eigen8internal14evaluator_baseINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED2Ev($2);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen15PlainObjectBaseINS_5ArrayIjLi3ELi1ELi0ELi3ELi1EEEEC2ERKS3_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN5Eigen9ArrayBaseINS_5ArrayIjLi3ELi1ELi0ELi3ELi1EEEEC2Ev($4);
 $5 = $3;
 __ZN5Eigen12DenseStorageIjLi3ELi3ELi1ELi0EEC2ERKS1_($4, $5);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen15PlainObjectBaseINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEC2ERKS3_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN5Eigen9ArrayBaseINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEC2Ev($4);
 $5 = $3;
 __ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EEC2ERKS1_($4, $5);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen8internal9evaluatorINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEEED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 __ZN5Eigen8internal14evaluator_baseINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEEED2Ev($2);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen8internal9evaluatorIKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 __ZN5Eigen8internal9evaluatorINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED2Ev($2);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen10MatrixBaseINS_14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 __ZN5Eigen9DenseBaseINS_14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC2Ev($2);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE8coeffRefEi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0;
 $6 = $3;
 $7 = $5 + ($6 << 2) | 0;
 STACKTOP = sp;
 return $7 | 0;
}

function __ZN5Eigen8internal9evaluatorIKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEEED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 __ZN5Eigen8internal9evaluatorINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEEED2Ev($2);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_5ArrayIjLi3ELi1ELi0ELi3ELi1EEEEEE8coeffRefEi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0;
 $6 = $3;
 $7 = $5 + ($6 << 2) | 0;
 STACKTOP = sp;
 return $7 | 0;
}

function __ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEEE8coeffRefEi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0;
 $6 = $3;
 $7 = $5 + ($6 << 2) | 0;
 STACKTOP = sp;
 return $7 | 0;
}

function __ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE5coeffEi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0;
 $6 = $3;
 $7 = $5 + ($6 << 2) | 0;
 STACKTOP = sp;
 return $7 | 0;
}

function __ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_5ArrayIjLi3ELi1ELi0ELi3ELi1EEEEEE5coeffEi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0;
 $6 = $3;
 $7 = $5 + ($6 << 2) | 0;
 STACKTOP = sp;
 return $7 | 0;
}

function __ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEEE5coeffEi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0;
 $6 = $3;
 $7 = $5 + ($6 << 2) | 0;
 STACKTOP = sp;
 return $7 | 0;
}

function __ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal18scalar_quotient_opIffEEKNS_13MatrixWrapperIKNS1_INS2_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESA_EEEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEEEC2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 STACKTOP = sp;
 return;
}

function __ZN5Eigen9ArrayBaseINS_14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEEEC2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 __ZN5Eigen9DenseBaseINS_14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEEEC2Ev($2);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen9ArrayBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES7_EEEC2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 __ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES7_EEEC2Ev($2);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen17CwiseBinaryOpImplINS_8internal13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES6_NS_5DenseEEC2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 __ZN5Eigen9ArrayBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES7_EEEC2Ev($2);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC2ERKS3_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 __ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC2ERKS5_($4, $5);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen8internal14evaluator_baseINS_12CwiseUnaryOpINS0_14scalar_abs2_opIfEEKNS_13MatrixWrapperIKNS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESB_EEEEEEED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 __ZN5Eigen8internal11noncopyableD2Ev($2);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen8internal14evaluator_baseINS_12CwiseUnaryOpINS0_14scalar_abs2_opIfEEKNS_13MatrixWrapperIKNS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESB_EEEEEEEC2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 __ZN5Eigen8internal11noncopyableC2Ev($2);
 STACKTOP = sp;
 return;
}

function __ZNK5Eigen8internal9assign_opIjjE11assignCoeffERjRKj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $5;
 $7 = SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0;
 $8 = $4;
 SAFE_HEAP_STORE($8 | 0, $7 | 0, 4);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen8internal9evaluatorINS_5ArrayIjLi3ELi1ELi0ELi3ELi1EEEEC2ERKS3_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 __ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_5ArrayIjLi3ELi1ELi0ELi3ELi1EEEEEEC2ERKS5_($4, $5);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen8internal9evaluatorINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEC2ERKS3_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 __ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEEEC2ERKS5_($4, $5);
 STACKTOP = sp;
 return;
}

function __ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS1_17scalar_product_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEES8_E7functorEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 $3 = $2 + 24 | 0;
 STACKTOP = sp;
 return $3 | 0;
}

function __ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS0_9assign_opIffEELi0EEELi3ELi3EE3runERSC_($0) {
 $0 = $0 | 0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 STACKTOP = sp;
 return;
}

function __ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $5;
 $7 = +(+SAFE_HEAP_LOAD_D($6 | 0, 4));
 $8 = $4;
 SAFE_HEAP_STORE_D($8 | 0, +$7, 4);
 STACKTOP = sp;
 return;
}

function __ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS1_17scalar_product_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEES8_E3lhsEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 $3 = $2 + 4 | 0;
 STACKTOP = sp;
 return $3 | 0;
}

function __ZNK5Eigen8internal14scalar_abs2_opIfEclERKf($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = +__ZN5Eigen6numext4abs2IfEENS_8internal11abs2_retvalINS2_36global_math_functions_filtering_baseIT_vE4typeEE4typeERKS5_($4);
 STACKTOP = sp;
 return +$5;
}

function __ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13MatrixWrapperIKNS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESA_EEEELb0EE3runERKS3_RKSD_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $2 = $0;
 $3 = $1;
 STACKTOP = sp;
 return;
}

function ___lctrans_impl($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1 | 0) == (0 | 0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0;
  $4 = $1 + 4 | 0;
  $5 = SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0;
  $6 = ___mo_lookup($3, $5, $0) | 0;
  $$0 = $6;
 }
 $7 = ($$0 | 0) != (0 | 0);
 $8 = $7 ? $$0 : $0;
 return $8 | 0;
}

function __ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 __ZN5Eigen8internal11noncopyableD2Ev($2);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEEC2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 __ZN5Eigen8internal11noncopyableC2Ev($2);
 STACKTOP = sp;
 return;
}

function __ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS2_17scalar_product_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEES9_EEE7derivedEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 STACKTOP = sp;
 return $2 | 0;
}

function __ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE3lhsEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 $3 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
 STACKTOP = sp;
 return $3 | 0;
}

function __ZNK5Eigen12CwiseUnaryOpINS_8internal14scalar_abs2_opIfEEKNS_13MatrixWrapperIKNS_13CwiseBinaryOpINS1_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESA_EEEEE16nestedExpressionEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 $3 = $2 + 4 | 0;
 STACKTOP = sp;
 return $3 | 0;
}

function __ZN5Eigen8internal9evaluatorIKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEC2ERS4_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 __ZN5Eigen8internal9evaluatorINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEC2ERKS3_($4, $5);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen5ArrayIfLi3ELi1ELi0ELi3ELi1EEC2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 __ZN5Eigen15PlainObjectBaseINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEC2Ev($2);
 __ZN5Eigen15PlainObjectBaseINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEE22_check_template_paramsEv();
 STACKTOP = sp;
 return;
}

function __ZNK5Eigen12CwiseUnaryOpINS_8internal14scalar_abs2_opIfEEKNS_13MatrixWrapperIKNS_13CwiseBinaryOpINS1_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESA_EEEEE7functorEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 $3 = $2 + 16 | 0;
 STACKTOP = sp;
 return $3 | 0;
}

function __ZNSt11logic_errorC2EPKc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 SAFE_HEAP_STORE($0 | 0, 776 | 0, 4);
 $2 = $0 + 4 | 0;
 __THREW__ = 0;
 invoke_vii(122, $2 | 0, $1 | 0);
 $3 = __THREW__;
 __THREW__ = 0;
 $4 = $3 & 1;
 if ($4) {
  $5 = ___cxa_find_matching_catch_2() | 0;
  $6 = tempRet0;
  ___resumeException($5 | 0);
 } else {
  return;
 }
}

function _llvm_cttz_i32(x) {
 x = x | 0;
 var ret = 0;
 ret = SAFE_HEAP_LOAD(cttz_i8 + (x & 255) | 0, 1, 0) | 0;
 if ((ret | 0) < 8) return ret | 0;
 ret = SAFE_HEAP_LOAD(cttz_i8 + (x >> 8 & 255) | 0, 1, 0) | 0;
 if ((ret | 0) < 8) return ret + 8 | 0;
 ret = SAFE_HEAP_LOAD(cttz_i8 + (x >> 16 & 255) | 0, 1, 0) | 0;
 if ((ret | 0) < 8) return ret + 16 | 0;
 return (SAFE_HEAP_LOAD(cttz_i8 + (x >>> 24) | 0, 1, 0) | 0) + 24 | 0;
}

function __ZN5Eigen8internal17abs2_impl_defaultIfLb0EE3runERKf($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 $3 = +(+SAFE_HEAP_LOAD_D($2 | 0, 4));
 $4 = $1;
 $5 = +(+SAFE_HEAP_LOAD_D($4 | 0, 4));
 $6 = $3 * $5;
 STACKTOP = sp;
 return +$6;
}

function SAFE_HEAP_STORE(dest, value, bytes) {
 dest = dest | 0;
 value = value | 0;
 bytes = bytes | 0;
 if ((dest | 0) <= 0) segfault();
 if ((dest + bytes | 0) > (HEAP32[DYNAMICTOP_PTR >> 2] | 0)) segfault();
 if ((bytes | 0) == 4) {
  if (dest & 3) alignfault();
  HEAP32[dest >> 2] = value;
 } else if ((bytes | 0) == 1) {
  HEAP8[dest >> 0] = value;
 } else {
  if (dest & 1) alignfault();
  HEAP16[dest >> 1] = value;
 }
}

function __ZNK5Eigen9EigenBaseINS_12CwiseUnaryOpINS_8internal14scalar_abs2_opIfEEKNS_13MatrixWrapperIKNS_13CwiseBinaryOpINS2_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESB_EEEEEEE7derivedEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 STACKTOP = sp;
 return $2 | 0;
}

function __ZN5Eigen6numext4realIfEENS_8internal11real_retvalINS2_36global_math_functions_filtering_baseIT_vE4typeEE4typeERKS5_($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 $3 = +__ZN5Eigen8internal17real_default_implIfLb0EE3runERKf($2);
 STACKTOP = sp;
 return +$3;
}

function __ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE7functorEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 $3 = $2 + 12 | 0;
 STACKTOP = sp;
 return $3 | 0;
}

function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $rem = 0, __stackBase__ = 0;
 __stackBase__ = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $rem = __stackBase__ | 0;
 ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
 STACKTOP = __stackBase__;
 return (tempRet0 = SAFE_HEAP_LOAD($rem + 4 | 0, 4, 0) | 0 | 0, SAFE_HEAP_LOAD($rem | 0, 4, 0) | 0 | 0) | 0;
}

function __ZN5Eigen8internal19variable_if_dynamicIiLi3EEC2Ei($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = ($4 | 0) == 3;
 if ($5) {
  STACKTOP = sp;
  return;
 } else {
  ___assert_fail(947 | 0, 961 | 0, 110, 1066 | 0);
 }
}

function __ZN5Eigen8internal19variable_if_dynamicIiLi1EEC2Ei($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = ($4 | 0) == 1;
 if ($5) {
  STACKTOP = sp;
  return;
 } else {
  ___assert_fail(947 | 0, 961 | 0, 110, 1066 | 0);
 }
}

function __ZN5Eigen8internal19variable_if_dynamicIiLi0EEC2Ei($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = ($4 | 0) == 0;
 if ($5) {
  STACKTOP = sp;
  return;
 } else {
  ___assert_fail(947 | 0, 961 | 0, 110, 1066 | 0);
 }
}

function __ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_5ArrayIjLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIjjEELi0EEELi3ELi3EE3runERS9_($0) {
 $0 = $0 | 0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 STACKTOP = sp;
 return;
}

function __ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi3ELi3EE3runERS9_($0) {
 $0 = $0 | 0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 STACKTOP = sp;
 return;
}

function __ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE3rhsEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 $3 = $2 + 4 | 0;
 STACKTOP = sp;
 return $3 | 0;
}

function __ZN5Eigen8internal18scalar_constant_opIfEC2ERKS2_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 $6 = +(+SAFE_HEAP_LOAD_D($5 | 0, 4));
 SAFE_HEAP_STORE_D($4 | 0, +$6, 4);
 STACKTOP = sp;
 return;
}

function __ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES6_E3rhsEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 $3 = $2 + 4 | 0;
 $4 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0;
 STACKTOP = sp;
 return $4 | 0;
}

function __ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS2_17scalar_product_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEES9_EEEC2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 STACKTOP = sp;
 return;
}

function __ZN5Eigen8internal14evaluator_baseINS_13MatrixWrapperIKNS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES8_EEEEED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 __ZN5Eigen8internal11noncopyableD2Ev($2);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen8internal14evaluator_baseINS_13MatrixWrapperIKNS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES8_EEEEEC2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 __ZN5Eigen8internal11noncopyableC2Ev($2);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen8internal18scalar_constant_opIfEC2ERKf($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 $6 = +(+SAFE_HEAP_LOAD_D($5 | 0, 4));
 SAFE_HEAP_STORE_D($4 | 0, +$6, 4);
 STACKTOP = sp;
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_110construct_Ev() {
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $vararg_buffer = sp;
 $0 = _pthread_key_create(6272 | 0, 124 | 0) | 0;
 $1 = ($0 | 0) == 0;
 if ($1) {
  STACKTOP = sp;
  return;
 } else {
  _abort_message(5336, $vararg_buffer);
 }
}

function __ZN5Eigen15PlainObjectBaseINS_5ArrayIjLi3ELi1ELi0ELi3ELi1EEEEC2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 __ZN5Eigen9ArrayBaseINS_5ArrayIjLi3ELi1ELi0ELi3ELi1EEEEC2Ev($2);
 __ZN5Eigen12DenseStorageIjLi3ELi3ELi1ELi0EEC2Ev($2);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen15PlainObjectBaseINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEC2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 __ZN5Eigen9ArrayBaseINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEC2Ev($2);
 __ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EEC2Ev($2);
 STACKTOP = sp;
 return;
}

function __ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEE7derivedEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 STACKTOP = sp;
 return $2 | 0;
}

function __ZN5Eigen6numext4abs2IfEENS_8internal11abs2_retvalINS2_36global_math_functions_filtering_baseIT_vE4typeEE4typeERKS5_($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 $3 = +__ZN5Eigen8internal9abs2_implIfE3runERKf($2);
 STACKTOP = sp;
 return +$3;
}

function __ZN5Eigen5ArrayIjLi3ELi1ELi0ELi3ELi1EEC2ERKS1_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 __ZN5Eigen15PlainObjectBaseINS_5ArrayIjLi3ELi1ELi0ELi3ELi1EEEEC2ERKS3_($4, $5);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen5ArrayIfLi3ELi1ELi0ELi3ELi1EEC2ERKS1_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 __ZN5Eigen15PlainObjectBaseINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEC2ERKS3_($4, $5);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 __ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED2Ev($2);
 STACKTOP = sp;
 return;
}

function _printf($0, $varargs) {
 $0 = $0 | 0;
 $varargs = $varargs | 0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = sp;
 SAFE_HEAP_STORE($1 | 0, $varargs | 0, 4);
 $2 = SAFE_HEAP_LOAD(134 * 4 | 0, 4, 0) | 0 | 0;
 $3 = _vfprintf($2, $0, $1) | 0;
 STACKTOP = sp;
 return $3 | 0;
}

function __ZNSt3__26vectorIN5Eigen5ArrayIjLi3ELi1ELi0ELi3ELi1EEENS_9allocatorIS3_EEED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 __ZNSt3__213__vector_baseIN5Eigen5ArrayIjLi3ELi1ELi0ELi3ELi1EEENS_9allocatorIS3_EEED2Ev($2);
 STACKTOP = sp;
 return;
}

function __ZNSt3__26vectorIN5Eigen5ArrayIfLi3ELi1ELi0ELi3ELi1EEENS_9allocatorIS3_EEED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 __ZNSt3__213__vector_baseIN5Eigen5ArrayIfLi3ELi1ELi0ELi3ELi1EEENS_9allocatorIS3_EEED2Ev($2);
 STACKTOP = sp;
 return;
}

function __ZNK5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = __ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv() | 0;
 STACKTOP = sp;
 return $2 | 0;
}

function __ZNK5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = __ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv() | 0;
 STACKTOP = sp;
 return $2 | 0;
}

function __ZNK5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = __ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv() | 0;
 STACKTOP = sp;
 return $2 | 0;
}

function __ZNK5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = __ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv() | 0;
 STACKTOP = sp;
 return $2 | 0;
}

function __ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_5ArrayIjLi3ELi1ELi0ELi3ELi1EEEEEED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 __ZN5Eigen8internal14evaluator_baseINS_5ArrayIjLi3ELi1ELi0ELi3ELi1EEEED2Ev($2);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEEED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 __ZN5Eigen8internal14evaluator_baseINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEED2Ev($2);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen8internal14evaluator_baseINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 __ZN5Eigen8internal11noncopyableD2Ev($2);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen8internal14evaluator_baseINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 __ZN5Eigen8internal11noncopyableC2Ev($2);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 __ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED2Ev($2);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen8internal14evaluator_baseINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEEED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 __ZN5Eigen8internal11noncopyableD2Ev($2);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen8internal14evaluator_baseINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEEEC2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 __ZN5Eigen8internal11noncopyableC2Ev($2);
 STACKTOP = sp;
 return;
}

function _abort_message($0, $varargs) {
 $0 = $0 | 0;
 $varargs = $varargs | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = sp;
 SAFE_HEAP_STORE($1 | 0, $varargs | 0, 4);
 $2 = SAFE_HEAP_LOAD(41 * 4 | 0, 4, 0) | 0 | 0;
 _vfprintf($2, $0, $1) | 0;
 _fputc(10, $2) | 0;
 _abort();
}

function __ZN5Eigen8internal9evaluatorINS_5ArrayIjLi3ELi1ELi0ELi3ELi1EEEED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 __ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_5ArrayIjLi3ELi1ELi0ELi3ELi1EEEEEED2Ev($2);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen8internal9evaluatorINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 __ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEEED2Ev($2);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES7_EEED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 __ZN5Eigen8internal11noncopyableD2Ev($2);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES7_EEEC2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 __ZN5Eigen8internal11noncopyableC2Ev($2);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen9DenseBaseINS_12CwiseUnaryOpINS_8internal14scalar_abs2_opIfEEKNS_13MatrixWrapperIKNS_13CwiseBinaryOpINS2_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESB_EEEEEEEC2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 STACKTOP = sp;
 return;
}

function __ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES6_E3lhsEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 $3 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
 STACKTOP = sp;
 return $3 | 0;
}

function __ZN5Eigen8internal27checkTransposeAliasing_implINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEENS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELb0EE3runERKS3_RKS5_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $2 = $0;
 $3 = $1;
 STACKTOP = sp;
 return;
}

function __ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4dataEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 $3 = __ZNK5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE4dataEv($2) | 0;
 STACKTOP = sp;
 return $3 | 0;
}

function __ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEEC2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 STACKTOP = sp;
 return;
}

function __ZNK5Eigen9EigenBaseINS_13MatrixWrapperIKNS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES8_EEEEE7derivedEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 STACKTOP = sp;
 return $2 | 0;
}

function __ZNK5Eigen15PlainObjectBaseINS_5ArrayIjLi3ELi1ELi0ELi3ELi1EEEE4dataEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 $3 = __ZNK5Eigen12DenseStorageIjLi3ELi3ELi1ELi0EE4dataEv($2) | 0;
 STACKTOP = sp;
 return $3 | 0;
}

function __ZNK5Eigen15PlainObjectBaseINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEE4dataEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 $3 = __ZNK5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE4dataEv($2) | 0;
 STACKTOP = sp;
 return $3 | 0;
}

function __ZNK5Eigen13MatrixWrapperIKNS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES7_EEE16nestedExpressionEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 STACKTOP = sp;
 return $2 | 0;
}

function __ZN5Eigen8internal9evaluatorIKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 __ZN5Eigen8internal9evaluatorINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEED2Ev($2);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen12DenseStorageIjLi3ELi3ELi1ELi0EE6resizeEiii($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 STACKTOP = sp;
 return;
}

function __ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE6resizeEiii($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 STACKTOP = sp;
 return;
}

function __ZNK5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7functorEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 $3 = $2 + 4 | 0;
 STACKTOP = sp;
 return $3 | 0;
}

function __ZNK5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEE7functorEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 $3 = $2 + 4 | 0;
 STACKTOP = sp;
 return $3 | 0;
}

function __ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES6_E7functorEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 $3 = $2 + 8 | 0;
 STACKTOP = sp;
 return $3 | 0;
}

function SAFE_HEAP_STORE_D(dest, value, bytes) {
 dest = dest | 0;
 value = +value;
 bytes = bytes | 0;
 if ((dest | 0) <= 0) segfault();
 if ((dest + bytes | 0) > (HEAP32[DYNAMICTOP_PTR >> 2] | 0)) segfault();
 if ((bytes | 0) == 8) {
  if (dest & 7) alignfault();
  HEAPF64[dest >> 3] = value;
 } else {
  if (dest & 3) alignfault();
  HEAPF32[dest >> 2] = value;
 }
}

function __ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = __ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE4rowsEv() | 0;
 STACKTOP = sp;
 return $2 | 0;
}

function __ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = __ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE4colsEv() | 0;
 STACKTOP = sp;
 return $2 | 0;
}

function __ZNK5Eigen15PlainObjectBaseINS_5ArrayIjLi3ELi1ELi0ELi3ELi1EEEE4rowsEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = __ZN5Eigen12DenseStorageIjLi3ELi3ELi1ELi0EE4rowsEv() | 0;
 STACKTOP = sp;
 return $2 | 0;
}

function __ZNK5Eigen15PlainObjectBaseINS_5ArrayIjLi3ELi1ELi0ELi3ELi1EEEE4colsEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = __ZN5Eigen12DenseStorageIjLi3ELi3ELi1ELi0EE4colsEv() | 0;
 STACKTOP = sp;
 return $2 | 0;
}

function __ZNK5Eigen15PlainObjectBaseINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = __ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE4rowsEv() | 0;
 STACKTOP = sp;
 return $2 | 0;
}

function __ZNK5Eigen15PlainObjectBaseINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = __ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE4colsEv() | 0;
 STACKTOP = sp;
 return $2 | 0;
}

function __ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES7_EEE7derivedEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 STACKTOP = sp;
 return $2 | 0;
}

function __ZN5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 __ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC2Ev($2);
 STACKTOP = sp;
 return;
}

function __ZNK5flint8geometry6SphereILj3EfE9getRadiusEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 $3 = $2 + 28 | 0;
 $4 = +(+SAFE_HEAP_LOAD_D($3 | 0, 4));
 STACKTOP = sp;
 return +$4;
}

function __ZN5Eigen9ArrayBaseINS_5ArrayIjLi3ELi1ELi0ELi3ELi1EEEEC2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 __ZN5Eigen9DenseBaseINS_5ArrayIjLi3ELi1ELi0ELi3ELi1EEEEC2Ev($2);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen9ArrayBaseINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEC2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 __ZN5Eigen9DenseBaseINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEC2Ev($2);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen8internal27checkTransposeAliasing_implINS_5ArrayIjLi3ELi1ELi0ELi3ELi1EEES3_Lb0EE3runERKS3_S6_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $2 = $0;
 $3 = $1;
 STACKTOP = sp;
 return;
}

function __ZN5Eigen8internal27checkTransposeAliasing_implINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES3_Lb0EE3runERKS3_S6_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $2 = $0;
 $3 = $1;
 STACKTOP = sp;
 return;
}

function __ZN5Eigen9DenseBaseINS_13MatrixWrapperIKNS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES8_EEEEEC2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 STACKTOP = sp;
 return;
}

function __ZN5Eigen8internal9abs2_implIfE3runERKf($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 $3 = +__ZN5Eigen8internal17abs2_impl_defaultIfLb0EE3runERKf($2);
 STACKTOP = sp;
 return +$3;
}

function __ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 __ZN5Eigen8internal11noncopyableD2Ev($2);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 __ZN5Eigen8internal11noncopyableC2Ev($2);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen8internal14evaluator_baseINS_5ArrayIjLi3ELi1ELi0ELi3ELi1EEEED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 __ZN5Eigen8internal11noncopyableD2Ev($2);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen8internal14evaluator_baseINS_5ArrayIjLi3ELi1ELi0ELi3ELi1EEEEC2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 __ZN5Eigen8internal11noncopyableC2Ev($2);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen8internal14evaluator_baseINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 __ZN5Eigen8internal11noncopyableD2Ev($2);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen8internal14evaluator_baseINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEC2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 __ZN5Eigen8internal11noncopyableC2Ev($2);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen8internal17real_default_implIfLb0EE3runERKf($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 $3 = +(+SAFE_HEAP_LOAD_D($2 | 0, 4));
 STACKTOP = sp;
 return +$3;
}

function __ZN5Eigen12DenseStorageIjLi3ELi3ELi1ELi0EEC2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 __ZN5Eigen8internal11plain_arrayIjLi3ELi0ELi0EEC2Ev($2);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EEC2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 __ZN5Eigen8internal11plain_arrayIfLi3ELi0ELi0EEC2Ev($2);
 STACKTOP = sp;
 return;
}

function SAFE_HEAP_LOAD_D(dest, bytes) {
 dest = dest | 0;
 bytes = bytes | 0;
 if ((dest | 0) <= 0) segfault();
 if ((dest + bytes | 0) > (HEAP32[DYNAMICTOP_PTR >> 2] | 0)) segfault();
 if ((bytes | 0) == 8) {
  if (dest & 7) alignfault();
  return +HEAPF64[dest >> 3];
 }
 if (dest & 3) alignfault();
 return +HEAPF32[dest >> 2];
}

function __ZN5Eigen9DenseBaseINS_14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 STACKTOP = sp;
 return;
}

function __ZNK5Eigen8internal18scalar_constant_opIfEclEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 $3 = +(+SAFE_HEAP_LOAD_D($2 | 0, 4));
 STACKTOP = sp;
 return +$3;
}

function __ZN5Eigen9DenseBaseINS_14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEEEC2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 STACKTOP = sp;
 return;
}

function __ZN5flint8geometry12SphereBufferILj3EfEC2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 __ZN5flint8geometry16SphereBufferBaseILj3EfEC2Ev($2);
 STACKTOP = sp;
 return;
}

function __ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES7_EEEC2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 STACKTOP = sp;
 return;
}

function __ZN5Eigen8internal11plain_arrayIjLi3ELi0ELi0EEC2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 __ZN5Eigen8internal28check_static_allocation_sizeIjLi3EEEvv();
 STACKTOP = sp;
 return;
}

function __ZN5Eigen8internal11plain_arrayIfLi3ELi0ELi0EEC2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 __ZN5Eigen8internal28check_static_allocation_sizeIfLi3EEEvv();
 STACKTOP = sp;
 return;
}

function __ZNK5flint8geometry16SphereBufferBaseILj3EfE12GetPositionsEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 $3 = $2 + 12 | 0;
 STACKTOP = sp;
 return $3 | 0;
}

function ___cxa_is_pointer_type($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0 | 0) == (0 | 0);
 if ($1) {
  $4 = 0;
 } else {
  $2 = ___dynamic_cast($0, 32, 136, 0) | 0;
  $phitmp = ($2 | 0) != (0 | 0);
  $4 = $phitmp;
 }
 $3 = $4 & 1;
 return $3 | 0;
}

function __ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE18const_cast_derivedEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 STACKTOP = sp;
 return $2 | 0;
}

function __ZNK5Eigen9EigenBaseINS_5ArrayIjLi3ELi1ELi0ELi3ELi1EEEE18const_cast_derivedEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 STACKTOP = sp;
 return $2 | 0;
}

function __ZNK5Eigen9EigenBaseINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEE18const_cast_derivedEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 STACKTOP = sp;
 return $2 | 0;
}

function __ZNK5flint8geometry6SphereILj3EfE9getCenterEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 $3 = $2 + 16 | 0;
 STACKTOP = sp;
 return $3 | 0;
}

function __ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 STACKTOP = sp;
 return $2 | 0;
}

function __ZNK5Eigen9EigenBaseINS_5ArrayIjLi3ELi1ELi0ELi3ELi1EEEE7derivedEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 STACKTOP = sp;
 return $2 | 0;
}

function __ZNK5Eigen9EigenBaseINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 STACKTOP = sp;
 return $2 | 0;
}

function __ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 STACKTOP = sp;
 return $2 | 0;
}

function __ZN5Eigen8internal19variable_if_dynamicIiLi3EEC2ERKS2_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $2 = $0;
 $3 = $1;
 STACKTOP = sp;
 return;
}

function __ZN5Eigen8internal19variable_if_dynamicIiLi1EEC2ERKS2_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $2 = $0;
 $3 = $1;
 STACKTOP = sp;
 return;
}

function _bitshift64Shl(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 var ander = 0;
 if ((bits | 0) < 32) {
  ander = (1 << bits) - 1 | 0;
  tempRet0 = high << bits | (low & ander << 32 - bits) >>> 32 - bits;
  return low << bits;
 }
 tempRet0 = low << bits - 32;
 return 0;
}

function __ZN5Eigen9EigenBaseINS_5ArrayIjLi3ELi1ELi0ELi3ELi1EEEE7derivedEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 STACKTOP = sp;
 return $2 | 0;
}

function __ZN5Eigen9EigenBaseINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 STACKTOP = sp;
 return $2 | 0;
}

function ___syscall_ret($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0 >>> 0 > 4294963200;
 if ($1) {
  $2 = 0 - $0 | 0;
  $3 = ___errno_location() | 0;
  SAFE_HEAP_STORE($3 | 0, $2 | 0, 4);
  $$0 = -1;
 } else {
  $$0 = $0;
 }
 return $$0 | 0;
}

function __ZN5Eigen8internal18scalar_quotient_opIffEC2ERKS2_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $2 = $0;
 $3 = $1;
 STACKTOP = sp;
 return;
}

function _bitshift64Lshr(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 var ander = 0;
 if ((bits | 0) < 32) {
  ander = (1 << bits) - 1 | 0;
  tempRet0 = high >>> bits;
  return low >>> bits | (high & ander) << 32 - bits;
 }
 tempRet0 = 0;
 return high >>> bits - 32 | 0;
}

function __ZN5Eigen8internal17scalar_product_opIffEC2ERKS2_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $2 = $0;
 $3 = $1;
 STACKTOP = sp;
 return;
}

function ___cxa_guard_acquire($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = SAFE_HEAP_LOAD($0 >> 0 | 0, 1, 0) | 0 | 0;
 $2 = $1 << 24 >> 24 == 1;
 if ($2) {
  $$0 = 0;
 } else {
  SAFE_HEAP_STORE($0 >> 0 | 0, 1 | 0, 1);
  $$0 = 1;
 }
 return $$0 | 0;
}

function ___DOUBLE_BITS_675($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 SAFE_HEAP_STORE_D(tempDoublePtr | 0, +$0, 8);
 $1 = SAFE_HEAP_LOAD(tempDoublePtr | 0, 4, 0) | 0 | 0;
 $2 = SAFE_HEAP_LOAD(tempDoublePtr + 4 | 0, 4, 0) | 0 | 0;
 tempRet0 = $2;
 return $1 | 0;
}

function __ZN5Eigen8internal14scalar_abs2_opIfEC2ERKS2_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $2 = $0;
 $3 = $1;
 STACKTOP = sp;
 return;
}

function __ZN5Eigen8internal13scalar_sum_opIffEC2ERKS2_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $2 = $0;
 $3 = $1;
 STACKTOP = sp;
 return;
}

function __ZNK5Eigen12DenseStorageIjLi3ELi3ELi1ELi0EE4dataEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 STACKTOP = sp;
 return $2 | 0;
}

function __ZNK5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE4dataEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 STACKTOP = sp;
 return $2 | 0;
}

function __ZN5Eigen12DenseStorageIjLi3ELi3ELi1ELi0EE4dataEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 STACKTOP = sp;
 return $2 | 0;
}

function __ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE4dataEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 $2 = $1;
 STACKTOP = sp;
 return $2 | 0;
}

function dynCall_viiiiii(index, a1, a2, a3, a4, a5, a6) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 FUNCTION_TABLE_viiiiii[(SAFE_FT_MASK(index | 0, 15 | 0) | 0) & 15](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0);
}

function __ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 STACKTOP = sp;
 return;
}

function __ZN5Eigen9DenseBaseINS_5ArrayIjLi3ELi1ELi0ELi3ELi1EEEEC2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 STACKTOP = sp;
 return;
}

function __ZN5Eigen9DenseBaseINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEC2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 STACKTOP = sp;
 return;
}

function _out($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = SAFE_HEAP_LOAD($0 | 0, 4, 0) | 0 | 0;
 $4 = $3 & 32;
 $5 = ($4 | 0) == 0;
 if ($5) {
  ___fwritex($1, $2, $0) | 0;
 }
 return;
}

function __ZN5Eigen8internal18scalar_quotient_opIffEC2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 STACKTOP = sp;
 return;
}

function __ZN5Eigen8internal17scalar_product_opIffEC2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 STACKTOP = sp;
 return;
}

function _strerror($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ___pthread_self_105() | 0;
 $2 = $1 + 188 | 0;
 $3 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
 $4 = ___strerror_l($0, $3) | 0;
 return $4 | 0;
}

function _main($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $2 = $0;
 $3 = $1;
 STACKTOP = sp;
 return 0;
}

function __ZN5Eigen8internal14scalar_abs2_opIfEC2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 STACKTOP = sp;
 return;
}

function __ZN5Eigen8internal13scalar_sum_opIffEC2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 STACKTOP = sp;
 return;
}

function dynCall_viiiii(index, a1, a2, a3, a4, a5) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 FUNCTION_TABLE_viiiii[(SAFE_FT_MASK(index | 0, 127 | 0) | 0) & 127](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0);
}

function __ZN5Eigen8internal9assign_opIjjEC2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 STACKTOP = sp;
 return;
}

function __ZN5Eigen8internal9assign_opIffEC2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 STACKTOP = sp;
 return;
}

function __ZN5Eigen8internal11noncopyableD2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 STACKTOP = sp;
 return;
}

function __ZN5Eigen8internal11noncopyableC2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
 $1 = $0;
 STACKTOP = sp;
 return;
}

function runPostSets() {}
function _i64Subtract(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var l = 0, h = 0;
 l = a - c >>> 0;
 h = b - d >>> 0;
 h = b - d - (c >>> 0 > a >>> 0 | 0) >>> 0;
 return (tempRet0 = h, l | 0) | 0;
}

function _wctomb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0 | 0) == (0 | 0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = _wcrtomb($0, $1, 0) | 0;
  $$0 = $3;
 }
 return $$0 | 0;
}
function stackAlloc(size) {
 size = size | 0;
 var ret = 0;
 ret = STACKTOP;
 STACKTOP = STACKTOP + size | 0;
 STACKTOP = STACKTOP + 15 & -16;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(size | 0);
 return ret | 0;
}

function dynCall_viiii(index, a1, a2, a3, a4) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 FUNCTION_TABLE_viiii[(SAFE_FT_MASK(index | 0, 63 | 0) | 0) & 63](a1 | 0, a2 | 0, a3 | 0, a4 | 0);
}

function __ZSt15get_new_handlerv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = SAFE_HEAP_LOAD(1569 * 4 | 0, 4, 0) | 0 | 0;
 SAFE_HEAP_STORE(1569 * 4 | 0, $0 + 0 | 0 | 0, 4);
 $1 = $0;
 return $1 | 0;
}

function __ZSt13get_terminatev() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = SAFE_HEAP_LOAD(166 * 4 | 0, 4, 0) | 0 | 0;
 SAFE_HEAP_STORE(166 * 4 | 0, $0 + 0 | 0 | 0, 4);
 $1 = $0;
 return $1 | 0;
}

function _swapc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$ = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1 | 0) == 0;
 $3 = _llvm_bswap_i32($0 | 0) | 0;
 $$ = $2 ? $0 : $3;
 return $$ | 0;
}

function __ZNSt11logic_errorD2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 SAFE_HEAP_STORE($0 | 0, 776 | 0, 4);
 $1 = $0 + 4 | 0;
 __ZNSt3__218__libcpp_refstringD2Ev($1);
 return;
}

function dynCall_iiii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return FUNCTION_TABLE_iiii[(SAFE_FT_MASK(index | 0, 15 | 0) | 0) & 15](a1 | 0, a2 | 0, a3 | 0) | 0;
}

function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $1$0 = 0;
 $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
 return $1$0 | 0;
}

function __ZNKSt11logic_error4whatEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0 + 4 | 0;
 $2 = __ZNKSt3__218__libcpp_refstring5c_strEv($1) | 0;
 return $2 | 0;
}

function __ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0 | 0) == ($1 | 0);
 return $3 | 0;
}

function dynCall_viii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 FUNCTION_TABLE_viii[(SAFE_FT_MASK(index | 0, 127 | 0) | 0) & 127](a1 | 0, a2 | 0, a3 | 0);
}

function _i64Add(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var l = 0, h = 0;
 l = a + c >>> 0;
 h = b + d + (l >>> 0 < a >>> 0 | 0) >>> 0;
 return (tempRet0 = h, l | 0) | 0;
}

function __ZNSt3__215__refstring_imp12_GLOBAL__N_113data_from_repEPNS1_9_Rep_baseE($0) {
 $0 = $0 | 0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0 + 12 | 0;
 return $1 | 0;
}

function dynCall_iii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 return FUNCTION_TABLE_iii[(SAFE_FT_MASK(index | 0, 127 | 0) | 0) & 127](a1 | 0, a2 | 0) | 0;
}

function __ZN10__cxxabiv120__si_class_type_infoD0Ev($0) {
 $0 = $0 | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0);
 __ZdlPv($0);
 return;
}

function __ZNSt3__215__refstring_imp12_GLOBAL__N_113rep_from_dataEPKc_295($0) {
 $0 = $0 | 0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0 + -12 | 0;
 return $1 | 0;
}

function dynCall_dii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 return +FUNCTION_TABLE_dii[(SAFE_FT_MASK(index | 0, 127 | 0) | 0) & 127](a1 | 0, a2 | 0);
}

function __ZNKSt3__218__libcpp_refstring5c_strEv($0) {
 $0 = $0 | 0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = SAFE_HEAP_LOAD($0 | 0, 4, 0) | 0 | 0;
 return $1 | 0;
}

function __ZN10__cxxabiv117__class_type_infoD0Ev($0) {
 $0 = $0 | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0);
 __ZdlPv($0);
 return;
}

function dynCall_vii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 FUNCTION_TABLE_vii[(SAFE_FT_MASK(index | 0, 127 | 0) | 0) & 127](a1 | 0, a2 | 0);
}

function SAFE_FT_MASK(value, mask) {
 value = value | 0;
 mask = mask | 0;
 var ret = 0;
 ret = value & mask;
 if ((ret | 0) != (value | 0)) ftfault();
 return ret | 0;
}

function ___lctrans($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ___lctrans_impl($0, $1) | 0;
 return $2 | 0;
}

function ___errno_location() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ___pthread_self_108() | 0;
 $1 = $0 + 64 | 0;
 return $1 | 0;
}

function establishStackSpace(stackBase, stackMax) {
 stackBase = stackBase | 0;
 stackMax = stackMax | 0;
 STACKTOP = stackBase;
 STACK_MAX = stackMax;
}

function dynCall_ii(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 return FUNCTION_TABLE_ii[(SAFE_FT_MASK(index | 0, 127 | 0) | 0) & 127](a1 | 0) | 0;
}

function __ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE22_check_template_paramsEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}

function __ZN5Eigen15PlainObjectBaseINS_5ArrayIjLi3ELi1ELi0ELi3ELi1EEEE22_check_template_paramsEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}

function __ZN5Eigen15PlainObjectBaseINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEE22_check_template_paramsEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}

function setThrew(threw, value) {
 threw = threw | 0;
 value = value | 0;
 if ((__THREW__ | 0) == 0) {
  __THREW__ = threw;
  threwValue = value;
 }
}

function b1017(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_viiiiii(14);
}

function b1016(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_viiiiii(13);
}

function b1015(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_viiiiii(12);
}

function b1014(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_viiiiii(10);
}

function dynCall_di(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 return +FUNCTION_TABLE_di[(SAFE_FT_MASK(index | 0, 63 | 0) | 0) & 63](a1 | 0);
}

function b1013(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_viiiiii(9);
}

function b1012(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_viiiiii(8);
}

function b1011(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_viiiiii(7);
}

function b1010(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_viiiiii(6);
}

function b1009(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_viiiiii(5);
}

function b1008(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_viiiiii(4);
}

function b1007(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_viiiiii(3);
}

function b1006(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_viiiiii(2);
}

function b1005(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_viiiiii(1);
}

function b1004(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_viiiiii(0);
}

function ___clang_call_terminate($0) {
 $0 = $0 | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___cxa_begin_catch($0 | 0) | 0;
 __ZSt9terminatev();
}

function __ZNSt12length_errorD0Ev($0) {
 $0 = $0 | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt11logic_errorD2Ev($0);
 __ZdlPv($0);
 return;
}

function __ZNSt11logic_errorD0Ev($0) {
 $0 = $0 | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt11logic_errorD2Ev($0);
 __ZdlPv($0);
 return;
}

function dynCall_vi(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 FUNCTION_TABLE_vi[(SAFE_FT_MASK(index | 0, 127 | 0) | 0) & 127](a1 | 0);
}

function __ZNSt9bad_allocD0Ev($0) {
 $0 = $0 | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt9bad_allocD2Ev($0);
 __ZdlPv($0);
 return;
}

function _frexpl($0, $1) {
 $0 = +$0;
 $1 = $1 | 0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = +_frexp($0, $1);
 return +$2;
}

function __ZNSt9bad_allocC2Ev($0) {
 $0 = $0 | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 SAFE_HEAP_STORE($0 | 0, 756 | 0, 4);
 return;
}

function __ZNKSt3__218__libcpp_refstring15__uses_refcountEv($0) {
 $0 = $0 | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}

function b133(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(127);
}

function b132(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(126);
}

function b131(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(125);
}

function b130(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(124);
}

function b129(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(123);
}

function b128(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(122);
}

function b127(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(121);
}

function b126(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(120);
}

function b125(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(119);
}

function b124(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(118);
}

function b123(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(117);
}

function b122(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(116);
}

function b121(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(115);
}

function b120(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(114);
}

function b119(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(113);
}

function b118(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(112);
}

function b117(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(111);
}

function b116(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(109);
}

function b115(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(108);
}

function b114(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(106);
}

function b113(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(105);
}

function b112(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(103);
}

function b111(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(102);
}

function b110(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(101);
}

function b109(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(100);
}

function b108(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(99);
}

function b107(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(98);
}

function b106(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(97);
}

function b105(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(96);
}

function b104(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(95);
}

function b103(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(94);
}

function b102(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(92);
}

function b101(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(91);
}

function b100(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(90);
}

function _llvm_bswap_i32(x) {
 x = x | 0;
 return (x & 255) << 24 | (x >> 8 & 255) << 16 | (x >> 16 & 255) << 8 | x >>> 24 | 0;
}

function b99(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(89);
}

function b98(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(88);
}

function b97(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(87);
}

function b96(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(86);
}

function b95(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(85);
}

function b94(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(84);
}

function b93(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(83);
}

function b92(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(82);
}

function b91(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(81);
}

function b90(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(80);
}

function b89(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(79);
}

function b88(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(78);
}

function b87(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(77);
}

function b86(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(76);
}

function b85(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(74);
}

function b84(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(73);
}

function b83(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(72);
}

function b82(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(71);
}

function b81(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(70);
}

function b80(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(69);
}

function b79(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(68);
}

function b78(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(67);
}

function b77(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(66);
}

function b76(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(65);
}

function b75(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(63);
}

function b74(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(62);
}

function b73(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(61);
}

function b72(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(60);
}

function b71(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(59);
}

function b70(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(58);
}

function b69(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(57);
}

function b68(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(56);
}

function b67(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(55);
}

function b66(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(54);
}

function b65(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(53);
}

function b64(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(52);
}

function b63(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(51);
}

function b62(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(50);
}

function b61(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(49);
}

function b60(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(48);
}

function b59(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(47);
}

function b58(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(46);
}

function b57(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(45);
}

function b56(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(44);
}

function b55(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(43);
}

function b54(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(42);
}

function b53(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(41);
}

function b52(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(40);
}

function b51(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(39);
}

function b50(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(38);
}

function b49(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(37);
}

function b48(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(36);
}

function b47(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(35);
}

function b46(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(34);
}

function b45(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(33);
}

function b44(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(32);
}

function b43(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(31);
}

function b42(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(30);
}

function b41(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(29);
}

function b40(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(28);
}

function b39(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(27);
}

function b38(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(26);
}

function b37(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(25);
}

function b36(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(24);
}

function b35(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(23);
}

function b34(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(22);
}

function b33(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(21);
}

function b32(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(20);
}

function b31(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(19);
}

function b30(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(18);
}

function b29(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(17);
}

function b28(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(15);
}

function b27(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(14);
}

function b26(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(13);
}

function b25(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(11);
}

function b24(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(10);
}

function dynCall_i(index) {
 index = index | 0;
 return FUNCTION_TABLE_i[(SAFE_FT_MASK(index | 0, 127 | 0) | 0) & 127]() | 0;
}

function b23(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(9);
}

function b22(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(8);
}

function b21(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(7);
}

function b20(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(6);
}

function b19(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(5);
}

function b18(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(4);
}

function b17(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(3);
}

function b16(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(2);
}

function b15(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(1);
}

function b14(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(0);
}

function ___pthread_self_448() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = _pthread_self() | 0;
 return $0 | 0;
}

function ___pthread_self_108() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = _pthread_self() | 0;
 return $0 | 0;
}

function ___pthread_self_105() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = _pthread_self() | 0;
 return $0 | 0;
}

function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($0) {
 $0 = $0 | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}

function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($0) {
 $0 = $0 | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}

function __ZN5Eigen8internal28check_static_allocation_sizeIjLi3EEEvv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}

function __ZN5Eigen8internal28check_static_allocation_sizeIfLi3EEEvv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}

function __ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 3;
}

function __ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}

function __ZN5Eigen8internal19variable_if_dynamicIiLi0EE5valueEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}

function __ZN10__cxxabiv116__shim_type_infoD2Ev($0) {
 $0 = $0 | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}

function dynCall_v(index) {
 index = index | 0;
 FUNCTION_TABLE_v[(SAFE_FT_MASK(index | 0, 127 | 0) | 0) & 127]();
}

function __ZN5Eigen12DenseStorageIjLi3ELi3ELi1ELi0EE4rowsEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 3;
}

function __ZN5Eigen12DenseStorageIjLi3ELi3ELi1ELi0EE4colsEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}

function __ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE4rowsEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 3;
}

function __ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE4colsEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}

function __ZNKSt9bad_alloc4whatEv($0) {
 $0 = $0 | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 5529 | 0;
}

function b1197(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(63);
}

function b1196(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(62);
}

function b1195(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(61);
}

function b1194(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(60);
}

function b1193(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(59);
}

function b1192(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(58);
}

function b1191(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(57);
}

function b1190(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(56);
}

function b1189(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(55);
}

function b1188(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(54);
}

function b1187(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(53);
}

function b1186(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(50);
}

function b1185(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(49);
}

function b1184(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(48);
}

function b1183(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(47);
}

function b1182(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(46);
}

function b1181(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(45);
}

function b1180(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(44);
}

function b1179(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(43);
}

function b1178(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(41);
}

function b1177(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(40);
}

function b1176(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(39);
}

function b1175(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(38);
}

function b1174(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(37);
}

function b1173(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(36);
}

function b1172(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(35);
}

function b1171(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(34);
}

function b1170(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(33);
}

function b1169(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(32);
}

function b1168(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(31);
}

function b1167(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(29);
}

function b1166(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(26);
}

function b1165(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(24);
}

function b1164(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(23);
}

function b1163(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(22);
}

function b1162(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(21);
}

function b1161(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(20);
}

function b1160(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(19);
}

function b1159(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(18);
}

function b1158(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(16);
}

function b1157(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(15);
}

function b1156(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(14);
}

function b1155(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(12);
}

function b1154(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(11);
}

function b1153(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(10);
}

function b1152(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(9);
}

function b1151(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(8);
}

function b1150(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(7);
}

function b1149(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(6);
}

function b1148(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(5);
}

function b1147(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(4);
}

function b1146(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(3);
}

function b1145(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(2);
}

function b1144(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(1);
}

function b1143(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(0);
}

function setDynamicTop(value) {
 value = value | 0;
 SAFE_HEAP_STORE(DYNAMICTOP_PTR | 0, value | 0, 4);
}

function b12(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(15);
 return 0;
}

function b11(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(14);
 return 0;
}

function b10(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(13);
 return 0;
}

function b9(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(12);
 return 0;
}

function b8(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(11);
 return 0;
}

function _emscripten_get_global_libc() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 6204 | 0;
}

function ___cxa_guard_release($0) {
 $0 = $0 | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}

function __ZNSt9type_infoD2Ev($0) {
 $0 = $0 | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}

function __ZNSt9exceptionD2Ev($0) {
 $0 = $0 | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}

function __ZNSt9bad_allocD2Ev($0) {
 $0 = $0 | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}

function b7(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(9);
 return 0;
}

function b6(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(8);
 return 0;
}

function b5(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(7);
 return 0;
}

function b4(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(6);
 return 0;
}

function b3(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(5);
 return 0;
}

function b2(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(1);
 return 0;
}

function b1(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(0);
 return 0;
}

function __ZdlPv($0) {
 $0 = $0 | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($0);
 return;
}

function ___cxa_guard_abort($0) {
 $0 = $0 | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}

function _dummy_738($0) {
 $0 = $0 | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return $0 | 0;
}

function ___unlockfile($0) {
 $0 = $0 | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}

function ___lockfile($0) {
 $0 = $0 | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}

function b878(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(127);
}

function b877(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(126);
}

function b876(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(125);
}

function b875(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(124);
}

function b874(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(123);
}

function b873(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(122);
}

function b872(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(121);
}

function b871(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(120);
}

function b870(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(119);
}

function b869(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(118);
}

function b868(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(117);
}

function b867(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(116);
}

function b866(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(115);
}

function b865(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(114);
}

function b864(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(113);
}

function b863(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(112);
}

function b862(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(111);
}

function b861(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(110);
}

function b860(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(108);
}

function b859(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(107);
}

function b858(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(105);
}

function b857(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(104);
}

function b856(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(102);
}

function b855(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(101);
}

function b854(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(100);
}

function b853(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(99);
}

function b852(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(98);
}

function b851(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(97);
}

function b850(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(96);
}

function b849(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(95);
}

function b848(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(94);
}

function b847(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(93);
}

function b846(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(92);
}

function b845(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(91);
}

function b844(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(89);
}

function b843(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(88);
}

function b842(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(87);
}

function b841(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(86);
}

function b840(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(85);
}

function b839(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(84);
}

function b838(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(83);
}

function b837(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(82);
}

function b836(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(81);
}

function b835(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(80);
}

function b834(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(79);
}

function b833(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(78);
}

function b832(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(77);
}

function b831(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(76);
}

function b830(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(75);
}

function b829(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(74);
}

function b828(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(73);
}

function b827(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(71);
}

function b826(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(70);
}

function b825(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(69);
}

function b824(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(68);
}

function b823(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(67);
}

function b822(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(66);
}

function b821(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(65);
}

function b820(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(64);
}

function b819(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(63);
}

function b818(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(62);
}

function b817(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(60);
}

function b816(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(59);
}

function b815(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(58);
}

function b814(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(57);
}

function b813(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(56);
}

function b812(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(55);
}

function b811(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(54);
}

function b810(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(53);
}

function b809(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(52);
}

function b808(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(51);
}

function b807(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(50);
}

function b806(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(48);
}

function b805(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(46);
}

function b804(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(42);
}

function b803(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(41);
}

function b802(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(39);
}

function b801(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(38);
}

function b800(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(36);
}

function b799(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(35);
}

function b798(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(34);
}

function b797(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(33);
}

function b796(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(32);
}

function b795(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(31);
}

function b794(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(30);
}

function b793(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(29);
}

function b792(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(28);
}

function b791(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(27);
}

function b790(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(26);
}

function b789(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(25);
}

function b788(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(24);
}

function b787(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(23);
}

function b786(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(22);
}

function b785(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(21);
}

function b784(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(20);
}

function b783(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(19);
}

function b782(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(18);
}

function b781(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(17);
}

function b780(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(16);
}

function b779(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(15);
}

function b778(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(14);
}

function b777(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(13);
}

function b776(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(12);
}

function b775(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(11);
}

function b774(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(10);
}

function b773(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(9);
}

function b772(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(8);
}

function b771(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(7);
}

function b770(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(6);
}

function b769(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(5);
}

function b768(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(4);
}

function b767(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(3);
}

function b766(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(2);
}

function b765(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(1);
}

function b764(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(0);
}

function b261(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(127);
 return 0.0;
}

function b260(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(126);
 return 0.0;
}

function b259(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(125);
 return 0.0;
}

function b258(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(124);
 return 0.0;
}

function b257(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(123);
 return 0.0;
}

function b256(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(122);
 return 0.0;
}

function b255(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(121);
 return 0.0;
}

function b254(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(120);
 return 0.0;
}

function b253(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(119);
 return 0.0;
}

function b252(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(118);
 return 0.0;
}

function b251(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(117);
 return 0.0;
}

function b250(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(116);
 return 0.0;
}

function b249(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(115);
 return 0.0;
}

function b248(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(114);
 return 0.0;
}

function b247(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(113);
 return 0.0;
}

function b246(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(112);
 return 0.0;
}

function b245(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(111);
 return 0.0;
}

function b244(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(110);
 return 0.0;
}

function b243(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(109);
 return 0.0;
}

function b242(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(108);
 return 0.0;
}

function b241(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(107);
 return 0.0;
}

function b240(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(106);
 return 0.0;
}

function b239(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(105);
 return 0.0;
}

function b238(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(104);
 return 0.0;
}

function b237(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(103);
 return 0.0;
}

function b236(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(102);
 return 0.0;
}

function b235(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(101);
 return 0.0;
}

function b234(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(100);
 return 0.0;
}

function b233(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(99);
 return 0.0;
}

function b232(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(98);
 return 0.0;
}

function b231(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(97);
 return 0.0;
}

function b230(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(96);
 return 0.0;
}

function b229(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(95);
 return 0.0;
}

function b228(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(94);
 return 0.0;
}

function b227(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(93);
 return 0.0;
}

function b226(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(92);
 return 0.0;
}

function b225(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(91);
 return 0.0;
}

function b224(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(90);
 return 0.0;
}

function b223(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(89);
 return 0.0;
}

function b222(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(88);
 return 0.0;
}

function b221(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(87);
 return 0.0;
}

function b220(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(86);
 return 0.0;
}

function b219(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(85);
 return 0.0;
}

function b218(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(84);
 return 0.0;
}

function b217(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(83);
 return 0.0;
}

function b216(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(82);
 return 0.0;
}

function b215(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(81);
 return 0.0;
}

function b214(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(80);
 return 0.0;
}

function b213(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(78);
 return 0.0;
}

function b212(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(77);
 return 0.0;
}

function b211(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(76);
 return 0.0;
}

function b210(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(75);
 return 0.0;
}

function b209(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(74);
 return 0.0;
}

function b208(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(73);
 return 0.0;
}

function b207(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(72);
 return 0.0;
}

function b206(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(71);
 return 0.0;
}

function b205(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(70);
 return 0.0;
}

function b204(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(69);
 return 0.0;
}

function b203(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(68);
 return 0.0;
}

function b202(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(67);
 return 0.0;
}

function b201(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(66);
 return 0.0;
}

function b200(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(65);
 return 0.0;
}

function b199(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(64);
 return 0.0;
}

function b198(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(63);
 return 0.0;
}

function b197(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(62);
 return 0.0;
}

function b196(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(61);
 return 0.0;
}

function b195(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(60);
 return 0.0;
}

function b194(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(59);
 return 0.0;
}

function b193(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(58);
 return 0.0;
}

function b192(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(57);
 return 0.0;
}

function b191(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(56);
 return 0.0;
}

function b190(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(55);
 return 0.0;
}

function b189(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(54);
 return 0.0;
}

function b188(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(53);
 return 0.0;
}

function b187(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(52);
 return 0.0;
}

function b186(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(51);
 return 0.0;
}

function b185(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(50);
 return 0.0;
}

function b184(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(49);
 return 0.0;
}

function b183(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(48);
 return 0.0;
}

function b182(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(47);
 return 0.0;
}

function b181(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(46);
 return 0.0;
}

function b180(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(45);
 return 0.0;
}

function b179(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(44);
 return 0.0;
}

function b178(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(43);
 return 0.0;
}

function b177(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(42);
 return 0.0;
}

function b176(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(41);
 return 0.0;
}

function b175(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(40);
 return 0.0;
}

function b174(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(39);
 return 0.0;
}

function b173(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(38);
 return 0.0;
}

function b172(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(37);
 return 0.0;
}

function b171(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(36);
 return 0.0;
}

function b170(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(35);
 return 0.0;
}

function b169(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(34);
 return 0.0;
}

function b168(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(33);
 return 0.0;
}

function b167(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(32);
 return 0.0;
}

function b166(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(31);
 return 0.0;
}

function b165(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(30);
 return 0.0;
}

function b164(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(29);
 return 0.0;
}

function b163(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(28);
 return 0.0;
}

function b162(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(27);
 return 0.0;
}

function b161(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(26);
 return 0.0;
}

function b160(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(25);
 return 0.0;
}

function b159(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(24);
 return 0.0;
}

function b158(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(23);
 return 0.0;
}

function b157(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(22);
 return 0.0;
}

function b156(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(21);
 return 0.0;
}

function b155(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(20);
 return 0.0;
}

function b154(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(19);
 return 0.0;
}

function b153(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(18);
 return 0.0;
}

function b152(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(17);
 return 0.0;
}

function b151(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(16);
 return 0.0;
}

function b150(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(15);
 return 0.0;
}

function b149(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(14);
 return 0.0;
}

function b148(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(13);
 return 0.0;
}

function b147(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(12);
 return 0.0;
}

function b146(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(11);
 return 0.0;
}

function b145(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(10);
 return 0.0;
}

function b1141(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(127);
 return 0;
}

function b1140(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(126);
 return 0;
}

function b1139(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(125);
 return 0;
}

function b1138(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(124);
 return 0;
}

function b1137(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(123);
 return 0;
}

function b1136(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(122);
 return 0;
}

function b1135(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(121);
 return 0;
}

function b1134(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(120);
 return 0;
}

function b1133(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(119);
 return 0;
}

function b1132(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(118);
 return 0;
}

function b1131(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(117);
 return 0;
}

function b1130(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(116);
 return 0;
}

function b1129(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(115);
 return 0;
}

function b1128(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(114);
 return 0;
}

function b1127(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(113);
 return 0;
}

function b1126(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(112);
 return 0;
}

function b1125(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(111);
 return 0;
}

function b1124(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(110);
 return 0;
}

function b1123(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(109);
 return 0;
}

function b1122(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(108);
 return 0;
}

function b1121(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(107);
 return 0;
}

function b1120(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(106);
 return 0;
}

function b1119(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(105);
 return 0;
}

function b1118(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(104);
 return 0;
}

function b1117(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(103);
 return 0;
}

function b1116(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(102);
 return 0;
}

function b1115(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(101);
 return 0;
}

function b1114(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(100);
 return 0;
}

function _pthread_self() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 292 | 0;
}

function b144(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(9);
 return 0.0;
}

function b143(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(8);
 return 0.0;
}

function b142(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(7);
 return 0.0;
}

function b141(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(6);
 return 0.0;
}

function b140(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(5);
 return 0.0;
}

function b139(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(4);
 return 0.0;
}

function b138(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(3);
 return 0.0;
}

function b137(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(2);
 return 0.0;
}

function b136(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(1);
 return 0.0;
}

function b135(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(0);
 return 0.0;
}

function b1113(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(99);
 return 0;
}

function b1112(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(98);
 return 0;
}

function b1111(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(97);
 return 0;
}

function b1110(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(96);
 return 0;
}

function b1109(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(95);
 return 0;
}

function b1108(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(94);
 return 0;
}

function b1107(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(93);
 return 0;
}

function b1106(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(92);
 return 0;
}

function b1105(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(91);
 return 0;
}

function b1104(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(90);
 return 0;
}

function b1103(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(89);
 return 0;
}

function b1102(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(88);
 return 0;
}

function b1101(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(87);
 return 0;
}

function b1100(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(86);
 return 0;
}

function b1099(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(85);
 return 0;
}

function b1098(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(84);
 return 0;
}

function b1097(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(83);
 return 0;
}

function b1096(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(82);
 return 0;
}

function b1095(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(81);
 return 0;
}

function b1094(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(80);
 return 0;
}

function b1093(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(79);
 return 0;
}

function b1092(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(77);
 return 0;
}

function b1091(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(76);
 return 0;
}

function b1090(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(75);
 return 0;
}

function b1089(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(74);
 return 0;
}

function b1088(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(73);
 return 0;
}

function b1087(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(72);
 return 0;
}

function b1086(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(71);
 return 0;
}

function b1085(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(70);
 return 0;
}

function b1084(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(68);
 return 0;
}

function b1083(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(67);
 return 0;
}

function b1082(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(66);
 return 0;
}

function b1081(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(65);
 return 0;
}

function b1080(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(64);
 return 0;
}

function b1079(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(63);
 return 0;
}

function b1078(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(62);
 return 0;
}

function b1077(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(61);
 return 0;
}

function b1076(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(60);
 return 0;
}

function b1075(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(59);
 return 0;
}

function b1074(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(57);
 return 0;
}

function b1073(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(56);
 return 0;
}

function b1072(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(55);
 return 0;
}

function b1071(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(54);
 return 0;
}

function b1070(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(53);
 return 0;
}

function b1069(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(52);
 return 0;
}

function b1068(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(51);
 return 0;
}

function b1067(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(49);
 return 0;
}

function b1066(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(48);
 return 0;
}

function b1065(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(47);
 return 0;
}

function b1064(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(46);
 return 0;
}

function b1063(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(45);
 return 0;
}

function b1062(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(44);
 return 0;
}

function b1061(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(43);
 return 0;
}

function b1060(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(42);
 return 0;
}

function b1059(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(41);
 return 0;
}

function b1058(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(40);
 return 0;
}

function b1057(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(39);
 return 0;
}

function b1056(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(38);
 return 0;
}

function b1055(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(37);
 return 0;
}

function b1054(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(36);
 return 0;
}

function b1053(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(35);
 return 0;
}

function b1052(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(33);
 return 0;
}

function b1051(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(32);
 return 0;
}

function b1050(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(31);
 return 0;
}

function b1049(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(30);
 return 0;
}

function b1048(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(29);
 return 0;
}

function b1047(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(28);
 return 0;
}

function b1046(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(27);
 return 0;
}

function b1045(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(26);
 return 0;
}

function b1044(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(25);
 return 0;
}

function b1043(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(24);
 return 0;
}

function b1042(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(23);
 return 0;
}

function b1041(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(22);
 return 0;
}

function b1040(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(21);
 return 0;
}

function b1039(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(20);
 return 0;
}

function b1038(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(19);
 return 0;
}

function b1037(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(18);
 return 0;
}

function b1036(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(17);
 return 0;
}

function b1035(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(16);
 return 0;
}

function b1034(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(15);
 return 0;
}

function b1033(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(14);
 return 0;
}

function b1032(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(13);
 return 0;
}

function b1031(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(12);
 return 0;
}

function b1030(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(11);
 return 0;
}

function b1029(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(10);
 return 0;
}

function b1028(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(9);
 return 0;
}

function b1027(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(8);
 return 0;
}

function b1026(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(7);
 return 0;
}

function b1025(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(6);
 return 0;
}

function b1024(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(5);
 return 0;
}

function b1023(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(4);
 return 0;
}

function b1022(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(3);
 return 0;
}

function b1021(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(2);
 return 0;
}

function b1020(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(1);
 return 0;
}

function b1019(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(0);
 return 0;
}

function b659(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(127);
}

function b658(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(125);
}

function b657(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(124);
}

function b656(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(123);
}

function b655(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(121);
}

function b654(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(119);
}

function b653(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(118);
}

function b652(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(116);
}

function b651(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(115);
}

function b650(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(113);
}

function b649(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(112);
}

function b648(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(111);
}

function b647(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(110);
}

function b646(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(109);
}

function b645(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(108);
}

function b644(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(107);
}

function b643(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(106);
}

function b642(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(105);
}

function b641(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(104);
}

function b640(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(103);
}

function b639(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(102);
}

function b638(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(100);
}

function b637(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(98);
}

function b636(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(97);
}

function b635(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(95);
}

function b634(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(94);
}

function b633(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(93);
}

function b632(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(92);
}

function b631(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(90);
}

function b630(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(89);
}

function b629(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(87);
}

function b628(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(85);
}

function b627(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(82);
}

function b626(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(80);
}

function b625(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(79);
}

function b624(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(78);
}

function b623(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(77);
}

function b622(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(76);
}

function b621(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(75);
}

function b620(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(74);
}

function b619(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(72);
}

function b618(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(70);
}

function b617(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(69);
}

function b616(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(68);
}

function b615(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(66);
}

function b614(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(65);
}

function b613(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(64);
}

function b612(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(63);
}

function b611(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(61);
}

function b610(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(59);
}

function b609(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(58);
}

function b608(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(57);
}

function b607(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(52);
}

function b606(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(51);
}

function b605(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(50);
}

function b604(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(49);
}

function b603(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(48);
}

function b602(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(47);
}

function b601(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(46);
}

function b600(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(45);
}

function b599(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(44);
}

function b598(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(43);
}

function b597(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(42);
}

function b596(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(40);
}

function b595(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(37);
}

function b594(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(34);
}

function b593(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(30);
}

function b592(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(28);
}

function b591(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(27);
}

function b590(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(25);
}

function b589(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(24);
}

function b588(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(23);
}

function b587(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(22);
}

function b586(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(21);
}

function b585(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(20);
}

function b584(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(19);
}

function b583(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(18);
}

function b582(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(17);
}

function b581(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(16);
}

function b580(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(15);
}

function b579(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(14);
}

function b578(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(13);
}

function b577(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(12);
}

function b576(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(11);
}

function b575(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(10);
}

function b574(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(9);
}

function b573(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(8);
}

function b572(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(7);
}

function b571(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(6);
}

function b570(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(5);
}

function b569(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(4);
}

function b568(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(3);
}

function b567(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(2);
}

function b566(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(1);
}

function b565(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(0);
}

function setTempRet0(value) {
 value = value | 0;
 tempRet0 = value;
}

function b325(p0) {
 p0 = p0 | 0;
 nullFunc_di(63);
 return 0.0;
}

function b324(p0) {
 p0 = p0 | 0;
 nullFunc_di(62);
 return 0.0;
}

function b323(p0) {
 p0 = p0 | 0;
 nullFunc_di(61);
 return 0.0;
}

function b322(p0) {
 p0 = p0 | 0;
 nullFunc_di(60);
 return 0.0;
}

function b321(p0) {
 p0 = p0 | 0;
 nullFunc_di(59);
 return 0.0;
}

function b320(p0) {
 p0 = p0 | 0;
 nullFunc_di(58);
 return 0.0;
}

function b319(p0) {
 p0 = p0 | 0;
 nullFunc_di(57);
 return 0.0;
}

function b318(p0) {
 p0 = p0 | 0;
 nullFunc_di(56);
 return 0.0;
}

function b317(p0) {
 p0 = p0 | 0;
 nullFunc_di(55);
 return 0.0;
}

function b316(p0) {
 p0 = p0 | 0;
 nullFunc_di(54);
 return 0.0;
}

function b315(p0) {
 p0 = p0 | 0;
 nullFunc_di(53);
 return 0.0;
}

function b314(p0) {
 p0 = p0 | 0;
 nullFunc_di(52);
 return 0.0;
}

function b313(p0) {
 p0 = p0 | 0;
 nullFunc_di(51);
 return 0.0;
}

function b312(p0) {
 p0 = p0 | 0;
 nullFunc_di(50);
 return 0.0;
}

function b311(p0) {
 p0 = p0 | 0;
 nullFunc_di(49);
 return 0.0;
}

function b310(p0) {
 p0 = p0 | 0;
 nullFunc_di(48);
 return 0.0;
}

function b309(p0) {
 p0 = p0 | 0;
 nullFunc_di(47);
 return 0.0;
}

function b308(p0) {
 p0 = p0 | 0;
 nullFunc_di(45);
 return 0.0;
}

function b307(p0) {
 p0 = p0 | 0;
 nullFunc_di(44);
 return 0.0;
}

function b306(p0) {
 p0 = p0 | 0;
 nullFunc_di(43);
 return 0.0;
}

function b305(p0) {
 p0 = p0 | 0;
 nullFunc_di(42);
 return 0.0;
}

function b304(p0) {
 p0 = p0 | 0;
 nullFunc_di(41);
 return 0.0;
}

function b303(p0) {
 p0 = p0 | 0;
 nullFunc_di(40);
 return 0.0;
}

function b302(p0) {
 p0 = p0 | 0;
 nullFunc_di(39);
 return 0.0;
}

function b301(p0) {
 p0 = p0 | 0;
 nullFunc_di(38);
 return 0.0;
}

function b300(p0) {
 p0 = p0 | 0;
 nullFunc_di(37);
 return 0.0;
}

function b299(p0) {
 p0 = p0 | 0;
 nullFunc_di(36);
 return 0.0;
}

function b298(p0) {
 p0 = p0 | 0;
 nullFunc_di(35);
 return 0.0;
}

function b297(p0) {
 p0 = p0 | 0;
 nullFunc_di(34);
 return 0.0;
}

function b296(p0) {
 p0 = p0 | 0;
 nullFunc_di(33);
 return 0.0;
}

function b295(p0) {
 p0 = p0 | 0;
 nullFunc_di(32);
 return 0.0;
}

function b294(p0) {
 p0 = p0 | 0;
 nullFunc_di(31);
 return 0.0;
}

function b293(p0) {
 p0 = p0 | 0;
 nullFunc_di(30);
 return 0.0;
}

function b292(p0) {
 p0 = p0 | 0;
 nullFunc_di(29);
 return 0.0;
}

function b291(p0) {
 p0 = p0 | 0;
 nullFunc_di(28);
 return 0.0;
}

function b290(p0) {
 p0 = p0 | 0;
 nullFunc_di(27);
 return 0.0;
}

function b289(p0) {
 p0 = p0 | 0;
 nullFunc_di(26);
 return 0.0;
}

function b288(p0) {
 p0 = p0 | 0;
 nullFunc_di(25);
 return 0.0;
}

function b287(p0) {
 p0 = p0 | 0;
 nullFunc_di(24);
 return 0.0;
}

function b286(p0) {
 p0 = p0 | 0;
 nullFunc_di(23);
 return 0.0;
}

function b285(p0) {
 p0 = p0 | 0;
 nullFunc_di(22);
 return 0.0;
}

function b284(p0) {
 p0 = p0 | 0;
 nullFunc_di(21);
 return 0.0;
}

function b283(p0) {
 p0 = p0 | 0;
 nullFunc_di(20);
 return 0.0;
}

function b282(p0) {
 p0 = p0 | 0;
 nullFunc_di(19);
 return 0.0;
}

function b281(p0) {
 p0 = p0 | 0;
 nullFunc_di(18);
 return 0.0;
}

function b280(p0) {
 p0 = p0 | 0;
 nullFunc_di(17);
 return 0.0;
}

function b279(p0) {
 p0 = p0 | 0;
 nullFunc_di(16);
 return 0.0;
}

function b278(p0) {
 p0 = p0 | 0;
 nullFunc_di(15);
 return 0.0;
}

function b277(p0) {
 p0 = p0 | 0;
 nullFunc_di(14);
 return 0.0;
}

function b276(p0) {
 p0 = p0 | 0;
 nullFunc_di(13);
 return 0.0;
}

function b275(p0) {
 p0 = p0 | 0;
 nullFunc_di(12);
 return 0.0;
}

function b274(p0) {
 p0 = p0 | 0;
 nullFunc_di(11);
 return 0.0;
}

function b273(p0) {
 p0 = p0 | 0;
 nullFunc_di(10);
 return 0.0;
}

function b762(p0) {
 p0 = p0 | 0;
 nullFunc_ii(127);
 return 0;
}

function b761(p0) {
 p0 = p0 | 0;
 nullFunc_ii(126);
 return 0;
}

function b760(p0) {
 p0 = p0 | 0;
 nullFunc_ii(125);
 return 0;
}

function b759(p0) {
 p0 = p0 | 0;
 nullFunc_ii(124);
 return 0;
}

function b758(p0) {
 p0 = p0 | 0;
 nullFunc_ii(123);
 return 0;
}

function b757(p0) {
 p0 = p0 | 0;
 nullFunc_ii(122);
 return 0;
}

function b756(p0) {
 p0 = p0 | 0;
 nullFunc_ii(120);
 return 0;
}

function b755(p0) {
 p0 = p0 | 0;
 nullFunc_ii(117);
 return 0;
}

function b754(p0) {
 p0 = p0 | 0;
 nullFunc_ii(114);
 return 0;
}

function b753(p0) {
 p0 = p0 | 0;
 nullFunc_ii(111);
 return 0;
}

function b752(p0) {
 p0 = p0 | 0;
 nullFunc_ii(110);
 return 0;
}

function b751(p0) {
 p0 = p0 | 0;
 nullFunc_ii(109);
 return 0;
}

function b750(p0) {
 p0 = p0 | 0;
 nullFunc_ii(108);
 return 0;
}

function b749(p0) {
 p0 = p0 | 0;
 nullFunc_ii(107);
 return 0;
}

function b748(p0) {
 p0 = p0 | 0;
 nullFunc_ii(106);
 return 0;
}

function b747(p0) {
 p0 = p0 | 0;
 nullFunc_ii(105);
 return 0;
}

function b746(p0) {
 p0 = p0 | 0;
 nullFunc_ii(104);
 return 0;
}

function b745(p0) {
 p0 = p0 | 0;
 nullFunc_ii(103);
 return 0;
}

function b744(p0) {
 p0 = p0 | 0;
 nullFunc_ii(101);
 return 0;
}

function b272(p0) {
 p0 = p0 | 0;
 nullFunc_di(9);
 return 0.0;
}

function b271(p0) {
 p0 = p0 | 0;
 nullFunc_di(8);
 return 0.0;
}

function b270(p0) {
 p0 = p0 | 0;
 nullFunc_di(7);
 return 0.0;
}

function b269(p0) {
 p0 = p0 | 0;
 nullFunc_di(6);
 return 0.0;
}

function b268(p0) {
 p0 = p0 | 0;
 nullFunc_di(5);
 return 0.0;
}

function b267(p0) {
 p0 = p0 | 0;
 nullFunc_di(4);
 return 0.0;
}

function b266(p0) {
 p0 = p0 | 0;
 nullFunc_di(3);
 return 0.0;
}

function b265(p0) {
 p0 = p0 | 0;
 nullFunc_di(2);
 return 0.0;
}

function b264(p0) {
 p0 = p0 | 0;
 nullFunc_di(1);
 return 0.0;
}

function b263(p0) {
 p0 = p0 | 0;
 nullFunc_di(0);
 return 0.0;
}

function ___cxa_end_catch__wrapper() {
 {}
 ___cxa_end_catch();
}

function b743(p0) {
 p0 = p0 | 0;
 nullFunc_ii(99);
 return 0;
}

function b742(p0) {
 p0 = p0 | 0;
 nullFunc_ii(96);
 return 0;
}

function b741(p0) {
 p0 = p0 | 0;
 nullFunc_ii(94);
 return 0;
}

function b740(p0) {
 p0 = p0 | 0;
 nullFunc_ii(93);
 return 0;
}

function b739(p0) {
 p0 = p0 | 0;
 nullFunc_ii(91);
 return 0;
}

function b738(p0) {
 p0 = p0 | 0;
 nullFunc_ii(90);
 return 0;
}

function b737(p0) {
 p0 = p0 | 0;
 nullFunc_ii(88);
 return 0;
}

function b736(p0) {
 p0 = p0 | 0;
 nullFunc_ii(86);
 return 0;
}

function b735(p0) {
 p0 = p0 | 0;
 nullFunc_ii(84);
 return 0;
}

function b734(p0) {
 p0 = p0 | 0;
 nullFunc_ii(83);
 return 0;
}

function b733(p0) {
 p0 = p0 | 0;
 nullFunc_ii(81);
 return 0;
}

function b732(p0) {
 p0 = p0 | 0;
 nullFunc_ii(79);
 return 0;
}

function b731(p0) {
 p0 = p0 | 0;
 nullFunc_ii(78);
 return 0;
}

function b730(p0) {
 p0 = p0 | 0;
 nullFunc_ii(76);
 return 0;
}

function b729(p0) {
 p0 = p0 | 0;
 nullFunc_ii(75);
 return 0;
}

function b728(p0) {
 p0 = p0 | 0;
 nullFunc_ii(73);
 return 0;
}

function b727(p0) {
 p0 = p0 | 0;
 nullFunc_ii(72);
 return 0;
}

function b726(p0) {
 p0 = p0 | 0;
 nullFunc_ii(71);
 return 0;
}

function b725(p0) {
 p0 = p0 | 0;
 nullFunc_ii(70);
 return 0;
}

function b724(p0) {
 p0 = p0 | 0;
 nullFunc_ii(69);
 return 0;
}

function b723(p0) {
 p0 = p0 | 0;
 nullFunc_ii(68);
 return 0;
}

function b722(p0) {
 p0 = p0 | 0;
 nullFunc_ii(67);
 return 0;
}

function b721(p0) {
 p0 = p0 | 0;
 nullFunc_ii(65);
 return 0;
}

function b720(p0) {
 p0 = p0 | 0;
 nullFunc_ii(64);
 return 0;
}

function b719(p0) {
 p0 = p0 | 0;
 nullFunc_ii(62);
 return 0;
}

function b718(p0) {
 p0 = p0 | 0;
 nullFunc_ii(61);
 return 0;
}

function b717(p0) {
 p0 = p0 | 0;
 nullFunc_ii(60);
 return 0;
}

function b716(p0) {
 p0 = p0 | 0;
 nullFunc_ii(59);
 return 0;
}

function b715(p0) {
 p0 = p0 | 0;
 nullFunc_ii(58);
 return 0;
}

function b714(p0) {
 p0 = p0 | 0;
 nullFunc_ii(57);
 return 0;
}

function b713(p0) {
 p0 = p0 | 0;
 nullFunc_ii(56);
 return 0;
}

function b712(p0) {
 p0 = p0 | 0;
 nullFunc_ii(55);
 return 0;
}

function b711(p0) {
 p0 = p0 | 0;
 nullFunc_ii(54);
 return 0;
}

function b710(p0) {
 p0 = p0 | 0;
 nullFunc_ii(53);
 return 0;
}

function b709(p0) {
 p0 = p0 | 0;
 nullFunc_ii(52);
 return 0;
}

function b708(p0) {
 p0 = p0 | 0;
 nullFunc_ii(51);
 return 0;
}

function b707(p0) {
 p0 = p0 | 0;
 nullFunc_ii(50);
 return 0;
}

function b706(p0) {
 p0 = p0 | 0;
 nullFunc_ii(49);
 return 0;
}

function b705(p0) {
 p0 = p0 | 0;
 nullFunc_ii(47);
 return 0;
}

function b704(p0) {
 p0 = p0 | 0;
 nullFunc_ii(46);
 return 0;
}

function b703(p0) {
 p0 = p0 | 0;
 nullFunc_ii(45);
 return 0;
}

function b702(p0) {
 p0 = p0 | 0;
 nullFunc_ii(44);
 return 0;
}

function b701(p0) {
 p0 = p0 | 0;
 nullFunc_ii(43);
 return 0;
}

function b700(p0) {
 p0 = p0 | 0;
 nullFunc_ii(42);
 return 0;
}

function b699(p0) {
 p0 = p0 | 0;
 nullFunc_ii(41);
 return 0;
}

function b698(p0) {
 p0 = p0 | 0;
 nullFunc_ii(40);
 return 0;
}

function b697(p0) {
 p0 = p0 | 0;
 nullFunc_ii(39);
 return 0;
}

function b696(p0) {
 p0 = p0 | 0;
 nullFunc_ii(38);
 return 0;
}

function b695(p0) {
 p0 = p0 | 0;
 nullFunc_ii(37);
 return 0;
}

function b694(p0) {
 p0 = p0 | 0;
 nullFunc_ii(36);
 return 0;
}

function b693(p0) {
 p0 = p0 | 0;
 nullFunc_ii(35);
 return 0;
}

function b692(p0) {
 p0 = p0 | 0;
 nullFunc_ii(34);
 return 0;
}

function b691(p0) {
 p0 = p0 | 0;
 nullFunc_ii(33);
 return 0;
}

function b690(p0) {
 p0 = p0 | 0;
 nullFunc_ii(32);
 return 0;
}

function b689(p0) {
 p0 = p0 | 0;
 nullFunc_ii(31);
 return 0;
}

function b688(p0) {
 p0 = p0 | 0;
 nullFunc_ii(30);
 return 0;
}

function b687(p0) {
 p0 = p0 | 0;
 nullFunc_ii(29);
 return 0;
}

function b686(p0) {
 p0 = p0 | 0;
 nullFunc_ii(28);
 return 0;
}

function b685(p0) {
 p0 = p0 | 0;
 nullFunc_ii(27);
 return 0;
}

function b684(p0) {
 p0 = p0 | 0;
 nullFunc_ii(26);
 return 0;
}

function b683(p0) {
 p0 = p0 | 0;
 nullFunc_ii(25);
 return 0;
}

function b682(p0) {
 p0 = p0 | 0;
 nullFunc_ii(24);
 return 0;
}

function b681(p0) {
 p0 = p0 | 0;
 nullFunc_ii(22);
 return 0;
}

function b680(p0) {
 p0 = p0 | 0;
 nullFunc_ii(21);
 return 0;
}

function b679(p0) {
 p0 = p0 | 0;
 nullFunc_ii(19);
 return 0;
}

function b678(p0) {
 p0 = p0 | 0;
 nullFunc_ii(18);
 return 0;
}

function b677(p0) {
 p0 = p0 | 0;
 nullFunc_ii(17);
 return 0;
}

function b676(p0) {
 p0 = p0 | 0;
 nullFunc_ii(16);
 return 0;
}

function b675(p0) {
 p0 = p0 | 0;
 nullFunc_ii(15);
 return 0;
}

function b674(p0) {
 p0 = p0 | 0;
 nullFunc_ii(14);
 return 0;
}

function b673(p0) {
 p0 = p0 | 0;
 nullFunc_ii(13);
 return 0;
}

function b672(p0) {
 p0 = p0 | 0;
 nullFunc_ii(12);
 return 0;
}

function b671(p0) {
 p0 = p0 | 0;
 nullFunc_ii(11);
 return 0;
}

function b670(p0) {
 p0 = p0 | 0;
 nullFunc_ii(10);
 return 0;
}

function stackRestore(top) {
 top = top | 0;
 STACKTOP = top;
}

function b669(p0) {
 p0 = p0 | 0;
 nullFunc_ii(9);
 return 0;
}

function b668(p0) {
 p0 = p0 | 0;
 nullFunc_ii(8);
 return 0;
}

function b667(p0) {
 p0 = p0 | 0;
 nullFunc_ii(7);
 return 0;
}

function b666(p0) {
 p0 = p0 | 0;
 nullFunc_ii(6);
 return 0;
}

function b665(p0) {
 p0 = p0 | 0;
 nullFunc_ii(5);
 return 0;
}

function b664(p0) {
 p0 = p0 | 0;
 nullFunc_ii(4);
 return 0;
}

function b663(p0) {
 p0 = p0 | 0;
 nullFunc_ii(3);
 return 0;
}

function b662(p0) {
 p0 = p0 | 0;
 nullFunc_ii(2);
 return 0;
}

function b661(p0) {
 p0 = p0 | 0;
 nullFunc_ii(0);
 return 0;
}

function b563(p0) {
 p0 = p0 | 0;
 nullFunc_vi(127);
}

function b562(p0) {
 p0 = p0 | 0;
 nullFunc_vi(126);
}

function b561(p0) {
 p0 = p0 | 0;
 nullFunc_vi(125);
}

function b560(p0) {
 p0 = p0 | 0;
 nullFunc_vi(123);
}

function b559(p0) {
 p0 = p0 | 0;
 nullFunc_vi(122);
}

function b558(p0) {
 p0 = p0 | 0;
 nullFunc_vi(121);
}

function b557(p0) {
 p0 = p0 | 0;
 nullFunc_vi(120);
}

function b556(p0) {
 p0 = p0 | 0;
 nullFunc_vi(119);
}

function b555(p0) {
 p0 = p0 | 0;
 nullFunc_vi(118);
}

function b554(p0) {
 p0 = p0 | 0;
 nullFunc_vi(117);
}

function b553(p0) {
 p0 = p0 | 0;
 nullFunc_vi(116);
}

function b552(p0) {
 p0 = p0 | 0;
 nullFunc_vi(115);
}

function b551(p0) {
 p0 = p0 | 0;
 nullFunc_vi(114);
}

function b550(p0) {
 p0 = p0 | 0;
 nullFunc_vi(113);
}

function b549(p0) {
 p0 = p0 | 0;
 nullFunc_vi(112);
}

function b548(p0) {
 p0 = p0 | 0;
 nullFunc_vi(110);
}

function b547(p0) {
 p0 = p0 | 0;
 nullFunc_vi(109);
}

function b546(p0) {
 p0 = p0 | 0;
 nullFunc_vi(107);
}

function b545(p0) {
 p0 = p0 | 0;
 nullFunc_vi(106);
}

function b544(p0) {
 p0 = p0 | 0;
 nullFunc_vi(104);
}

function b543(p0) {
 p0 = p0 | 0;
 nullFunc_vi(103);
}

function b542(p0) {
 p0 = p0 | 0;
 nullFunc_vi(102);
}

function b541(p0) {
 p0 = p0 | 0;
 nullFunc_vi(101);
}

function b540(p0) {
 p0 = p0 | 0;
 nullFunc_vi(100);
}

function b539(p0) {
 p0 = p0 | 0;
 nullFunc_vi(99);
}

function b538(p0) {
 p0 = p0 | 0;
 nullFunc_vi(98);
}

function b537(p0) {
 p0 = p0 | 0;
 nullFunc_vi(97);
}

function b536(p0) {
 p0 = p0 | 0;
 nullFunc_vi(96);
}

function b535(p0) {
 p0 = p0 | 0;
 nullFunc_vi(95);
}

function b534(p0) {
 p0 = p0 | 0;
 nullFunc_vi(93);
}

function b533(p0) {
 p0 = p0 | 0;
 nullFunc_vi(92);
}

function b532(p0) {
 p0 = p0 | 0;
 nullFunc_vi(91);
}

function b531(p0) {
 p0 = p0 | 0;
 nullFunc_vi(90);
}

function b530(p0) {
 p0 = p0 | 0;
 nullFunc_vi(89);
}

function b529(p0) {
 p0 = p0 | 0;
 nullFunc_vi(88);
}

function b528(p0) {
 p0 = p0 | 0;
 nullFunc_vi(87);
}

function b527(p0) {
 p0 = p0 | 0;
 nullFunc_vi(86);
}

function b526(p0) {
 p0 = p0 | 0;
 nullFunc_vi(85);
}

function b525(p0) {
 p0 = p0 | 0;
 nullFunc_vi(84);
}

function b524(p0) {
 p0 = p0 | 0;
 nullFunc_vi(83);
}

function b523(p0) {
 p0 = p0 | 0;
 nullFunc_vi(82);
}

function b522(p0) {
 p0 = p0 | 0;
 nullFunc_vi(81);
}

function b521(p0) {
 p0 = p0 | 0;
 nullFunc_vi(80);
}

function b520(p0) {
 p0 = p0 | 0;
 nullFunc_vi(79);
}

function b519(p0) {
 p0 = p0 | 0;
 nullFunc_vi(78);
}

function b518(p0) {
 p0 = p0 | 0;
 nullFunc_vi(77);
}

function b517(p0) {
 p0 = p0 | 0;
 nullFunc_vi(75);
}

function b516(p0) {
 p0 = p0 | 0;
 nullFunc_vi(74);
}

function b515(p0) {
 p0 = p0 | 0;
 nullFunc_vi(73);
}

function b514(p0) {
 p0 = p0 | 0;
 nullFunc_vi(72);
}

function b513(p0) {
 p0 = p0 | 0;
 nullFunc_vi(71);
}

function b512(p0) {
 p0 = p0 | 0;
 nullFunc_vi(69);
}

function b511(p0) {
 p0 = p0 | 0;
 nullFunc_vi(68);
}

function b510(p0) {
 p0 = p0 | 0;
 nullFunc_vi(67);
}

function b509(p0) {
 p0 = p0 | 0;
 nullFunc_vi(66);
}

function b508(p0) {
 p0 = p0 | 0;
 nullFunc_vi(64);
}

function b507(p0) {
 p0 = p0 | 0;
 nullFunc_vi(63);
}

function b506(p0) {
 p0 = p0 | 0;
 nullFunc_vi(62);
}

function b505(p0) {
 p0 = p0 | 0;
 nullFunc_vi(61);
}

function b504(p0) {
 p0 = p0 | 0;
 nullFunc_vi(60);
}

function b503(p0) {
 p0 = p0 | 0;
 nullFunc_vi(58);
}

function b502(p0) {
 p0 = p0 | 0;
 nullFunc_vi(57);
}

function b501(p0) {
 p0 = p0 | 0;
 nullFunc_vi(56);
}

function b500(p0) {
 p0 = p0 | 0;
 nullFunc_vi(55);
}

function b499(p0) {
 p0 = p0 | 0;
 nullFunc_vi(54);
}

function b498(p0) {
 p0 = p0 | 0;
 nullFunc_vi(53);
}

function b497(p0) {
 p0 = p0 | 0;
 nullFunc_vi(52);
}

function b496(p0) {
 p0 = p0 | 0;
 nullFunc_vi(51);
}

function b495(p0) {
 p0 = p0 | 0;
 nullFunc_vi(50);
}

function b494(p0) {
 p0 = p0 | 0;
 nullFunc_vi(49);
}

function b493(p0) {
 p0 = p0 | 0;
 nullFunc_vi(48);
}

function b492(p0) {
 p0 = p0 | 0;
 nullFunc_vi(47);
}

function b491(p0) {
 p0 = p0 | 0;
 nullFunc_vi(46);
}

function b490(p0) {
 p0 = p0 | 0;
 nullFunc_vi(45);
}

function b489(p0) {
 p0 = p0 | 0;
 nullFunc_vi(44);
}

function b488(p0) {
 p0 = p0 | 0;
 nullFunc_vi(43);
}

function b487(p0) {
 p0 = p0 | 0;
 nullFunc_vi(42);
}

function b486(p0) {
 p0 = p0 | 0;
 nullFunc_vi(41);
}

function b485(p0) {
 p0 = p0 | 0;
 nullFunc_vi(40);
}

function b484(p0) {
 p0 = p0 | 0;
 nullFunc_vi(39);
}

function b483(p0) {
 p0 = p0 | 0;
 nullFunc_vi(38);
}

function b482(p0) {
 p0 = p0 | 0;
 nullFunc_vi(37);
}

function b481(p0) {
 p0 = p0 | 0;
 nullFunc_vi(36);
}

function b480(p0) {
 p0 = p0 | 0;
 nullFunc_vi(35);
}

function b479(p0) {
 p0 = p0 | 0;
 nullFunc_vi(34);
}

function b478(p0) {
 p0 = p0 | 0;
 nullFunc_vi(33);
}

function b477(p0) {
 p0 = p0 | 0;
 nullFunc_vi(32);
}

function b476(p0) {
 p0 = p0 | 0;
 nullFunc_vi(31);
}

function b475(p0) {
 p0 = p0 | 0;
 nullFunc_vi(30);
}

function b474(p0) {
 p0 = p0 | 0;
 nullFunc_vi(29);
}

function b473(p0) {
 p0 = p0 | 0;
 nullFunc_vi(28);
}

function b472(p0) {
 p0 = p0 | 0;
 nullFunc_vi(27);
}

function b471(p0) {
 p0 = p0 | 0;
 nullFunc_vi(26);
}

function b470(p0) {
 p0 = p0 | 0;
 nullFunc_vi(25);
}

function b469(p0) {
 p0 = p0 | 0;
 nullFunc_vi(23);
}

function b468(p0) {
 p0 = p0 | 0;
 nullFunc_vi(20);
}

function b467(p0) {
 p0 = p0 | 0;
 nullFunc_vi(17);
}

function b466(p0) {
 p0 = p0 | 0;
 nullFunc_vi(16);
}

function b465(p0) {
 p0 = p0 | 0;
 nullFunc_vi(15);
}

function b464(p0) {
 p0 = p0 | 0;
 nullFunc_vi(13);
}

function b463(p0) {
 p0 = p0 | 0;
 nullFunc_vi(12);
}

function b462(p0) {
 p0 = p0 | 0;
 nullFunc_vi(11);
}

function b461(p0) {
 p0 = p0 | 0;
 nullFunc_vi(10);
}

function b460(p0) {
 p0 = p0 | 0;
 nullFunc_vi(5);
}

function b459(p0) {
 p0 = p0 | 0;
 nullFunc_vi(4);
}

function b458(p0) {
 p0 = p0 | 0;
 nullFunc_vi(3);
}

function b457(p0) {
 p0 = p0 | 0;
 nullFunc_vi(2);
}

function b456(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1);
}

function b455(p0) {
 p0 = p0 | 0;
 nullFunc_vi(0);
}

function b453() {
 {}
 nullFunc_i(127);
 return 0;
}

function b452() {
 {}
 nullFunc_i(126);
 return 0;
}

function b451() {
 {}
 nullFunc_i(124);
 return 0;
}

function b450() {
 {}
 nullFunc_i(123);
 return 0;
}

function b449() {
 {}
 nullFunc_i(122);
 return 0;
}

function b448() {
 {}
 nullFunc_i(121);
 return 0;
}

function b447() {
 {}
 nullFunc_i(120);
 return 0;
}

function b446() {
 {}
 nullFunc_i(119);
 return 0;
}

function b445() {
 {}
 nullFunc_i(118);
 return 0;
}

function b444() {
 {}
 nullFunc_i(117);
 return 0;
}

function b443() {
 {}
 nullFunc_i(116);
 return 0;
}

function b442() {
 {}
 nullFunc_i(115);
 return 0;
}

function b441() {
 {}
 nullFunc_i(114);
 return 0;
}

function b440() {
 {}
 nullFunc_i(113);
 return 0;
}

function b439() {
 {}
 nullFunc_i(112);
 return 0;
}

function b438() {
 {}
 nullFunc_i(111);
 return 0;
}

function b437() {
 {}
 nullFunc_i(110);
 return 0;
}

function b436() {
 {}
 nullFunc_i(109);
 return 0;
}

function b435() {
 {}
 nullFunc_i(108);
 return 0;
}

function b434() {
 {}
 nullFunc_i(107);
 return 0;
}

function b433() {
 {}
 nullFunc_i(106);
 return 0;
}

function b432() {
 {}
 nullFunc_i(105);
 return 0;
}

function b431() {
 {}
 nullFunc_i(104);
 return 0;
}

function b430() {
 {}
 nullFunc_i(103);
 return 0;
}

function b429() {
 {}
 nullFunc_i(102);
 return 0;
}

function b428() {
 {}
 nullFunc_i(101);
 return 0;
}

function b427() {
 {}
 nullFunc_i(100);
 return 0;
}

function b426() {
 {}
 nullFunc_i(99);
 return 0;
}

function b425() {
 {}
 nullFunc_i(98);
 return 0;
}

function b424() {
 {}
 nullFunc_i(97);
 return 0;
}

function b423() {
 {}
 nullFunc_i(96);
 return 0;
}

function b422() {
 {}
 nullFunc_i(95);
 return 0;
}

function b421() {
 {}
 nullFunc_i(94);
 return 0;
}

function b420() {
 {}
 nullFunc_i(93);
 return 0;
}

function b419() {
 {}
 nullFunc_i(92);
 return 0;
}

function b418() {
 {}
 nullFunc_i(91);
 return 0;
}

function b417() {
 {}
 nullFunc_i(90);
 return 0;
}

function b416() {
 {}
 nullFunc_i(89);
 return 0;
}

function b415() {
 {}
 nullFunc_i(88);
 return 0;
}

function b414() {
 {}
 nullFunc_i(87);
 return 0;
}

function b413() {
 {}
 nullFunc_i(86);
 return 0;
}

function b412() {
 {}
 nullFunc_i(85);
 return 0;
}

function b411() {
 {}
 nullFunc_i(84);
 return 0;
}

function b410() {
 {}
 nullFunc_i(83);
 return 0;
}

function b409() {
 {}
 nullFunc_i(82);
 return 0;
}

function b408() {
 {}
 nullFunc_i(81);
 return 0;
}

function b407() {
 {}
 nullFunc_i(80);
 return 0;
}

function b406() {
 {}
 nullFunc_i(79);
 return 0;
}

function b405() {
 {}
 nullFunc_i(78);
 return 0;
}

function b404() {
 {}
 nullFunc_i(77);
 return 0;
}

function b403() {
 {}
 nullFunc_i(76);
 return 0;
}

function b402() {
 {}
 nullFunc_i(75);
 return 0;
}

function b401() {
 {}
 nullFunc_i(74);
 return 0;
}

function b400() {
 {}
 nullFunc_i(73);
 return 0;
}

function b399() {
 {}
 nullFunc_i(72);
 return 0;
}

function b398() {
 {}
 nullFunc_i(71);
 return 0;
}

function b397() {
 {}
 nullFunc_i(70);
 return 0;
}

function b396() {
 {}
 nullFunc_i(69);
 return 0;
}

function b395() {
 {}
 nullFunc_i(68);
 return 0;
}

function b394() {
 {}
 nullFunc_i(67);
 return 0;
}

function b393() {
 {}
 nullFunc_i(66);
 return 0;
}

function b392() {
 {}
 nullFunc_i(65);
 return 0;
}

function b391() {
 {}
 nullFunc_i(64);
 return 0;
}

function b390() {
 {}
 nullFunc_i(63);
 return 0;
}

function b389() {
 {}
 nullFunc_i(62);
 return 0;
}

function b388() {
 {}
 nullFunc_i(61);
 return 0;
}

function b387() {
 {}
 nullFunc_i(60);
 return 0;
}

function b386() {
 {}
 nullFunc_i(59);
 return 0;
}

function b385() {
 {}
 nullFunc_i(58);
 return 0;
}

function b384() {
 {}
 nullFunc_i(57);
 return 0;
}

function b383() {
 {}
 nullFunc_i(56);
 return 0;
}

function b382() {
 {}
 nullFunc_i(55);
 return 0;
}

function b381() {
 {}
 nullFunc_i(54);
 return 0;
}

function b380() {
 {}
 nullFunc_i(53);
 return 0;
}

function b379() {
 {}
 nullFunc_i(52);
 return 0;
}

function b378() {
 {}
 nullFunc_i(51);
 return 0;
}

function b377() {
 {}
 nullFunc_i(50);
 return 0;
}

function b376() {
 {}
 nullFunc_i(49);
 return 0;
}

function b375() {
 {}
 nullFunc_i(48);
 return 0;
}

function b374() {
 {}
 nullFunc_i(47);
 return 0;
}

function b373() {
 {}
 nullFunc_i(46);
 return 0;
}

function b372() {
 {}
 nullFunc_i(45);
 return 0;
}

function b371() {
 {}
 nullFunc_i(44);
 return 0;
}

function b370() {
 {}
 nullFunc_i(43);
 return 0;
}

function b369() {
 {}
 nullFunc_i(42);
 return 0;
}

function b368() {
 {}
 nullFunc_i(41);
 return 0;
}

function b367() {
 {}
 nullFunc_i(40);
 return 0;
}

function b366() {
 {}
 nullFunc_i(39);
 return 0;
}

function b365() {
 {}
 nullFunc_i(38);
 return 0;
}

function b364() {
 {}
 nullFunc_i(37);
 return 0;
}

function b363() {
 {}
 nullFunc_i(36);
 return 0;
}

function b362() {
 {}
 nullFunc_i(35);
 return 0;
}

function b361() {
 {}
 nullFunc_i(34);
 return 0;
}

function b360() {
 {}
 nullFunc_i(33);
 return 0;
}

function b359() {
 {}
 nullFunc_i(32);
 return 0;
}

function b358() {
 {}
 nullFunc_i(31);
 return 0;
}

function b357() {
 {}
 nullFunc_i(30);
 return 0;
}

function b356() {
 {}
 nullFunc_i(29);
 return 0;
}

function b355() {
 {}
 nullFunc_i(28);
 return 0;
}

function b354() {
 {}
 nullFunc_i(27);
 return 0;
}

function b353() {
 {}
 nullFunc_i(26);
 return 0;
}

function b352() {
 {}
 nullFunc_i(25);
 return 0;
}

function b351() {
 {}
 nullFunc_i(24);
 return 0;
}

function b350() {
 {}
 nullFunc_i(23);
 return 0;
}

function b349() {
 {}
 nullFunc_i(22);
 return 0;
}

function b348() {
 {}
 nullFunc_i(21);
 return 0;
}

function b347() {
 {}
 nullFunc_i(20);
 return 0;
}

function b346() {
 {}
 nullFunc_i(19);
 return 0;
}

function b345() {
 {}
 nullFunc_i(18);
 return 0;
}

function b344() {
 {}
 nullFunc_i(17);
 return 0;
}

function b343() {
 {}
 nullFunc_i(16);
 return 0;
}

function b342() {
 {}
 nullFunc_i(15);
 return 0;
}

function b341() {
 {}
 nullFunc_i(14);
 return 0;
}

function b340() {
 {}
 nullFunc_i(13);
 return 0;
}

function b339() {
 {}
 nullFunc_i(12);
 return 0;
}

function b338() {
 {}
 nullFunc_i(11);
 return 0;
}

function b337() {
 {}
 nullFunc_i(10);
 return 0;
}

function b336() {
 {}
 nullFunc_i(9);
 return 0;
}

function b335() {
 {}
 nullFunc_i(8);
 return 0;
}

function b334() {
 {}
 nullFunc_i(7);
 return 0;
}

function b333() {
 {}
 nullFunc_i(6);
 return 0;
}

function b332() {
 {}
 nullFunc_i(5);
 return 0;
}

function b331() {
 {}
 nullFunc_i(4);
 return 0;
}

function b330() {
 {}
 nullFunc_i(3);
 return 0;
}

function b329() {
 {}
 nullFunc_i(2);
 return 0;
}

function b328() {
 {}
 nullFunc_i(1);
 return 0;
}

function b327() {
 {}
 nullFunc_i(0);
 return 0;
}

function getTempRet0() {
 return tempRet0 | 0;
}

function stackSave() {
 return STACKTOP | 0;
}

function b1002() {
 {}
 nullFunc_v(126);
}

function b1001() {
 {}
 nullFunc_v(125);
}

function b1000() {
 {}
 nullFunc_v(124);
}

function b999() {
 {}
 nullFunc_v(122);
}

function b998() {
 {}
 nullFunc_v(121);
}

function b997() {
 {}
 nullFunc_v(120);
}

function b996() {
 {}
 nullFunc_v(119);
}

function b995() {
 {}
 nullFunc_v(118);
}

function b994() {
 {}
 nullFunc_v(117);
}

function b993() {
 {}
 nullFunc_v(116);
}

function b992() {
 {}
 nullFunc_v(115);
}

function b991() {
 {}
 nullFunc_v(114);
}

function b990() {
 {}
 nullFunc_v(113);
}

function b989() {
 {}
 nullFunc_v(112);
}

function b988() {
 {}
 nullFunc_v(111);
}

function b987() {
 {}
 nullFunc_v(110);
}

function b986() {
 {}
 nullFunc_v(109);
}

function b985() {
 {}
 nullFunc_v(108);
}

function b984() {
 {}
 nullFunc_v(107);
}

function b983() {
 {}
 nullFunc_v(106);
}

function b982() {
 {}
 nullFunc_v(105);
}

function b981() {
 {}
 nullFunc_v(104);
}

function b980() {
 {}
 nullFunc_v(103);
}

function b979() {
 {}
 nullFunc_v(102);
}

function b978() {
 {}
 nullFunc_v(101);
}

function b977() {
 {}
 nullFunc_v(100);
}

function b976() {
 {}
 nullFunc_v(99);
}

function b975() {
 {}
 nullFunc_v(98);
}

function b974() {
 {}
 nullFunc_v(97);
}

function b973() {
 {}
 nullFunc_v(96);
}

function b972() {
 {}
 nullFunc_v(95);
}

function b971() {
 {}
 nullFunc_v(94);
}

function b970() {
 {}
 nullFunc_v(93);
}

function b969() {
 {}
 nullFunc_v(92);
}

function b968() {
 {}
 nullFunc_v(91);
}

function b967() {
 {}
 nullFunc_v(90);
}

function b966() {
 {}
 nullFunc_v(89);
}

function b965() {
 {}
 nullFunc_v(88);
}

function b964() {
 {}
 nullFunc_v(87);
}

function b963() {
 {}
 nullFunc_v(86);
}

function b962() {
 {}
 nullFunc_v(85);
}

function b961() {
 {}
 nullFunc_v(84);
}

function b960() {
 {}
 nullFunc_v(83);
}

function b959() {
 {}
 nullFunc_v(82);
}

function b958() {
 {}
 nullFunc_v(81);
}

function b957() {
 {}
 nullFunc_v(80);
}

function b956() {
 {}
 nullFunc_v(79);
}

function b955() {
 {}
 nullFunc_v(78);
}

function b954() {
 {}
 nullFunc_v(77);
}

function b953() {
 {}
 nullFunc_v(76);
}

function b952() {
 {}
 nullFunc_v(75);
}

function b951() {
 {}
 nullFunc_v(74);
}

function b950() {
 {}
 nullFunc_v(73);
}

function b949() {
 {}
 nullFunc_v(72);
}

function b948() {
 {}
 nullFunc_v(71);
}

function b947() {
 {}
 nullFunc_v(70);
}

function b946() {
 {}
 nullFunc_v(69);
}

function b945() {
 {}
 nullFunc_v(67);
}

function b944() {
 {}
 nullFunc_v(66);
}

function b943() {
 {}
 nullFunc_v(65);
}

function b942() {
 {}
 nullFunc_v(64);
}

function b941() {
 {}
 nullFunc_v(63);
}

function b940() {
 {}
 nullFunc_v(62);
}

function b939() {
 {}
 nullFunc_v(61);
}

function b938() {
 {}
 nullFunc_v(60);
}

function b937() {
 {}
 nullFunc_v(59);
}

function b936() {
 {}
 nullFunc_v(58);
}

function b935() {
 {}
 nullFunc_v(56);
}

function b934() {
 {}
 nullFunc_v(55);
}

function b933() {
 {}
 nullFunc_v(54);
}

function b932() {
 {}
 nullFunc_v(53);
}

function b931() {
 {}
 nullFunc_v(52);
}

function b930() {
 {}
 nullFunc_v(51);
}

function b929() {
 {}
 nullFunc_v(50);
}

function b928() {
 {}
 nullFunc_v(49);
}

function b927() {
 {}
 nullFunc_v(48);
}

function b926() {
 {}
 nullFunc_v(47);
}

function b925() {
 {}
 nullFunc_v(46);
}

function b924() {
 {}
 nullFunc_v(45);
}

function b923() {
 {}
 nullFunc_v(44);
}

function b922() {
 {}
 nullFunc_v(43);
}

function b921() {
 {}
 nullFunc_v(42);
}

function b920() {
 {}
 nullFunc_v(41);
}

function b919() {
 {}
 nullFunc_v(40);
}

function b918() {
 {}
 nullFunc_v(39);
}

function b917() {
 {}
 nullFunc_v(38);
}

function b916() {
 {}
 nullFunc_v(37);
}

function b915() {
 {}
 nullFunc_v(36);
}

function b914() {
 {}
 nullFunc_v(35);
}

function b913() {
 {}
 nullFunc_v(34);
}

function b912() {
 {}
 nullFunc_v(33);
}

function b911() {
 {}
 nullFunc_v(32);
}

function b910() {
 {}
 nullFunc_v(31);
}

function b909() {
 {}
 nullFunc_v(30);
}

function b908() {
 {}
 nullFunc_v(29);
}

function b907() {
 {}
 nullFunc_v(28);
}

function b906() {
 {}
 nullFunc_v(27);
}

function b905() {
 {}
 nullFunc_v(26);
}

function b904() {
 {}
 nullFunc_v(25);
}

function b903() {
 {}
 nullFunc_v(24);
}

function b902() {
 {}
 nullFunc_v(23);
}

function b901() {
 {}
 nullFunc_v(22);
}

function b900() {
 {}
 nullFunc_v(21);
}

function b899() {
 {}
 nullFunc_v(20);
}

function b898() {
 {}
 nullFunc_v(19);
}

function b897() {
 {}
 nullFunc_v(18);
}

function b896() {
 {}
 nullFunc_v(17);
}

function b895() {
 {}
 nullFunc_v(16);
}

function b894() {
 {}
 nullFunc_v(15);
}

function b893() {
 {}
 nullFunc_v(14);
}

function b892() {
 {}
 nullFunc_v(13);
}

function b891() {
 {}
 nullFunc_v(12);
}

function b890() {
 {}
 nullFunc_v(11);
}

function b889() {
 {}
 nullFunc_v(10);
}

function b888() {
 {}
 nullFunc_v(9);
}

function b887() {
 {}
 nullFunc_v(8);
}

function b886() {
 {}
 nullFunc_v(7);
}

function b885() {
 {}
 nullFunc_v(6);
}

function b884() {
 {}
 nullFunc_v(4);
}

function b883() {
 {}
 nullFunc_v(3);
}

function b882() {
 {}
 nullFunc_v(2);
}

function b881() {
 {}
 nullFunc_v(1);
}

function b880() {
 {}
 nullFunc_v(0);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_iiii = [b1,b2,___stdio_write,___stdio_seek,___stdout_write,b3,b4,b5,b6,b7,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,b8,b9,b10,b11,b12];
var FUNCTION_TABLE_viiiii = [b14,b15,b16,b17,b18,b19,b20,b21,b22,b23,b24,b25,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b26,b27,b28,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b29,b30,b31,b32,b33,b34,b35,b36,b37,b38,b39,b40
,b41,b42,b43,b44,b45,b46,b47,b48,b49,b50,b51,b52,b53,b54,b55,b56,b57,b58,b59,b60,b61,b62,b63,b64,b65,b66,b67,b68,b69,b70
,b71,b72,b73,b74,b75,__ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_5ArrayIjLi3ELi1ELi0ELi3ELi1EEEEES5_NS0_9assign_opIjjEELi0EEC2ERS5_RKS5_RKS7_RS4_,b76,b77,b78,b79,b80,b81,b82,b83,b84,b85,__ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEES5_NS0_9assign_opIffEELi0EEC2ERS5_RKS5_RKS7_RS4_,b86,b87,b88,b89,b90,b91,b92,b93,b94,b95,b96,b97,b98
,b99,b100,b101,b102,__ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_13CwiseBinaryOpINS0_18scalar_quotient_opIffEEKNS_13MatrixWrapperIKNS6_INS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESE_EEEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKS4_EEEEEENS0_9assign_opIffEELi0EEC2ERS5_RKSQ_RKSS_RS4_,b103,b104,b105,b106,b107,b108,b109,b110,b111,b112,__ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_13MatrixWrapperIKNS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESC_EEEEEENS0_9assign_opIffEELi0EEC2ERS5_RKSG_RKSI_RS4_,b113,b114,__ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS0_9assign_opIffEELi0EEC2ERS5_RKS8_RKSA_RS4_,b115,b116,__ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS6_INS0_17scalar_product_opIffEEKS4_KNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEESB_EEEENS0_9assign_opIffEELi0EEC2ERS5_RKSK_RKSM_RS4_,b117,b118,b119,b120,b121,b122,b123,b124
,b125,b126,b127,b128,b129,b130,b131,b132,b133];
var FUNCTION_TABLE_dii = [b135,b136,b137,b138,b139,b140,b141,b142,b143,b144,b145,b146,b147,b148,b149,b150,b151,b152,b153,b154,b155,b156,b157,b158,b159,b160,b161,b162,b163
,b164,b165,b166,b167,b168,b169,b170,b171,b172,b173,b174,b175,b176,b177,b178,b179,b180,b181,b182,b183,b184,b185,b186,b187,b188,b189,b190,b191,b192,b193
,b194,b195,b196,b197,b198,b199,b200,b201,b202,b203,b204,b205,b206,b207,b208,b209,b210,b211,b212,b213,__ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_12CwiseUnaryOpINS0_14scalar_abs2_opIfEEKNS_13MatrixWrapperIKNS_13CwiseBinaryOpIS3_KNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESC_EEEEEEEELi0ELi3EE3runERKSI_RKS3_,b214,b215,b216,b217,b218,b219,b220,b221,b222
,b223,b224,b225,b226,b227,b228,b229,b230,b231,b232,b233,b234,b235,b236,b237,b238,b239,b240,b241,b242,b243,b244,b245,b246,b247,b248,b249,b250,b251,b252
,b253,b254,b255,b256,b257,b258,b259,b260,b261];
var FUNCTION_TABLE_di = [b263,b264,b265,b266,b267,b268,b269,b270,b271,b272,b273,b274,b275,b276,b277,b278,b279,b280,b281,b282,b283,b284,b285,b286,b287,b288,b289,b290,b291
,b292,b293,b294,b295,b296,b297,b298,b299,b300,b301,b302,b303,b304,b305,b306,b307,b308,__ZNK5flint8geometry6SphereILj3EfE9getRadiusEv,b309,b310,b311,b312,b313,b314,b315,b316,b317,b318,b319,b320
,b321,b322,b323,b324,b325];
var FUNCTION_TABLE_i = [b327,b328,b329,b330,b331,b332,b333,b334,b335,b336,b337,b338,b339,b340,b341,b342,b343,b344,b345,b346,b347,b348,b349,b350,b351,b352,b353,b354,b355
,b356,b357,b358,b359,b360,b361,b362,b363,b364,b365,b366,b367,b368,b369,b370,b371,b372,b373,b374,b375,b376,b377,b378,b379,b380,b381,b382,b383,b384,b385
,b386,b387,b388,b389,b390,b391,b392,b393,b394,b395,b396,b397,b398,b399,b400,b401,b402,b403,b404,b405,b406,b407,b408,b409,b410,b411,b412,b413,b414,b415
,b416,b417,b418,b419,b420,b421,b422,b423,b424,b425,b426,b427,b428,b429,b430,b431,b432,b433,b434,b435,b436,b437,b438,b439,b440,b441,b442,b443,b444,b445
,b446,b447,b448,b449,b450,b451,___cxa_get_globals_fast,b452,b453];
var FUNCTION_TABLE_vi = [b455,b456,b457,b458,b459,b460,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,b461,b462,b463,b464,__ZN10__cxxabiv120__si_class_type_infoD0Ev,b465,b466,b467,__ZNSt9bad_allocD2Ev,__ZNSt9bad_allocD0Ev,b468,__ZNSt11logic_errorD2Ev,__ZNSt11logic_errorD0Ev,b469,__ZNSt12length_errorD0Ev,b470,b471,b472,b473
,b474,b475,b476,b477,b478,b479,b480,b481,b482,b483,b484,b485,b486,b487,b488,b489,b490,b491,b492,b493,b494,b495,b496,b497,b498,b499,b500,b501,b502,b503
,__ZN5Eigen9ArrayBaseINS_5ArrayIjLi3ELi1ELi0ELi3ELi1EEEEC2Ev,b504,b505,b506,b507,b508,__ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_5ArrayIjLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIjjEELi0EEELi1ELi2EE3runERS9_,b509,b510,b511,b512,__ZN5Eigen9ArrayBaseINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEC2Ev,b513,b514,b515,b516,b517,__ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi2EE3runERS9_,b518,b519,b520,b521,b522,b523,b524,b525,b526,b527,b528,b529
,b530,b531,b532,b533,b534,__ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_13CwiseBinaryOpINS0_18scalar_quotient_opIffEEKNS_13MatrixWrapperIKNS7_INS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESF_EEEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKS5_EEEEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSU_,b535,b536,b537,b538,b539,b540,b541,b542,b543,b544,__ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_13MatrixWrapperIKNS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESD_EEEEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSK_,b545,b546,__ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSC_,b547,b548,__ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS0_17scalar_product_opIffEEKS5_KNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEESC_EEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSO_,b549,b550,b551,b552,b553,b554,b555
,b556,b557,b558,b559,b560,__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv,b561,b562,b563];
var FUNCTION_TABLE_vii = [b565,b566,b567,b568,b569,b570,b571,b572,b573,b574,b575,b576,b577,b578,b579,b580,b581,b582,b583,b584,b585,b586,b587,b588,b589,b590,__ZNSt3__26vectorIN5Eigen5ArrayIfLi3ELi1ELi0ELi3ELi1EEENS_9allocatorIS3_EEE8allocateEj,b591,b592
,__ZNSt3__26vectorIN5Eigen5ArrayIjLi3ELi1ELi0ELi3ELi1EEENS_9allocatorIS3_EEE8allocateEj,b593,__ZNSt3__26vectorIN5Eigen5ArrayIjLi3ELi1ELi0ELi3ELi1EEENS_9allocatorIS3_EEEC2ERKS6_,__ZNSt3__26vectorIN5Eigen5ArrayIjLi3ELi1ELi0ELi3ELi1EEENS_9allocatorIS3_EEE7reserveEj,__ZNSt3__26vectorIN5Eigen5ArrayIfLi3ELi1ELi0ELi3ELi1EEENS_9allocatorIS3_EEE7reserveEj,b594,__ZN5Eigen5ArrayIfLi3ELi1ELi0ELi3ELi1EEC2ERKS1_,__ZNSt3__26vectorIN5Eigen5ArrayIfLi3ELi1ELi0ELi3ELi1EEENS_9allocatorIS3_EEE21__push_back_slow_pathIRKS3_EEvOT_,b595,__ZNK5Eigen9ArrayBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES7_EEE6matrixEv,__ZNK5Eigen10MatrixBaseINS_13MatrixWrapperIKNS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES8_EEEEE10normalizedEv,b596,__ZNSt3__26vectorIN5Eigen5ArrayIfLi3ELi1ELi0ELi3ELi1EEENS_9allocatorIS3_EEE21__push_back_slow_pathIS3_EEvOT_,b597,b598,b599,b600,b601,b602,b603,b604,b605,b606,b607,__ZNSt3__26vectorIN5Eigen5ArrayIjLi3ELi1ELi0ELi3ELi1EEENS_9allocatorIS3_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE,__ZNSt3__26vectorIN5Eigen5ArrayIfLi3ELi1ELi0ELi3ELi1EEENS_9allocatorIS3_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE,__ZNSt3__26vectorIN5Eigen5ArrayIfLi3ELi1ELi0ELi3ELi1EEENS_9allocatorIS3_EEE18__construct_at_endEj,__ZNSt11logic_errorC2EPKc,b608,b609
,b610,__ZN5Eigen12DenseStorageIjLi3ELi3ELi1ELi0EEC2ERKS1_,b611,__ZN5Eigen8internal9evaluatorINS_5ArrayIjLi3ELi1ELi0ELi3ELi1EEEEC2ERKS3_,b612,b613,b614,b615,__ZN5Eigen8internal19variable_if_dynamicIiLi0EEC2Ei,b616,b617,b618,__ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EEC2ERKS1_,b619,__ZN5Eigen8internal9evaluatorINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEC2ERKS3_,b620,b621,b622,b623,b624,b625,b626,__ZN5Eigen8internal14scalar_abs2_opIfEC2ERKS2_,b627,__ZN5Eigen8internal9evaluatorIKNS_13MatrixWrapperIKNS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES8_EEEEEC2ERSC_,__ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES7_EEEC2ERKS8_,b628,__ZN5Eigen8internal13scalar_sum_opIffEC2ERKS2_,b629,__ZN5Eigen8internal9evaluatorIKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEC2ERS4_
,b630,b631,__ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC2ERKS3_,b632,b633,b634,b635,__ZN5Eigen8internal18scalar_quotient_opIffEC2ERKS2_,b636,b637,__ZN5Eigen8internal9evaluatorIKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC2ERS9_,b638,__ZN5Eigen8internal18scalar_constant_opIfEC2ERKS2_,b639,b640,b641,b642,b643,b644,b645,b646,b647,b648,b649,b650,__ZN5Eigen8internal9evaluatorIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEEC2ERSE_,b651,b652,__ZN5Eigen8internal17scalar_product_opIffEC2ERKS2_,b653
,b654,__ZN5Eigen8internal9evaluatorIKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEEEC2ERS9_,b655,__ZNSt3__218__libcpp_refstringC2EPKc,b656,b657,b658,_abort_message,b659];
var FUNCTION_TABLE_ii = [b661,___stdio_close,b662,b663,b664,b665,b666,b667,b668,b669,b670,b671,b672,b673,b674,b675,b676,b677,b678,b679,__ZNKSt9bad_alloc4whatEv,b680,b681,__ZNKSt11logic_error4whatEv,b682,b683,b684,b685,b686
,b687,b688,b689,b690,b691,b692,b693,b694,b695,b696,b697,b698,b699,b700,b701,b702,b703,b704,b705,__ZNK5flint8geometry6SphereILj3EfE9getCenterEv,b706,b707,b708,b709,b710,b711,b712,b713,b714,b715
,b716,b717,b718,b719,__ZNK5Eigen9EigenBaseINS_5ArrayIjLi3ELi1ELi0ELi3ELi1EEEE18const_cast_derivedEv,b720,b721,__ZNK5Eigen15PlainObjectBaseINS_5ArrayIjLi3ELi1ELi0ELi3ELi1EEEE4dataEv,b722,b723,b724,b725,b726,b727,b728,__ZNK5Eigen9EigenBaseINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEE18const_cast_derivedEv,b729,b730,__ZNK5Eigen15PlainObjectBaseINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEE4dataEv,b731,b732,__ZNK5Eigen12CwiseUnaryOpINS_8internal14scalar_abs2_opIfEEKNS_13MatrixWrapperIKNS_13CwiseBinaryOpINS1_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESA_EEEEE7functorEv,b733,__ZNK5Eigen12CwiseUnaryOpINS_8internal14scalar_abs2_opIfEEKNS_13MatrixWrapperIKNS_13CwiseBinaryOpINS1_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESA_EEEEE16nestedExpressionEv,b734,b735,__ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES6_E7functorEv,b736,__ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES6_E3lhsEv,b737
,__ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES6_E3rhsEv,b738,b739,__ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE18const_cast_derivedEv,b740,b741,__ZNK5Eigen13CwiseBinaryOpINS_8internal18scalar_quotient_opIffEEKNS_13MatrixWrapperIKNS0_INS1_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES9_EEEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE7functorEv,b742,__ZNK5Eigen13CwiseBinaryOpINS_8internal18scalar_quotient_opIffEEKNS_13MatrixWrapperIKNS0_INS1_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES9_EEEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE3lhsEv,__ZNK5Eigen13CwiseBinaryOpINS_8internal18scalar_quotient_opIffEEKNS_13MatrixWrapperIKNS0_INS1_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES9_EEEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE3rhsEv,b743,__ZNK5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7functorEv,b744,__ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4dataEv,b745,b746,b747,b748,b749,b750,b751,b752,b753,__ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS1_17scalar_product_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEES8_E7functorEv,__ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS1_17scalar_product_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEES8_E3lhsEv,b754,__ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS1_17scalar_product_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEES8_E3rhsEv,__ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE7functorEv,b755,__ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE3lhsEv
,__ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE3rhsEv,b756,__ZNK5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEE7functorEv,b757,b758,b759,b760,b761,b762];
var FUNCTION_TABLE_viii = [b764,b765,b766,b767,b768,b769,b770,b771,b772,b773,b774,b775,b776,b777,b778,b779,b780,b781,b782,b783,b784,b785,b786,b787,b788,b789,b790,b791,b792
,b793,b794,b795,b796,b797,b798,b799,b800,__ZNK5Eigen9ArrayBaseINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEplIS2_EEKNS_13CwiseBinaryOpINS_8internal13scalar_sum_opIfNS6_6traitsIT_E6ScalarEEEKS2_KS9_EERKNS0_IS9_EE,b801,b802,__ZN5Eigen5ArrayIfLi3ELi1ELi0ELi3ELi1EEC2INS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEERKNS_9EigenBaseIT_EENS_8internal9enable_ifIXsr8internal14is_convertibleINS6_6ScalarEfEE5valueENS1_11PrivateTypeEE4typeE,b803,b804,__ZNSt3__26vectorIN5Eigen5ArrayIjLi3ELi1ELi0ELi3ELi1EEENS_9allocatorIS3_EEEC2ERKS6_RKS5_,__ZNSt3__26vectorIN5Eigen5ArrayIfLi3ELi1ELi0ELi3ELi1EEENS_9allocatorIS3_EEEC2ERKS6_RKS5_,__ZNSt3__26vectorIN5Eigen5ArrayIfLi3ELi1ELi0ELi3ELi1EEENS_9allocatorIS3_EEEC2EjRKS5_,b805,__ZNK5Eigen9ArrayBaseINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEEmlIfEENS_8internal9enable_ifILb1EKNS_13CwiseBinaryOpINS5_17scalar_product_opIfNS5_18promote_scalar_argIfT_Xsr5Eigen8internal14has_ReturnTypeINS_20ScalarBinaryOpTraitsIfSA_NS8_IfSA_EEEEEE5valueEE4typeEEEKS2_KNS5_19plain_constant_typeIS2_SF_E4typeEEEE4typeERKSA_,b806,__ZNK5Eigen9ArrayBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEEplIS6_EEKNS1_INS2_13scalar_sum_opIfNS2_6traitsIT_E6ScalarEEEKSD_KSI_EERKNS0_ISI_EE,b807,b808,b809,b810,b811,b812,b813,b814,b815
,b816,b817,__ZN5Eigen8internal17resize_if_allowedINS_5ArrayIjLi3ELi1ELi0ELi3ELi1EEES3_jjEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE,b818,b819,b820,b821,b822,b823,b824,b825,b826,b827,__ZN5Eigen8internal17resize_if_allowedINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE,b828,b829,b830,b831,b832,b833,b834,b835,b836,b837,b838,b839,b840,b841,b842,b843
,b844,__ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_18scalar_quotient_opIffEEKNS_13MatrixWrapperIKNS4_INS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESC_EEEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKS3_EEEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE,b845,b846,b847,b848,b849,b850,b851,b852,b853,b854,b855,b856,__ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13MatrixWrapperIKNS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEESA_EEEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE,b857,b858,__ZN5Eigen8internal17resize_if_allowedINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEENS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE,b859,b860,__ZN5Eigen8internal17resize_if_allowedINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS0_17scalar_product_opIffEEKS3_KNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEES9_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE,b861,b862,b863,b864,b865,b866,b867,b868,b869
,b870,b871,b872,b873,b874,b875,b876,b877,b878];
var FUNCTION_TABLE_v = [b880,b881,b882,b883,b884,__ZL25default_terminate_handlerv,b885,b886,b887,b888,b889,b890,b891,b892,b893,b894,b895,b896,b897,b898,b899,b900,b901,b902,b903,b904,b905,b906,b907
,b908,b909,b910,b911,b912,b913,b914,b915,b916,b917,b918,b919,b920,b921,b922,b923,b924,b925,b926,b927,b928,b929,b930,b931,b932,b933,b934,b935,__ZN5Eigen15PlainObjectBaseINS_5ArrayIjLi3ELi1ELi0ELi3ELi1EEEE22_check_template_paramsEv,b936
,b937,b938,b939,b940,b941,b942,b943,b944,b945,__ZN5Eigen15PlainObjectBaseINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEE22_check_template_paramsEv,b946,b947,b948,b949,b950,b951,b952,b953,b954,b955,b956,b957,b958,b959,b960,b961,b962,b963,b964,b965
,b966,b967,b968,b969,b970,b971,b972,b973,b974,b975,b976,b977,b978,b979,b980,b981,b982,b983,b984,b985,b986,b987,b988,b989,b990,b991,b992,b993,b994,b995
,b996,b997,b998,b999,__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev,b1000,b1001,b1002,___cxa_end_catch__wrapper];
var FUNCTION_TABLE_viiiiii = [b1004,b1005,b1006,b1007,b1008,b1009,b1010,b1011,b1012,b1013,b1014,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b1015,b1016,b1017,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib];
var FUNCTION_TABLE_iii = [b1019,b1020,b1021,b1022,b1023,b1024,b1025,b1026,b1027,b1028,b1029,b1030,b1031,b1032,b1033,b1034,b1035,b1036,b1037,b1038,b1039,b1040,b1041,b1042,b1043,b1044,b1045,b1046,b1047
,b1048,b1049,b1050,b1051,b1052,__ZNK5Eigen15DenseCoeffsBaseINS_5ArrayIjLi3ELi1ELi0ELi3ELi1EEELi0EEixEi,b1053,b1054,b1055,b1056,b1057,b1058,b1059,b1060,b1061,b1062,b1063,b1064,b1065,b1066,b1067,__ZN5Eigen5ArrayIfLi3ELi1ELi0ELi3ELi1EEaSINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS3_INS4_17scalar_product_opIffEEKS1_KNS_14CwiseNullaryOpINS4_18scalar_constant_opIfEES9_EEEES9_EEEERS1_RKNS_9DenseBaseIT_EE,b1068,b1069,b1070,b1071,b1072,b1073,b1074,__ZN5Eigen15PlainObjectBaseINS_5ArrayIjLi3ELi1ELi0ELi3ELi1EEEE12_set_noaliasIS2_EERS2_RKNS_9DenseBaseIT_EE
,b1075,b1076,b1077,b1078,b1079,b1080,b1081,b1082,b1083,b1084,__ZN5Eigen15PlainObjectBaseINS_5ArrayIfLi3ELi1ELi0ELi3ELi1EEEE12_set_noaliasIS2_EERS2_RKNS_9DenseBaseIT_EE,b1085,b1086,b1087,b1088,b1089,b1090,b1091,b1092,__ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_5ArrayIjLi3ELi1ELi0ELi3ELi1EEEEEE5coeffEi,b1093,b1094,b1095,b1096,b1097,b1098,b1099,b1100,b1101,b1102
,b1103,b1104,b1105,b1106,b1107,b1108,b1109,b1110,b1111,b1112,b1113,b1114,b1115,b1116,b1117,b1118,b1119,b1120,b1121,b1122,b1123,b1124,b1125,b1126,b1127,b1128,b1129,b1130,b1131,b1132
,b1133,b1134,b1135,b1136,b1137,b1138,b1139,b1140,b1141];
var FUNCTION_TABLE_viiii = [b1143,b1144,b1145,b1146,b1147,b1148,b1149,b1150,b1151,b1152,b1153,b1154,b1155,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b1156,b1157,b1158,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b1159,b1160,b1161,b1162,b1163,b1164,b1165,__ZN5Eigen5ArrayIfLi3ELi1ELi0ELi3ELi1EEC2ERKfS3_S3_,b1166,__ZNSt3__26vectorIN5Eigen5ArrayIfLi3ELi1ELi0ELi3ELi1EEENS_9allocatorIS3_EEE18__construct_at_endIPKS3_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESB_SB_j,__ZN5Eigen5ArrayIjLi3ELi1ELi0ELi3ELi1EEC2ERKjS3_S3_
,b1167,__ZNSt3__26vectorIN5Eigen5ArrayIjLi3ELi1ELi0ELi3ELi1EEENS_9allocatorIS3_EEE18__construct_at_endIPKS3_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESB_SB_j,b1168,b1169,b1170,b1171,b1172,b1173,b1174,b1175,b1176,b1177,b1178,__ZNSt3__26vectorIN5Eigen5ArrayIjLi3ELi1ELi0ELi3ELi1EEENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJjjjEEEvDpOT_,b1179,b1180,b1181,b1182,b1183,b1184,b1185,b1186,__ZNSt3__26vectorIN5Eigen5ArrayIfLi3ELi1ELi0ELi3ELi1EEENS_9allocatorIS3_EEE18__construct_at_endIPS3_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_j,__ZNSt3__26vectorIN5Eigen5ArrayIjLi3ELi1ELi0ELi3ELi1EEENS_9allocatorIS3_EEE18__construct_at_endIPS3_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_j,b1187,b1188,b1189,b1190,b1191,b1192
,b1193,b1194,b1195,b1196,b1197];

  return { _llvm_bswap_i32: _llvm_bswap_i32, _main: _main, _i64Subtract: _i64Subtract, ___udivdi3: ___udivdi3, setThrew: setThrew, _CreateGeometry__createSphereBuffer: _CreateGeometry__createSphereBuffer, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, ___cxa_is_pointer_type: ___cxa_is_pointer_type, ___errno_location: ___errno_location, _memset: _memset, _sbrk: _sbrk, dynCall_viii: dynCall_viii, _memcpy: _memcpy, stackAlloc: stackAlloc, dynCall_vii: dynCall_vii, ___uremdi3: ___uremdi3, dynCall_vi: dynCall_vi, getTempRet0: getTempRet0, dynCall_di: dynCall_di, setTempRet0: setTempRet0, _i64Add: _i64Add, dynCall_iiii: dynCall_iiii, dynCall_ii: dynCall_ii, setDynamicTop: setDynamicTop, _emscripten_get_global_libc: _emscripten_get_global_libc, dynCall_i: dynCall_i, dynCall_viiii: dynCall_viiii, stackSave: stackSave, dynCall_viiiii: dynCall_viiiii, ___cxa_can_catch: ___cxa_can_catch, _free: _free, runPostSets: runPostSets, dynCall_viiiiii: dynCall_viiiiii, establishStackSpace: establishStackSpace, stackRestore: stackRestore, _malloc: _malloc, dynCall_iii: dynCall_iii, _emscripten_replace_memory: _emscripten_replace_memory, dynCall_dii: dynCall_dii, dynCall_v: dynCall_v };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);

var real__llvm_bswap_i32 = asm["_llvm_bswap_i32"]; asm["_llvm_bswap_i32"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__llvm_bswap_i32.apply(null, arguments);
};

var real__main = asm["_main"]; asm["_main"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__main.apply(null, arguments);
};

var real_setDynamicTop = asm["setDynamicTop"]; asm["setDynamicTop"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setDynamicTop.apply(null, arguments);
};

var real____udivdi3 = asm["___udivdi3"]; asm["___udivdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____udivdi3.apply(null, arguments);
};

var real_getTempRet0 = asm["getTempRet0"]; asm["getTempRet0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_getTempRet0.apply(null, arguments);
};

var real__CreateGeometry__createSphereBuffer = asm["_CreateGeometry__createSphereBuffer"]; asm["_CreateGeometry__createSphereBuffer"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__CreateGeometry__createSphereBuffer.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Lshr.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Shl.apply(null, arguments);
};

var real____cxa_is_pointer_type = asm["___cxa_is_pointer_type"]; asm["___cxa_is_pointer_type"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxa_is_pointer_type.apply(null, arguments);
};

var real__sbrk = asm["_sbrk"]; asm["_sbrk"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__sbrk.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____errno_location.apply(null, arguments);
};

var real____uremdi3 = asm["___uremdi3"]; asm["___uremdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____uremdi3.apply(null, arguments);
};

var real_stackAlloc = asm["stackAlloc"]; asm["stackAlloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackAlloc.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Subtract.apply(null, arguments);
};

var real_setTempRet0 = asm["setTempRet0"]; asm["setTempRet0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setTempRet0.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Add.apply(null, arguments);
};

var real__emscripten_get_global_libc = asm["_emscripten_get_global_libc"]; asm["_emscripten_get_global_libc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_get_global_libc.apply(null, arguments);
};

var real_stackSave = asm["stackSave"]; asm["stackSave"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackSave.apply(null, arguments);
};

var real____cxa_can_catch = asm["___cxa_can_catch"]; asm["___cxa_can_catch"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxa_can_catch.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__free.apply(null, arguments);
};

var real_setThrew = asm["setThrew"]; asm["setThrew"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setThrew.apply(null, arguments);
};

var real_establishStackSpace = asm["establishStackSpace"]; asm["establishStackSpace"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_establishStackSpace.apply(null, arguments);
};

var real_stackRestore = asm["stackRestore"]; asm["stackRestore"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackRestore.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__malloc.apply(null, arguments);
};
var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = asm["_llvm_bswap_i32"];
var _main = Module["_main"] = asm["_main"];
var setDynamicTop = Module["setDynamicTop"] = asm["setDynamicTop"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var getTempRet0 = Module["getTempRet0"] = asm["getTempRet0"];
var _CreateGeometry__createSphereBuffer = Module["_CreateGeometry__createSphereBuffer"] = asm["_CreateGeometry__createSphereBuffer"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = asm["___cxa_is_pointer_type"];
var _memset = Module["_memset"] = asm["_memset"];
var _sbrk = Module["_sbrk"] = asm["_sbrk"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var ___uremdi3 = Module["___uremdi3"] = asm["___uremdi3"];
var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var setTempRet0 = Module["setTempRet0"] = asm["setTempRet0"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _emscripten_get_global_libc = Module["_emscripten_get_global_libc"] = asm["_emscripten_get_global_libc"];
var stackSave = Module["stackSave"] = asm["stackSave"];
var ___cxa_can_catch = Module["___cxa_can_catch"] = asm["___cxa_can_catch"];
var _free = Module["_free"] = asm["_free"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var setThrew = Module["setThrew"] = asm["setThrew"];
var establishStackSpace = Module["establishStackSpace"] = asm["establishStackSpace"];
var stackRestore = Module["stackRestore"] = asm["stackRestore"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _emscripten_replace_memory = Module["_emscripten_replace_memory"] = asm["_emscripten_replace_memory"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_dii = Module["dynCall_dii"] = asm["dynCall_dii"];
var dynCall_di = Module["dynCall_di"] = asm["dynCall_di"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
;
Runtime.stackAlloc = Module['stackAlloc'];
Runtime.stackSave = Module['stackSave'];
Runtime.stackRestore = Module['stackRestore'];
Runtime.establishStackSpace = Module['establishStackSpace'];
Runtime.setDynamicTop = Module['setDynamicTop'];
Runtime.setTempRet0 = Module['setTempRet0'];
Runtime.getTempRet0 = Module['getTempRet0'];


// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;



if (memoryInitializer) {
  if (typeof Module['locateFile'] === 'function') {
    memoryInitializer = Module['locateFile'](memoryInitializer);
  } else if (Module['memoryInitializerPrefixURL']) {
    memoryInitializer = Module['memoryInitializerPrefixURL'] + memoryInitializer;
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, Runtime.GLOBAL_BASE);
  } else {
    addRunDependency('memory initializer');
    var applyMemoryInitializer = function(data) {
      if (data.byteLength) data = new Uint8Array(data);
      for (var i = 0; i < data.length; i++) {
        assert(HEAPU8[Runtime.GLOBAL_BASE + i] === 0, "area for memory initializer should not have been touched before it's loaded");
      }
      HEAPU8.set(data, Runtime.GLOBAL_BASE);
      // Delete the typed array that contains the large blob of the memory initializer request response so that
      // we won't keep unnecessary memory lying around. However, keep the XHR object itself alive so that e.g.
      // its .status field can still be accessed later.
      if (Module['memoryInitializerRequest']) delete Module['memoryInitializerRequest'].response;
      removeRunDependency('memory initializer');
    }
    function doBrowserLoad() {
      Module['readAsync'](memoryInitializer, applyMemoryInitializer, function() {
        throw 'could not load memory initializer ' + memoryInitializer;
      });
    }
    if (Module['memoryInitializerRequest']) {
      // a network request has already been created, just use that
      function useRequest() {
        var request = Module['memoryInitializerRequest'];
        if (request.status !== 200 && request.status !== 0) {
          // If you see this warning, the issue may be that you are using locateFile or memoryInitializerPrefixURL, and defining them in JS. That
          // means that the HTML file doesn't know about them, and when it tries to create the mem init request early, does it to the wrong place.
          // Look in your browser's devtools network console to see what's going on.
          console.warn('a problem seems to have happened with Module.memoryInitializerRequest, status: ' + request.status + ', retrying ' + memoryInitializer);
          doBrowserLoad();
          return;
        }
        applyMemoryInitializer(request.response);
      }
      if (Module['memoryInitializerRequest'].response) {
        setTimeout(useRequest, 0); // it's already here; but, apply it asynchronously
      } else {
        Module['memoryInitializerRequest'].addEventListener('load', useRequest); // wait for it
      }
    } else {
      // fetch it from the network ourselves
      doBrowserLoad();
    }
  }
}



/**
 * @constructor
 * @extends {Error}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      var toLog = e;
      if (e && typeof e === 'object' && e.stack) {
        toLog = [e, e.stack];
      }
      Module.printErr('exception thrown: ' + toLog);
      Module['quit'](1, e);
    }
  } finally {
    calledMain = true;
  }
}




/** @type {function(Array=)} */
function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = Module.run = run;

function exit(status, implicit) {
  if (implicit && Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') implicitly called by end of main(), but noExitRuntime, so not exiting the runtime (you can use emscripten_force_exit, if you want to force a true shutdown)');
    return;
  }

  if (Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') called, but noExitRuntime, so halting execution but not exiting the runtime or preventing further async execution (you can use emscripten_force_exit, if you want to force a true shutdown)');
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    process['exit'](status);
  }
  Module['quit'](status, new ExitStatus(status));
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}

Module["noExitRuntime"] = true;

run();

// {{POST_RUN_ADDITIONS}}


var workerResponded = false, workerCallbackId = -1;

(function() {
  var messageBuffer = null, buffer = 0, bufferSize = 0;

  function flushMessages() {
    if (!messageBuffer) return;
    if (runtimeInitialized) {
      var temp = messageBuffer;
      messageBuffer = null;
      temp.forEach(function(message) {
        onmessage(message);
      });
    }
  }

  function messageResender() {
    flushMessages();
    if (messageBuffer) {
      setTimeout(messageResender, 100); // still more to do
    }
  }

  onmessage = function onmessage(msg) {
    // if main has not yet been called (mem init file, other async things), buffer messages
    if (!runtimeInitialized) {
      if (!messageBuffer) {
        messageBuffer = [];
        setTimeout(messageResender, 100);
      }
      messageBuffer.push(msg);
      return;
    }
    flushMessages();

    var func = Module['_' + msg.data['funcName']];
    if (!func) throw 'invalid worker function to call: ' + msg.data['funcName'];
    var data = msg.data['data'];
    if (data) {
      if (!data.byteLength) data = new Uint8Array(data);
      if (!buffer || bufferSize < data.length) {
        if (buffer) _free(buffer);
        bufferSize = data.length;
        buffer = _malloc(data.length);
      }
      HEAPU8.set(data, buffer);
    }

    workerResponded = false;
    workerCallbackId = msg.data['callbackId'];
    if (data) {
      func(buffer, data.length);
    } else {
      func(0, 0);
    }
  }
})();





// {{MODULE_ADDITIONS}}







